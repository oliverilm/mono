{"version":3,"file":"LlmTypeCheckerV3.mjs","sources":["../../src/utils/LlmTypeCheckerV3.ts"],"sourcesContent":["import { ILlmSchemaV3 } from \"../structures/ILlmSchemaV3\";\n\n/**\n * Type checker for LLM type schema.\n *\n * `LlmSchemaTypeChecker` is a type checker of {@link ILlmSchemaV3}.\n *\n * @author Samchon\n */\nexport namespace LlmTypeCheckerV3 {\n  /* -----------------------------------------------------------\n    OPERATORS\n  ----------------------------------------------------------- */\n  /**\n   * Visit every nested schemas.\n   *\n   * Visit every nested schemas of the target, and apply the `props.closure` function.\n   *\n   * Here is the list of occuring nested visitings:\n   *\n   * - {@link ILlmSchemaV3.IOneOf.oneOf}\n   * - {@link ILlmSchemaV3.IObject.additionalProperties}\n   * - {@link ILlmSchemaV3.IArray.items}\n   *\n   * @param props Properties for visiting\n   */\n  export const visit = (props: {\n    closure: (schema: ILlmSchemaV3, accessor: string) => void;\n    schema: ILlmSchemaV3;\n    accessor?: string;\n  }): void => {\n    const accessor: string = props.accessor ?? \"$input.schema\";\n    props.closure(props.schema, accessor);\n    if (isOneOf(props.schema))\n      props.schema.oneOf.forEach((s, i) =>\n        visit({\n          closure: props.closure,\n          schema: s,\n          accessor: `${accessor}.oneOf[${i}]`,\n        }),\n      );\n    else if (isObject(props.schema)) {\n      for (const [k, s] of Object.entries(props.schema.properties))\n        visit({\n          closure: props.closure,\n          schema: s,\n          accessor: `${accessor}.properties[${JSON.stringify(k)}]`,\n        });\n      if (\n        typeof props.schema.additionalProperties === \"object\" &&\n        props.schema.additionalProperties !== null\n      )\n        visit({\n          closure: props.closure,\n          schema: props.schema.additionalProperties,\n          accessor: `${accessor}.additionalProperties`,\n        });\n    } else if (isArray(props.schema))\n      visit({\n        closure: props.closure,\n        schema: props.schema.items,\n        accessor: `${accessor}.items`,\n      });\n  };\n\n  /* -----------------------------------------------------------\n    TYPE CHECKERS\n  ----------------------------------------------------------- */\n  /**\n   * Test whether the schema is an union type.\n   *\n   * @param schema Target schema\n   * @returns Whether union type or not\n   */\n  export const isOneOf = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.IOneOf =>\n    (schema as ILlmSchemaV3.IOneOf).oneOf !== undefined;\n\n  /**\n   * Test whether the schema is an object type.\n   *\n   * @param schema Target schema\n   * @returns Whether object type or not\n   */\n  export const isObject = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.IObject =>\n    (schema as ILlmSchemaV3.IObject).type === \"object\";\n\n  /**\n   * Test whether the schema is an array type.\n   *\n   * @param schema Target schema\n   * @returns Whether array type or not\n   */\n  export const isArray = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.IArray =>\n    (schema as ILlmSchemaV3.IArray).type === \"array\";\n\n  /**\n   * Test whether the schema is a boolean type.\n   *\n   * @param schema Target schema\n   * @returns Whether boolean type or not\n   */\n  export const isBoolean = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.IBoolean =>\n    (schema as ILlmSchemaV3.IBoolean).type === \"boolean\";\n\n  /**\n   * Test whether the schema is an integer type.\n   *\n   * @param schema Target schema\n   * @returns Whether integer type or not\n   */\n  export const isInteger = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.IInteger =>\n    (schema as ILlmSchemaV3.IInteger).type === \"integer\";\n\n  /**\n   * Test whether the schema is a number type.\n   *\n   * @param schema Target schema\n   * @returns Whether number type or not\n   */\n  export const isNumber = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.INumber =>\n    (schema as ILlmSchemaV3.INumber).type === \"number\";\n\n  /**\n   * Test whether the schema is a string type.\n   *\n   * @param schema Target schema\n   * @returns Whether string type or not\n   */\n  export const isString = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.IString =>\n    (schema as ILlmSchemaV3.IString).type === \"string\";\n\n  /**\n   * Test whether the schema is a null type.\n   *\n   * @param schema Target schema\n   * @returns Whether null type or not\n   */\n  export const isNullOnly = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.INullOnly =>\n    (schema as ILlmSchemaV3.INullOnly).type === \"null\";\n\n  /**\n   * Test whether the schema is a nullable type.\n   *\n   * @param schema Target schema\n   * @returns Whether nullable type or not\n   */\n  export const isNullable = (schema: ILlmSchemaV3): boolean =>\n    !isUnknown(schema) &&\n    (isNullOnly(schema) ||\n      (isOneOf(schema)\n        ? schema.oneOf.some(isNullable)\n        : schema.nullable === true));\n\n  /**\n   * Test whether the schema is an unknown type.\n   *\n   * @param schema Target schema\n   * @returns Whether unknown type or not\n   */\n  export const isUnknown = (\n    schema: ILlmSchemaV3,\n  ): schema is ILlmSchemaV3.IUnknown =>\n    !isOneOf(schema) && (schema as ILlmSchemaV3.IUnknown).type === undefined;\n}\n"],"names":["LlmTypeCheckerV3","visit","props","accessor","closure","schema","isOneOf","oneOf","forEach","s","i","isObject","k","Object","entries","properties","JSON","stringify","additionalProperties","isArray","items","undefined","type","isBoolean","isInteger","isNumber","isString","isNullOnly","isNullable","isUnknown","some","nullable"],"mappings":"AASM,IAAWA;;CAAjB,SAAiBA;IAiBFA,iBAAAC,QAASC;QAKpB,MAAMC,WAAmBD,MAAMC,YAAY;QAC3CD,MAAME,QAAQF,MAAMG,QAAQF;QAC5B,IAAIH,iBAAAM,QAAQJ,MAAMG,SAChBH,MAAMG,OAAOE,MAAMC,SAAQ,CAACC,GAAGC,MAC7BV,iBAAAC,MAAM;YACJG,SAASF,MAAME;YACfC,QAAQI;YACRN,UAAU,GAAGA,kBAAkBO;mBAGhC,IAAIV,iBAAAW,SAAST,MAAMG,SAAS;YAC/B,KAAK,OAAOO,GAAGH,MAAMI,OAAOC,QAAQZ,MAAMG,OAAOU,aAC/Cf,iBAAAC,MAAM;gBACJG,SAASF,MAAME;gBACfC,QAAQI;gBACRN,UAAU,GAAGA,uBAAuBa,KAAKC,UAAUL;;YAEvD,WACSV,MAAMG,OAAOa,yBAAyB,YAC7ChB,MAAMG,OAAOa,yBAAyB,MAEtClB,iBAAAC,MAAM;gBACJG,SAASF,MAAME;gBACfC,QAAQH,MAAMG,OAAOa;gBACrBf,UAAU,GAAGA;;eAEZ,IAAIH,iBAAAmB,QAAQjB,MAAMG,SACvBL,iBAAAC,MAAM;YACJG,SAASF,MAAME;YACfC,QAAQH,MAAMG,OAAOe;YACrBjB,UAAU,GAAGA;;AACb;IAYOH,iBAAOM,UAClBD,UAECA,OAA+BE,UAAUc;IAQ/BrB,iBAAQW,WACnBN,UAECA,OAAgCiB,SAAS;IAQ/BtB,iBAAOmB,UAClBd,UAECA,OAA+BiB,SAAS;IAQ9BtB,iBAASuB,YACpBlB,UAECA,OAAiCiB,SAAS;IAQhCtB,iBAASwB,YACpBnB,UAECA,OAAiCiB,SAAS;IAQhCtB,iBAAQyB,WACnBpB,UAECA,OAAgCiB,SAAS;IAQ/BtB,iBAAQ0B,WACnBrB,UAECA,OAAgCiB,SAAS;IAQ/BtB,iBAAU2B,aACrBtB,UAECA,OAAkCiB,SAAS;IAQjCtB,iBAAU4B,aAAIvB,WACxBL,iBAAA6B,UAAUxB,YACVL,iBAAA2B,WAAWtB,YACTL,iBAAAM,QAAQD,UACLA,OAAOE,MAAMuB,KAAK9B,iBAAA4B,cAClBvB,OAAO0B,aAAa;IAQf/B,iBAAA6B,YACXxB,WAECL,iBAAAM,QAAQD,WAAYA,OAAiCiB,SAASD;AAClE,EA1KD,CAAiBrB,qBAAAA,mBA0KhB,CAAA;;"}