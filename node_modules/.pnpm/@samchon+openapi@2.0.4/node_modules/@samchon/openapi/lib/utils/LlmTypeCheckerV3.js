"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlmTypeCheckerV3 = void 0;
/**
 * Type checker for LLM type schema.
 *
 * `LlmSchemaTypeChecker` is a type checker of {@link ILlmSchemaV3}.
 *
 * @author Samchon
 */
var LlmTypeCheckerV3;
(function (LlmTypeCheckerV3) {
    /* -----------------------------------------------------------
      OPERATORS
    ----------------------------------------------------------- */
    /**
     * Visit every nested schemas.
     *
     * Visit every nested schemas of the target, and apply the `props.closure` function.
     *
     * Here is the list of occuring nested visitings:
     *
     * - {@link ILlmSchemaV3.IOneOf.oneOf}
     * - {@link ILlmSchemaV3.IObject.additionalProperties}
     * - {@link ILlmSchemaV3.IArray.items}
     *
     * @param props Properties for visiting
     */
    LlmTypeCheckerV3.visit = function (props) {
        var e_1, _a;
        var _b;
        var accessor = (_b = props.accessor) !== null && _b !== void 0 ? _b : "$input.schema";
        props.closure(props.schema, accessor);
        if (LlmTypeCheckerV3.isOneOf(props.schema))
            props.schema.oneOf.forEach(function (s, i) {
                return LlmTypeCheckerV3.visit({
                    closure: props.closure,
                    schema: s,
                    accessor: "".concat(accessor, ".oneOf[").concat(i, "]"),
                });
            });
        else if (LlmTypeCheckerV3.isObject(props.schema)) {
            try {
                for (var _c = __values(Object.entries(props.schema.properties)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var _e = __read(_d.value, 2), k = _e[0], s = _e[1];
                    LlmTypeCheckerV3.visit({
                        closure: props.closure,
                        schema: s,
                        accessor: "".concat(accessor, ".properties[").concat(JSON.stringify(k), "]"),
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (typeof props.schema.additionalProperties === "object" &&
                props.schema.additionalProperties !== null)
                LlmTypeCheckerV3.visit({
                    closure: props.closure,
                    schema: props.schema.additionalProperties,
                    accessor: "".concat(accessor, ".additionalProperties"),
                });
        }
        else if (LlmTypeCheckerV3.isArray(props.schema))
            LlmTypeCheckerV3.visit({
                closure: props.closure,
                schema: props.schema.items,
                accessor: "".concat(accessor, ".items"),
            });
    };
    /* -----------------------------------------------------------
      TYPE CHECKERS
    ----------------------------------------------------------- */
    /**
     * Test whether the schema is an union type.
     *
     * @param schema Target schema
     * @returns Whether union type or not
     */
    LlmTypeCheckerV3.isOneOf = function (schema) {
        return schema.oneOf !== undefined;
    };
    /**
     * Test whether the schema is an object type.
     *
     * @param schema Target schema
     * @returns Whether object type or not
     */
    LlmTypeCheckerV3.isObject = function (schema) {
        return schema.type === "object";
    };
    /**
     * Test whether the schema is an array type.
     *
     * @param schema Target schema
     * @returns Whether array type or not
     */
    LlmTypeCheckerV3.isArray = function (schema) {
        return schema.type === "array";
    };
    /**
     * Test whether the schema is a boolean type.
     *
     * @param schema Target schema
     * @returns Whether boolean type or not
     */
    LlmTypeCheckerV3.isBoolean = function (schema) {
        return schema.type === "boolean";
    };
    /**
     * Test whether the schema is an integer type.
     *
     * @param schema Target schema
     * @returns Whether integer type or not
     */
    LlmTypeCheckerV3.isInteger = function (schema) {
        return schema.type === "integer";
    };
    /**
     * Test whether the schema is a number type.
     *
     * @param schema Target schema
     * @returns Whether number type or not
     */
    LlmTypeCheckerV3.isNumber = function (schema) {
        return schema.type === "number";
    };
    /**
     * Test whether the schema is a string type.
     *
     * @param schema Target schema
     * @returns Whether string type or not
     */
    LlmTypeCheckerV3.isString = function (schema) {
        return schema.type === "string";
    };
    /**
     * Test whether the schema is a null type.
     *
     * @param schema Target schema
     * @returns Whether null type or not
     */
    LlmTypeCheckerV3.isNullOnly = function (schema) {
        return schema.type === "null";
    };
    /**
     * Test whether the schema is a nullable type.
     *
     * @param schema Target schema
     * @returns Whether nullable type or not
     */
    LlmTypeCheckerV3.isNullable = function (schema) {
        return !LlmTypeCheckerV3.isUnknown(schema) &&
            (LlmTypeCheckerV3.isNullOnly(schema) ||
                (LlmTypeCheckerV3.isOneOf(schema)
                    ? schema.oneOf.some(LlmTypeCheckerV3.isNullable)
                    : schema.nullable === true));
    };
    /**
     * Test whether the schema is an unknown type.
     *
     * @param schema Target schema
     * @returns Whether unknown type or not
     */
    LlmTypeCheckerV3.isUnknown = function (schema) {
        return !LlmTypeCheckerV3.isOneOf(schema) && schema.type === undefined;
    };
})(LlmTypeCheckerV3 || (exports.LlmTypeCheckerV3 = LlmTypeCheckerV3 = {}));
