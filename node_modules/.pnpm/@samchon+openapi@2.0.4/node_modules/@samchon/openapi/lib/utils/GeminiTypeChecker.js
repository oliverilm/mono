"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeminiTypeChecker = void 0;
/**
 * Type checker for Gemini type schema.
 *
 * `GeminiTypeChecker` is a type checker of {@link IGeminiSchema}.
 *
 * @author Samchon
 */
var GeminiTypeChecker;
(function (GeminiTypeChecker) {
    /* -----------------------------------------------------------
      OPERATORS
    ----------------------------------------------------------- */
    /**
     * Visit every nested schemas.
     *
     * Visit every nested schemas of the target, and apply the `props.closure` function.
     *
     * Here is the list of occuring nested visitings:
     *
     * - {@link IGeminiSchema.IObject.properties}
     * - {@link IGeminiSchema.IArray.items}
     *
     * @param props Properties for visiting
     */
    GeminiTypeChecker.visit = function (props) {
        var _a, _b;
        var accessor = (_a = props.accessor) !== null && _a !== void 0 ? _a : "$input.schema";
        props.closure(props.schema, accessor);
        if (GeminiTypeChecker.isObject(props.schema))
            Object.entries((_b = props.schema.properties) !== null && _b !== void 0 ? _b : {}).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return GeminiTypeChecker.visit({
                    closure: props.closure,
                    schema: value,
                    accessor: "".concat(accessor, ".properties[").concat(JSON.stringify(key), "]"),
                });
            });
        else if (GeminiTypeChecker.isArray(props.schema))
            GeminiTypeChecker.visit({
                closure: props.closure,
                schema: props.schema.items,
                accessor: "".concat(accessor, ".items"),
            });
    };
    /**
     * Test whether the `x` schema covers the `y` schema.
     *
     * @param props Properties for testing
     * @returns Whether the `x` schema covers the `y` schema
     */
    GeminiTypeChecker.covers = function (x, y) {
        // CHECK EQUALITY
        if (x === y)
            return true;
        else if (GeminiTypeChecker.isUnknown(x))
            return true;
        else if (GeminiTypeChecker.isUnknown(y))
            return false;
        else if (GeminiTypeChecker.isNullOnly(x))
            return GeminiTypeChecker.isNullOnly(y);
        else if (GeminiTypeChecker.isNullOnly(y))
            return x.nullable === true;
        else if (x.nullable === true && !!y.nullable === false)
            return false;
        // ATOMIC CASE
        else if (GeminiTypeChecker.isBoolean(x))
            return GeminiTypeChecker.isBoolean(y) && coverBoolean(x, y);
        else if (GeminiTypeChecker.isInteger(x))
            return GeminiTypeChecker.isInteger(y) && coverInteger(x, y);
        else if (GeminiTypeChecker.isNumber(x))
            return (GeminiTypeChecker.isNumber(y) || GeminiTypeChecker.isInteger(y)) && coverNumber(x, y);
        else if (GeminiTypeChecker.isString(x))
            return GeminiTypeChecker.isString(y) && covertString(x, y);
        // INSTANCE CASE
        else if (GeminiTypeChecker.isArray(x))
            return GeminiTypeChecker.isArray(y) && coverArray(x, y);
        else if (GeminiTypeChecker.isObject(x))
            return GeminiTypeChecker.isObject(y) && coverObject(x, y);
        return false;
    };
    /**
     * @internal
     */
    var coverBoolean = function (x, y) {
        return x.enum === undefined ||
            (y.enum !== undefined && x.enum.every(function (v) { return y.enum.includes(v); }));
    };
    /**
     * @internal
     */
    var coverInteger = function (x, y) {
        if (x.enum !== undefined)
            return y.enum !== undefined && x.enum.every(function (v) { return y.enum.includes(v); });
        return x.type === y.type;
    };
    /**
     * @internal
     */
    var coverNumber = function (x, y) {
        if (x.enum !== undefined)
            return y.enum !== undefined && x.enum.every(function (v) { return y.enum.includes(v); });
        return x.type === y.type;
    };
    /**
     * @internal
     */
    var covertString = function (x, y) {
        if (x.enum !== undefined)
            return y.enum !== undefined && x.enum.every(function (v) { return y.enum.includes(v); });
        return x.type === y.type;
    };
    /**
     * @internal
     */
    var coverArray = function (x, y) { return GeminiTypeChecker.covers(x.items, y.items); };
    /**
     * @internal
     */
    var coverObject = function (x, y) {
        var _a;
        return Object.entries((_a = y.properties) !== null && _a !== void 0 ? _a : {}).every(function (_a) {
            var _b, _c, _d, _e, _f;
            var _g = __read(_a, 2), key = _g[0], b = _g[1];
            var a = (_b = x.properties) === null || _b === void 0 ? void 0 : _b[key];
            if (a === undefined)
                return false;
            else if (((_d = (_c = x.required) === null || _c === void 0 ? void 0 : _c.includes(key)) !== null && _d !== void 0 ? _d : false) === true &&
                ((_f = (_e = y.required) === null || _e === void 0 ? void 0 : _e.includes(key)) !== null && _f !== void 0 ? _f : false) === false)
                return false;
            return GeminiTypeChecker.covers(a, b);
        });
    };
    /* -----------------------------------------------------------
      TYPE CHECKERS
    ----------------------------------------------------------- */
    /**
     * Test whether the schema is a boolean type.
     *
     * @param schema Target schema
     * @returns Whether boolean type or not
     */
    GeminiTypeChecker.isBoolean = function (schema) {
        return schema.type === "boolean";
    };
    /**
     * Test whether the schema is an integer type.
     *
     * @param schema Target schema
     * @returns Whether integer type or not
     */
    GeminiTypeChecker.isInteger = function (schema) {
        return schema.type === "integer";
    };
    /**
     * Test whether the schema is a number type.
     *
     * @param schema Target schema
     * @returns Whether number type or not
     */
    GeminiTypeChecker.isNumber = function (schema) {
        return schema.type === "number";
    };
    /**
     * Test whether the schema is a string type.
     *
     * @param schema Target schema
     * @returns Whether string type or not
     */
    GeminiTypeChecker.isString = function (schema) {
        return schema.type === "string";
    };
    /**
     * Test whether the schema is an array type.
     *
     * @param schema Target schema
     * @returns Whether array type or not
     */
    GeminiTypeChecker.isArray = function (schema) {
        return schema.type === "array";
    };
    /**
     * Test whether the schema is an object type.
     *
     * @param schema Target schema
     * @returns Whether object type or not
     */
    GeminiTypeChecker.isObject = function (schema) {
        return schema.type === "object";
    };
    /**
     * Test whether the schema is a null type.
     *
     * @param schema Target schema
     * @returns Whether null type or not
     */
    GeminiTypeChecker.isNullOnly = function (schema) {
        return schema.type === "null";
    };
    /**
     * Test whether the schema is a nullable type.
     *
     * @param schema Target schema
     * @returns Whether nullable type or not
     */
    GeminiTypeChecker.isNullable = function (schema) {
        return !GeminiTypeChecker.isUnknown(schema) && (GeminiTypeChecker.isNullOnly(schema) || schema.nullable === true);
    };
    /**
     * Test whether the schema is an unknown type.
     *
     * @param schema Target schema
     * @returns Whether unknown type or not
     */
    GeminiTypeChecker.isUnknown = function (schema) {
        return schema.type === undefined;
    };
})(GeminiTypeChecker || (exports.GeminiTypeChecker = GeminiTypeChecker = {}));
