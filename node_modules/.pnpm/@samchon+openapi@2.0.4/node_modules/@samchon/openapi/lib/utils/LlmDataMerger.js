"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlmDataMerger = void 0;
/**
 * Data combiner for LLM function call.
 *
 * @author Samchon
 */
var LlmDataMerger;
(function (LlmDataMerger) {
    /**
     * Combine LLM and human arguments into one.
     *
     * When you composes {@link IOpenAiDocument} with
     * {@link IOpenAiDocument.IOptions.separate} option, then the arguments of the
     * target function would be separated into two parts; LLM (Large Language Model)
     * and human.
     *
     * In that case, you can combine both LLM and human composed arguments into one
     * by utilizing this {@link LlmDataMerger.parameters} function, referencing
     * the target function metadata {@link IOpenAiFunction.separated}.
     *
     * @param props Properties to combine LLM and human arguments with metadata.
     * @returns Combined arguments
     */
    LlmDataMerger.parameters = function (props) {
        var separated = props.function.separated;
        if (separated === undefined)
            throw new Error("Error on OpenAiDataComposer.parameters(): the function parameters are not separated.");
        return LlmDataMerger.value(props.llm, props.human);
    };
    /**
     * Combine two values into one.
     *
     * If both values are objects, then combines them in the properties level.
     *
     * Otherwise, returns the latter value if it's not null, otherwise the former value
     *
     * - `return (y ?? x)`
     *
     * @param x Value X
     * @param y Value Y
     * @returns Combined value
     */
    LlmDataMerger.value = function (x, y) {
        return typeof x === "object" && typeof y === "object" && x !== null && y !== null
            ? combineObject(x, y)
            : Array.isArray(x) && Array.isArray(y)
                ? new Array(Math.max(x.length, y.length))
                    .fill(0)
                    .map(function (_, i) { return LlmDataMerger.value(x[i], y[i]); })
                : (y !== null && y !== void 0 ? y : x);
    };
    var combineObject = function (x, y) {
        var e_1, _a;
        var output = __assign({}, x);
        try {
            for (var _b = __values(Object.entries(y)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
                output[k] = LlmDataMerger.value(x[k], v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return output;
    };
})(LlmDataMerger || (exports.LlmDataMerger = LlmDataMerger = {}));
