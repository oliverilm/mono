{"version":3,"file":"IClaudeSchema.mjs","sources":["../../src/structures/IClaudeSchema.ts"],"sourcesContent":["import { ILlmSchemaV3_1 } from \"./ILlmSchemaV3_1\";\n\n/**\n * Type schema info of the Claude.\n *\n * `IClaudeSchema` is a type schema info of the Claude function calling.\n *\n * `IClaudeSchema` seems fully supporting the JSON schema definition of the OpenAPI v3.1\n * specification; {@link OpenApiV3_1.IJsonSchema}. By the way, as the\n * {@link OpenApiV3_1.IJsonSchema} has too much ambiguous and duplicated expressions,\n * `IClaudeSchema` is designed to be clear and simple for the Claude function calling,\n * by utilizng {@link ILlmSchemaV3_1} which has been transformed from the\n * {@link OpenApi.IJsonSchema} for the convenience and clarity.\n *\n * Therefore, `IClaudeSchema` does not follow the entire specification of\n * the OpenAPI v3.1. It has own specific restrictions and definitions. Here is the\n * list of how `ILlmSchemaV3_1` is different with the OpenAPI v3.1 JSON schema.\n *\n * - Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\n * - Resolve nullable property: {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\n * - Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\n * - Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\n * - Merge {@link OpenApiV3_1.IJsonSchema.IAnyOf} to {@link IClaudeSchema.IOneOf}\n * - Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IClaudeSchema.IObject}\n * - Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to {@link IClaudeSchema.IReference}\n * - Do not support {@link OpenApiV3_1.IJsonSchema.ITuple} type\n *\n * If compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema specification,\n *\n * - {@link IClaudeSchema.IParameters.$defs} instead of the {@link OpenApi.IJsonSchema.schemas}\n * - Do not support {@link OpenApi.IJsonSchema.ITuple} type\n * - {@link IClaudeSchema.properties} and {@link IClaudeSchema.required} are always defined\n *\n * For reference, if you've composed the `IClaudeSchema` type with the\n * {@link IClaudeSchema.IConfig.reference} `false` option (default is `false`), only the\n * recursive named types would be archived into the {@link IClaudeSchema.IParameters.$defs},\n * and the others would be escaped from the {@link IClaudeSchema.IReference} type.\n *\n * @reference https://docs.anthropic.com/en/docs/build-with-claude/tool-use\n * @reference https://docs.anthropic.com/en/docs/test-and-evaluate/strengthen-guardrails/increase-consistency\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport type IClaudeSchema =\n  | IClaudeSchema.IConstant\n  | IClaudeSchema.IBoolean\n  | IClaudeSchema.IInteger\n  | IClaudeSchema.INumber\n  | IClaudeSchema.IString\n  | IClaudeSchema.IArray\n  | IClaudeSchema.IObject\n  | IClaudeSchema.IReference\n  | IClaudeSchema.IOneOf\n  | IClaudeSchema.INull\n  | IClaudeSchema.IUnknown;\nexport namespace IClaudeSchema {\n  export import IParameters = ILlmSchemaV3_1.IParameters;\n\n  export import IConstant = ILlmSchemaV3_1.IConstant;\n  export import IBoolean = ILlmSchemaV3_1.IBoolean;\n  export import IInteger = ILlmSchemaV3_1.IInteger;\n  export import INumber = ILlmSchemaV3_1.INumber;\n  export import IString = ILlmSchemaV3_1.IString;\n\n  export import IObject = ILlmSchemaV3_1.IObject;\n  export import IArray = ILlmSchemaV3_1.IArray;\n  export import IReference = ILlmSchemaV3_1.IReference;\n  export import IOneOf = ILlmSchemaV3_1.IOneOf;\n  export import INull = ILlmSchemaV3_1.INull;\n  export import IUnknown = ILlmSchemaV3_1.IUnknown;\n\n  /**\n   * Configuration for Claude schema composition.\n   */\n  export interface IConfig {\n    /**\n     * Whether to allow reference type in everywhere.\n     *\n     * If you configure this property to `false`, most of reference types\n     * represented by {@link IClaudeSchema.IReference} would be escaped to\n     * a plain type unless recursive type case.\n     *\n     * This is because some low sized LLM models does not understand the\n     * reference type well, and even the large size LLM models sometimes occur\n     * the hallucination.\n     *\n     * However, the reference type makes the schema size smaller, so that reduces\n     * the LLM token cost. Therefore, if you're using the large size of LLM model,\n     * and want to reduce the LLM token cost, you can configure this property to\n     * `true`.\n     *\n     * @default false\n     */\n    reference: boolean;\n  }\n}\n"],"names":["IClaudeSchema"],"mappings":"AAsDM,IAAWA;;CAAjB,SAAiBA,gBAwChB,EAxCD,CAAiBA,kBAAAA,gBAwChB,CAAA;;"}