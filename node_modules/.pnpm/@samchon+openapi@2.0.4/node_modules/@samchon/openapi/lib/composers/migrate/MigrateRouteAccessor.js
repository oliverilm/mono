"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateRouteAccessor = void 0;
var EndpointUtil_1 = require("../../utils/EndpointUtil");
var Escaper_1 = require("../../utils/Escaper");
var MapUtil_1 = require("../../utils/MapUtil");
var MigrateRouteAccessor;
(function (MigrateRouteAccessor) {
    MigrateRouteAccessor.overwrite = function (routes) {
        var e_1, _a;
        var dict = collect(function (op) {
            return op.emendedPath
                .split("/")
                .filter(function (str) { return !!str.length && str[0] !== ":"; })
                .map(EndpointUtil_1.EndpointUtil.normalize)
                .map(function (str) { return (Escaper_1.Escaper.variable(str) ? str : "_".concat(str)); });
        })(routes);
        var _loop_1 = function (props) {
            props.entries.forEach(function (entry, i) {
                entry.alias = EndpointUtil_1.EndpointUtil.escapeDuplicate(__spreadArray(__spreadArray([], __read(props.children), false), __read(props.entries.filter(function (_, j) { return i !== j; }).map(function (e) { return e.alias; })), false).map(EndpointUtil_1.EndpointUtil.normalize))(EndpointUtil_1.EndpointUtil.normalize(entry.alias));
                entry.route.accessor = __spreadArray(__spreadArray([], __read(props.namespace), false), [entry.alias], false);
                var parameters = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(entry.route.parameters), false), __read((entry.route.body ? [entry.route.body] : [])), false), __read((entry.route.headers ? [entry.route.headers] : [])), false), __read((entry.route.query ? [entry.route.query] : [])), false);
                parameters.forEach(function (p, i) {
                    return (p.key = EndpointUtil_1.EndpointUtil.escapeDuplicate(__spreadArray([
                        "connection",
                        entry.alias
                    ], __read(parameters.filter(function (_, j) { return i !== j; }).map(function (y) { return y.key; })), false))(p.key));
                });
            });
        };
        try {
            for (var _b = __values(dict.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var props = _c.value;
                _loop_1(props);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    var collect = function (getter) {
        return function (routes) {
            var e_2, _a;
            var dict = new Map();
            var _loop_2 = function (r) {
                var namespace = getter(r);
                var last = MapUtil_1.MapUtil.take(dict)(namespace.join("."))(function () { return ({
                    namespace: namespace,
                    children: new Set(),
                    entries: [],
                }); });
                last.entries.push({
                    route: r,
                    alias: getName(r),
                });
                namespace.slice(0, -1).forEach(function (_i, i, array) {
                    var partial = namespace.slice(0, array.length - i);
                    var element = MapUtil_1.MapUtil.take(dict)(partial.join("."))(function () { return ({
                        namespace: partial,
                        children: new Set(),
                        entries: [],
                    }); });
                    element.children.add(last.namespace.at(-1));
                });
                var top_1 = MapUtil_1.MapUtil.take(dict)("")(function () { return ({
                    namespace: [],
                    children: new Set(),
                    entries: [],
                }); });
                if (namespace.length)
                    top_1.children.add(namespace[0]);
            };
            try {
                for (var routes_1 = __values(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {
                    var r = routes_1_1.value;
                    _loop_2(r);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return dict;
        };
    };
    var getName = function (op) {
        var method = op.method === "delete" ? "erase" : op.method;
        if (op.parameters.length === 0)
            return method;
        return (method +
            "By" +
            op.parameters.map(function (p) { return EndpointUtil_1.EndpointUtil.capitalize(p.key); }).join("And"));
    };
})(MigrateRouteAccessor || (exports.MigrateRouteAccessor = MigrateRouteAccessor = {}));
