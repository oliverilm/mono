"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatGptSchemaComposer = void 0;
var ChatGptTypeChecker_1 = require("../../utils/ChatGptTypeChecker");
var LlmTypeCheckerV3_1_1 = require("../../utils/LlmTypeCheckerV3_1");
var OpenApiTypeChecker_1 = require("../../utils/OpenApiTypeChecker");
var LlmSchemaV3_1Composer_1 = require("./LlmSchemaV3_1Composer");
var ChatGptSchemaComposer;
(function (ChatGptSchemaComposer) {
    ChatGptSchemaComposer.parameters = function (props) {
        var e_1, _a;
        var result = LlmSchemaV3_1Composer_1.LlmSchemaV3_1Composer.parameters(__assign(__assign({}, props), { config: {
                reference: props.config.reference,
                constraint: false,
            }, validate: validate }));
        if (result.success === false)
            return result;
        try {
            for (var _b = __values(Object.keys(result.value.$defs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                result.value.$defs[key] = transform(result.value.$defs[key]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            success: true,
            value: transform(result.value),
        };
    };
    ChatGptSchemaComposer.schema = function (props) {
        var e_2, _a;
        var oldbie = new Set(Object.keys(props.$defs));
        var result = LlmSchemaV3_1Composer_1.LlmSchemaV3_1Composer.schema(__assign(__assign({}, props), { config: {
                reference: props.config.reference,
                constraint: false,
            }, validate: validate }));
        if (result.success === false)
            return result;
        try {
            for (var _b = __values(Object.keys(props.$defs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (oldbie.has(key) === false)
                    props.$defs[key] = transform(props.$defs[key]);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return {
            success: true,
            value: transform(result.value),
        };
    };
    var validate = function (schema, accessor) {
        if (OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(schema) && !!schema.additionalProperties)
            return [
                {
                    schema: schema,
                    accessor: "".concat(accessor, ".additionalProperties"),
                    message: "ChatGPT does not allow additionalProperties, the dynamic key typed object.",
                },
            ];
        return [];
    };
    var transform = function (schema) {
        var union = [];
        var attribute = __assign({ title: schema.title, description: schema.description, example: schema.example, examples: schema.examples }, Object.fromEntries(Object.entries(schema).filter(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            return key.startsWith("x-") && value !== undefined;
        })));
        var visit = function (input) {
            if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isOneOf(input))
                input.oneOf.forEach(visit);
            else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isArray(input))
                union.push(__assign(__assign({}, input), { items: transform(input.items) }));
            else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isObject(input))
                union.push(__assign(__assign({}, input), { properties: Object.fromEntries(Object.entries(input.properties).map(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        return [
                            key,
                            transform(value),
                        ];
                    })), additionalProperties: false }));
            else if (LlmTypeCheckerV3_1_1.LlmTypeCheckerV3_1.isConstant(input) === false)
                union.push(input);
        };
        var visitConstant = function (input) {
            var insert = function (value) {
                var _a;
                var matched = union.find(function (u) {
                    return (u === null || u === void 0 ? void 0 : u.type) ===
                        typeof value;
                });
                if (matched !== undefined) {
                    (_a = matched.enum) !== null && _a !== void 0 ? _a : (matched.enum = []);
                    matched.enum.push(value);
                }
                else
                    union.push({
                        type: typeof value,
                        enum: [value],
                    });
            };
            if (OpenApiTypeChecker_1.OpenApiTypeChecker.isConstant(input))
                insert(input.const);
            else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(input))
                input.oneOf.forEach(visitConstant);
        };
        visit(schema);
        visitConstant(schema);
        if (union.length === 0)
            return __assign(__assign({}, attribute), { type: undefined });
        else if (union.length === 1)
            return __assign(__assign(__assign({}, attribute), union[0]), { description: ChatGptTypeChecker_1.ChatGptTypeChecker.isReference(union[0])
                    ? undefined
                    : union[0].description });
        return __assign(__assign({}, attribute), { anyOf: union.map(function (u) { return (__assign(__assign({}, u), { description: ChatGptTypeChecker_1.ChatGptTypeChecker.isReference(u)
                    ? undefined
                    : u.description })); }) });
    };
    ChatGptSchemaComposer.separateParameters = function (props) {
        var e_3, _a;
        var _b = __read(separateObject({
            $defs: props.parameters.$defs,
            predicate: props.predicate,
            schema: props.parameters,
        }), 2), llm = _b[0], human = _b[1];
        if (llm === null || human === null)
            return {
                llm: llm,
                human: human,
            };
        var output = {
            llm: __assign(__assign({}, llm), { $defs: Object.fromEntries(Object.entries(props.parameters.$defs).filter(function (_a) {
                    var _b = __read(_a, 1), key = _b[0];
                    return key.endsWith(".Llm");
                })) }),
            human: __assign(__assign({}, human), { $defs: Object.fromEntries(Object.entries(props.parameters.$defs).filter(function (_a) {
                    var _b = __read(_a, 1), key = _b[0];
                    return key.endsWith(".Human");
                })) }),
        };
        try {
            for (var _c = __values(Object.keys(props.parameters.$defs)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var key = _d.value;
                if (key.endsWith(".Llm") === false && key.endsWith(".Human") === false)
                    delete props.parameters.$defs[key];
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return output;
    };
    var separateStation = function (props) {
        if (props.predicate(props.schema) === true)
            return [null, props.schema];
        else if (ChatGptTypeChecker_1.ChatGptTypeChecker.isUnknown(props.schema) ||
            ChatGptTypeChecker_1.ChatGptTypeChecker.isAnyOf(props.schema))
            return [props.schema, null];
        else if (ChatGptTypeChecker_1.ChatGptTypeChecker.isObject(props.schema))
            return separateObject({
                $defs: props.$defs,
                predicate: props.predicate,
                schema: props.schema,
            });
        else if (ChatGptTypeChecker_1.ChatGptTypeChecker.isArray(props.schema))
            return separateArray({
                $defs: props.$defs,
                predicate: props.predicate,
                schema: props.schema,
            });
        else if (ChatGptTypeChecker_1.ChatGptTypeChecker.isReference(props.schema))
            return separateReference({
                $defs: props.$defs,
                predicate: props.predicate,
                schema: props.schema,
            });
        return [props.schema, null];
    };
    var separateArray = function (props) {
        var _a = __read(separateStation({
            $defs: props.$defs,
            predicate: props.predicate,
            schema: props.schema.items,
        }), 2), x = _a[0], y = _a[1];
        return [
            x !== null
                ? __assign(__assign({}, props.schema), { items: x }) : null,
            y !== null
                ? __assign(__assign({}, props.schema), { items: y }) : null,
        ];
    };
    var separateObject = function (props) {
        var e_4, _a;
        var _b, _c;
        // EMPTY OBJECT
        if (Object.keys((_b = props.schema.properties) !== null && _b !== void 0 ? _b : {}).length === 0 &&
            !!props.schema.additionalProperties === false)
            return [props.schema, null];
        var llm = __assign(__assign({}, props.schema), { properties: {} });
        var human = __assign(__assign({}, props.schema), { properties: {} });
        try {
            for (var _d = __values(Object.entries((_c = props.schema.properties) !== null && _c !== void 0 ? _c : {})), _e = _d.next(); !_e.done; _e = _d.next()) {
                var _f = __read(_e.value, 2), key = _f[0], value = _f[1];
                var _g = __read(separateStation({
                    $defs: props.$defs,
                    predicate: props.predicate,
                    schema: value,
                }), 2), x = _g[0], y = _g[1];
                if (x !== null)
                    llm.properties[key] = x;
                if (y !== null)
                    human.properties[key] = y;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return [
            Object.keys(llm.properties).length === 0 ? null : shrinkRequired(llm),
            Object.keys(human.properties).length === 0 ? null : shrinkRequired(human),
        ];
    };
    var separateReference = function (props) {
        var _a, _b, _c, _d, _e;
        var key = props.schema.$ref.split("#/$defs/")[1];
        // FIND EXISTING
        if (((_a = props.$defs) === null || _a === void 0 ? void 0 : _a["".concat(key, ".Human")]) || ((_b = props.$defs) === null || _b === void 0 ? void 0 : _b["".concat(key, ".Llm")]))
            return [
                ((_c = props.$defs) === null || _c === void 0 ? void 0 : _c["".concat(key, ".Llm")])
                    ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(key, ".Llm") }) : null,
                ((_d = props.$defs) === null || _d === void 0 ? void 0 : _d["".concat(key, ".Human")])
                    ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(key, ".Human") }) : null,
            ];
        // PRE-ASSIGNMENT
        props.$defs["".concat(key, ".Llm")] = {};
        props.$defs["".concat(key, ".Human")] = {};
        // DO COMPOSE
        var schema = (_e = props.$defs) === null || _e === void 0 ? void 0 : _e[key];
        var _f = __read(separateStation({
            $defs: props.$defs,
            predicate: props.predicate,
            schema: schema,
        }), 2), llm = _f[0], human = _f[1];
        // ONLY ONE
        if (llm === null || human === null) {
            delete props.$defs["".concat(key, ".Llm")];
            delete props.$defs["".concat(key, ".Human")];
            return llm === null ? [null, props.schema] : [props.schema, null];
        }
        // BOTH OF THEM
        return [
            llm !== null
                ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(key, ".Llm") }) : null,
            human !== null
                ? __assign(__assign({}, props.schema), { $ref: "#/$defs/".concat(key, ".Human") }) : null,
        ];
    };
    var shrinkRequired = function (s) {
        s.required = s.required.filter(function (key) { var _a; return ((_a = s.properties) === null || _a === void 0 ? void 0 : _a[key]) !== undefined; });
        return s;
    };
})(ChatGptSchemaComposer || (exports.ChatGptSchemaComposer = ChatGptSchemaComposer = {}));
