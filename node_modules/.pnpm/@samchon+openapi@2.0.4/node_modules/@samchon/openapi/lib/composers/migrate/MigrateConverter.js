"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateConverter = void 0;
var EndpointUtil_1 = require("../../utils/EndpointUtil");
var HttpMigrateApplicationComposer_1 = require("../HttpMigrateApplicationComposer");
var MigrateRouteAccessor_1 = require("./MigrateRouteAccessor");
var MigrateConverter;
(function (MigrateConverter) {
    MigrateConverter.convert = function (document) {
        var _a, _b;
        var errors = [];
        var entire = Object.entries(__assign(__assign({}, ((_a = document.paths) !== null && _a !== void 0 ? _a : {})), ((_b = document.webhooks) !== null && _b !== void 0 ? _b : {})))
            .map(function (_a) {
            var _b = __read(_a, 2), path = _b[0], collection = _b[1];
            return ["head", "get", "post", "put", "patch", "delete"]
                .filter(function (method) { return collection[method] !== undefined; })
                .map(function (method) {
                var operation = collection[method];
                var migrated = HttpMigrateApplicationComposer_1.HttpMigrateApplicationComposer.application({
                    document: document,
                    method: method,
                    path: path,
                    emendedPath: EndpointUtil_1.EndpointUtil.reJoinWithDecimalParameters(path),
                    operation: operation,
                });
                if (Array.isArray(migrated)) {
                    errors.push({
                        method: method,
                        path: path,
                        operation: function () { return operation; },
                        messages: migrated,
                    });
                    return null;
                }
                return migrated;
            });
        })
            .flat();
        var operations = entire.filter(function (o) { return !!o; });
        MigrateRouteAccessor_1.MigrateRouteAccessor.overwrite(operations);
        return {
            document: function () { return document; },
            routes: operations,
            errors: errors,
        };
    };
})(MigrateConverter || (exports.MigrateConverter = MigrateConverter = {}));
