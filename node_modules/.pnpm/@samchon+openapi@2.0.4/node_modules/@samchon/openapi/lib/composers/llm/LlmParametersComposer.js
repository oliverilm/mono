"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LlmParametersFinder = void 0;
var OpenApiTypeChecker_1 = require("../../utils/OpenApiTypeChecker");
/**
 * @internal
 */
var LlmParametersFinder;
(function (LlmParametersFinder) {
    LlmParametersFinder.parameters = function (props) {
        var entity = OpenApiTypeChecker_1.OpenApiTypeChecker.unreference(props);
        if (entity.success === false)
            return entity;
        else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(entity.value) === false)
            return reportError(__assign(__assign({}, props), { message: "LLM only accepts object type as parameters." }));
        else if (!!entity.value.additionalProperties)
            return reportError(__assign(__assign({}, props), { message: "LLM does not allow additional properties on parameters." }));
        return {
            success: true,
            value: entity.value,
        };
    };
    var reportError = function (props) {
        var _a;
        return ({
            success: false,
            error: {
                method: props.method,
                message: "failed to compose LLM schema.",
                reasons: [
                    {
                        schema: props.schema,
                        message: props.message,
                        accessor: (_a = props.accessor) !== null && _a !== void 0 ? _a : "$input.schema",
                    },
                ],
            },
        });
    };
})(LlmParametersFinder || (exports.LlmParametersFinder = LlmParametersFinder = {}));
