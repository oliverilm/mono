"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpMigrateApplicationComposer = void 0;
var EndpointUtil_1 = require("../utils/EndpointUtil");
var Escaper_1 = require("../utils/Escaper");
var OpenApiTypeChecker_1 = require("../utils/OpenApiTypeChecker");
var HttpMigrateApplicationComposer;
(function (HttpMigrateApplicationComposer) {
    HttpMigrateApplicationComposer.application = function (props) {
        var e_1, _a;
        var _b, _c, _d, _e, _f;
        //----
        // REQUEST AND RESPONSE BODY
        //----
        var body = emplaceBodySchema("request")(function (schema) {
            return emplaceReference({
                document: props.document,
                name: EndpointUtil_1.EndpointUtil.pascal("I/Api/".concat(props.path)) +
                    "." +
                    EndpointUtil_1.EndpointUtil.pascal("".concat(props.method, "/Body")),
                schema: schema,
            });
        })(props.operation.requestBody);
        var success = (function () {
            var _a, _b, _c, _d, _e, _f, _g;
            var body = emplaceBodySchema("response")(function (schema) {
                return emplaceReference({
                    document: props.document,
                    name: EndpointUtil_1.EndpointUtil.pascal("I/Api/".concat(props.path)) +
                        "." +
                        EndpointUtil_1.EndpointUtil.pascal("".concat(props.method, "/Response")),
                    schema: schema,
                });
            })((_d = (_b = (_a = props.operation.responses) === null || _a === void 0 ? void 0 : _a["201"]) !== null && _b !== void 0 ? _b : (_c = props.operation.responses) === null || _c === void 0 ? void 0 : _c["200"]) !== null && _d !== void 0 ? _d : (_e = props.operation.responses) === null || _e === void 0 ? void 0 : _e.default);
            return body
                ? __assign(__assign({}, body), { status: ((_f = props.operation.responses) === null || _f === void 0 ? void 0 : _f["201"])
                        ? "201"
                        : ((_g = props.operation.responses) === null || _g === void 0 ? void 0 : _g["200"])
                            ? "200"
                            : "default" }) : body;
        })();
        var failures = [];
        if (body === false)
            failures.push("supports only \"application/json\", \"application/x-www-form-urlencoded\", \"multipart/form-data\" and \"text/plain\" content type in the request body.");
        if (success === false)
            failures.push("supports only \"application/json\", \"application/x-www-form-urlencoded\" and \"text/plain\" content type in the response body.");
        //----
        // HEADERS AND QUERY
        //---
        var _g = __read(["header", "query"].map(function (type) {
            var _a, _b, _c, _d;
            // FIND TARGET PARAMETERS
            var parameters = ((_a = props.operation.parameters) !== null && _a !== void 0 ? _a : []).filter(function (p) { return p.in === type; });
            if (parameters.length === 0)
                return null;
            // CHECK PARAMETER TYPES -> TO BE OBJECT
            var objects = parameters
                .map(function (p) {
                var _a, _b;
                return OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(p.schema)
                    ? p.schema
                    : OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(p.schema) &&
                        OpenApiTypeChecker_1.OpenApiTypeChecker.isObject((_b = (_a = props.document.components.schemas) === null || _a === void 0 ? void 0 : _a[p.schema.$ref.replace("#/components/schemas/", "")]) !== null && _b !== void 0 ? _b : {})
                        ? p.schema
                        : null;
            })
                .filter(function (s) { return !!s; });
            var primitives = parameters.filter(function (p) {
                return OpenApiTypeChecker_1.OpenApiTypeChecker.isBoolean(p.schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isInteger(p.schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isNumber(p.schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isString(p.schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isArray(p.schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isTuple(p.schema);
            });
            var out = function (elem) {
                return (__assign(__assign({}, elem), { name: type, key: type, title: function () { return elem.title; }, description: function () { return elem.description; }, example: function () { return elem.example; }, examples: function () { return elem.examples; } }));
            };
            if (objects.length === 1 && primitives.length === 0)
                return out(parameters[0]);
            else if (objects.length > 1) {
                failures.push("".concat(type, " typed parameters must be only one object type"));
                return false;
            }
            // GATHER TO OBJECT TYPE
            var dto = objects[0]
                ? OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(objects[0])
                    ? objects[0]
                    : ((_b = props.document.components.schemas) !== null && _b !== void 0 ? _b : {})[objects[0].$ref.replace("#/components/schemas/", "")]
                : null;
            var entire = __spreadArray(__spreadArray([], __read(objects.map(function (o) {
                var _a;
                return OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(o)
                    ? o
                    : (_a = props.document.components.schemas) === null || _a === void 0 ? void 0 : _a[o.$ref.replace("#/components/schemas/", "")];
            })), false), [
                {
                    type: "object",
                    properties: Object.fromEntries(__spreadArray(__spreadArray([], __read(primitives.map(function (p) {
                        var _a;
                        return [
                            p.name,
                            __assign(__assign({}, p.schema), { description: (_a = p.schema.description) !== null && _a !== void 0 ? _a : p.description }),
                        ];
                    })), false), __read((dto ? Object.entries((_c = dto.properties) !== null && _c !== void 0 ? _c : {}) : [])), false)),
                    required: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(primitives.filter(function (p) { return p.required; }).map(function (p) { return p.name; })), false), __read(((_d = dto === null || dto === void 0 ? void 0 : dto.required) !== null && _d !== void 0 ? _d : [])), false))), false),
                },
            ], false);
            return parameters.length === 0
                ? null
                : out({
                    schema: emplaceReference({
                        document: props.document,
                        name: EndpointUtil_1.EndpointUtil.pascal("I/Api/".concat(props.path)) +
                            "." +
                            EndpointUtil_1.EndpointUtil.pascal("".concat(props.method, "/").concat(type)),
                        schema: {
                            type: "object",
                            properties: Object.fromEntries(__spreadArray([], __read(new Map(entire
                                .map(function (o) {
                                var _a;
                                return Object.entries((_a = o.properties) !== null && _a !== void 0 ? _a : {}).map(function (_a) {
                                    var _b;
                                    var _c = __read(_a, 2), name = _c[0], schema = _c[1];
                                    return [
                                        name,
                                        __assign(__assign({}, schema), { description: (_b = schema.description) !== null && _b !== void 0 ? _b : schema.description }),
                                    ];
                                });
                            })
                                .flat())), false)),
                            required: __spreadArray([], __read(new Set(entire.map(function (o) { var _a; return (_a = o.required) !== null && _a !== void 0 ? _a : []; }).flat())), false),
                        },
                    }),
                });
        }), 2), headers = _g[0], query = _g[1];
        //----
        // PATH PARAMETERS
        //----
        var parameterNames = EndpointUtil_1.EndpointUtil.splitWithNormalization(props.emendedPath)
            .filter(function (str) { return str[0] === ":"; })
            .map(function (str) { return str.substring(1); });
        var pathParameters = ((_b = props.operation.parameters) !== null && _b !== void 0 ? _b : []).filter(function (p) { return p.in === "path"; });
        if (parameterNames.length !== pathParameters.length)
            if (pathParameters.length < parameterNames.length &&
                pathParameters.every(function (p) { return p.name !== undefined && parameterNames.includes(p.name); })) {
                var _loop_1 = function (name_1) {
                    if (pathParameters.find(function (p) { return p.name === name_1; }) === undefined)
                        pathParameters.push({
                            name: name_1,
                            in: "path",
                            schema: { type: "string" },
                        });
                };
                try {
                    for (var parameterNames_1 = __values(parameterNames), parameterNames_1_1 = parameterNames_1.next(); !parameterNames_1_1.done; parameterNames_1_1 = parameterNames_1.next()) {
                        var name_1 = parameterNames_1_1.value;
                        _loop_1(name_1);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (parameterNames_1_1 && !parameterNames_1_1.done && (_a = parameterNames_1.return)) _a.call(parameterNames_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                pathParameters.sort(function (a, b) {
                    return parameterNames.indexOf(a.name) - parameterNames.indexOf(b.name);
                });
                props.operation.parameters = __spreadArray(__spreadArray([], __read(pathParameters), false), __read(((_c = props.operation.parameters) !== null && _c !== void 0 ? _c : []).filter(function (p) { return p.in !== "path"; })), false);
            }
            else
                failures.push("number of path parameters are not matched with its full path.");
        if (failures.length)
            return failures;
        var parameters = ((_d = props.operation.parameters) !== null && _d !== void 0 ? _d : [])
            .filter(function (p) { return p.in === "path"; })
            .map(function (p, i) { return ({
            // FILL KEY NAME IF NOT EXISTsS
            name: parameterNames[i],
            key: (function () {
                var key = EndpointUtil_1.EndpointUtil.normalize(parameterNames[i]);
                if (Escaper_1.Escaper.variable(key))
                    return key;
                while (true) {
                    key = "_" + key;
                    if (!parameterNames.some(function (s) { return s === key; }))
                        return key;
                }
            })(),
            schema: p.schema,
            parameter: function () { return p; },
        }); });
        return {
            method: props.method,
            path: props.path,
            emendedPath: props.emendedPath,
            accessor: ["@lazy"],
            parameters: ((_e = props.operation.parameters) !== null && _e !== void 0 ? _e : [])
                .filter(function (p) { return p.in === "path"; })
                .map(function (p, i) { return ({
                // FILL KEY NAME IF NOT EXISTsS
                name: parameterNames[i],
                key: (function () {
                    var key = EndpointUtil_1.EndpointUtil.normalize(parameterNames[i]);
                    if (Escaper_1.Escaper.variable(key))
                        return key;
                    while (true) {
                        key = "_" + key;
                        if (!parameterNames.some(function (s) { return s === key; }))
                            return key;
                    }
                })(),
                schema: p.schema,
                parameter: function () { return p; },
            }); }),
            headers: headers || null,
            query: query || null,
            body: body || null,
            success: success || null,
            exceptions: Object.fromEntries(Object.entries((_f = props.operation.responses) !== null && _f !== void 0 ? _f : {})
                .filter(function (_a) {
                var _b = __read(_a, 1), key = _b[0];
                return key !== "200" && key !== "201" && key !== "default";
            })
                .map(function (_a) {
                var _b, _c, _d;
                var _e = __read(_a, 2), status = _e[0], response = _e[1];
                return [
                    status,
                    {
                        schema: ((_d = (_c = (_b = response.content) === null || _b === void 0 ? void 0 : _b["application/json"]) === null || _c === void 0 ? void 0 : _c.schema) !== null && _d !== void 0 ? _d : {}),
                        response: function () { return response; },
                        media: function () {
                            var _a, _b;
                            return ((_b = (_a = response.content) === null || _a === void 0 ? void 0 : _a["application/json"]) !== null && _b !== void 0 ? _b : {});
                        },
                    },
                ];
            })),
            comment: function () {
                return writeRouteComment({
                    operation: props.operation,
                    parameters: parameters,
                    query: query || null,
                    body: body || null,
                });
            },
            operation: function () { return props.operation; },
        };
    };
    var writeRouteComment = function (props) {
        var e_2, _a, e_3, _b, e_4, _c;
        var _d, _e, _f, _g, _h, _j;
        var commentTags = [];
        var add = function (text) {
            if (commentTags.every(function (line) { return line !== text; }))
                commentTags.push(text);
        };
        var description = (_d = props.operation.description) !== null && _d !== void 0 ? _d : "";
        if (props.operation.summary) {
            var emended = props.operation.summary.endsWith(".")
                ? props.operation.summary
                : props.operation.summary + ".";
            if (!!description.length &&
                !description.startsWith(props.operation.summary))
                description = "".concat(emended, "\n").concat(description);
        }
        description = description
            .split("\n")
            .map(function (s) { return s.trim(); })
            .join("\n");
        try {
            for (var _k = __values((_e = props.parameters) !== null && _e !== void 0 ? _e : []), _l = _k.next(); !_l.done; _l = _k.next()) {
                var p = _l.value;
                var param = p.parameter();
                if (param.description || param.title) {
                    var text = ((_f = param.description) !== null && _f !== void 0 ? _f : param.title);
                    add("@param ".concat(p.name, " ").concat(writeIndented(text, p.name.length + 8)));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_a = _k.return)) _a.call(_k);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if ((_h = (_g = props.body) === null || _g === void 0 ? void 0 : _g.description()) === null || _h === void 0 ? void 0 : _h.length)
            add("@param body ".concat(writeIndented(props.body.description(), 12)));
        try {
            for (var _m = __values((_j = props.operation.security) !== null && _j !== void 0 ? _j : []), _o = _m.next(); !_o.done; _o = _m.next()) {
                var security = _o.value;
                try {
                    for (var _p = (e_4 = void 0, __values(Object.entries(security))), _q = _p.next(); !_q.done; _q = _p.next()) {
                        var _r = __read(_q.value, 2), name_2 = _r[0], scopes = _r[1];
                        add("@security ".concat(__spreadArray([name_2], __read(scopes), false).join("")));
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_q && !_q.done && (_c = _p.return)) _c.call(_p);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_b = _m.return)) _b.call(_m);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (props.operation.tags)
            props.operation.tags.forEach(function (name) { return add("@tag ".concat(name)); });
        if (props.operation.deprecated)
            add("@deprecated");
        description = description.length
            ? commentTags.length
                ? "".concat(description, "\n\n").concat(commentTags.join("\n"))
                : description
            : commentTags.join("\n");
        description = description.split("*/").join("*\\/");
        return description;
    };
    var writeIndented = function (text, spaces) {
        return text
            .split("\n")
            .map(function (s) { return s.trim(); })
            .map(function (s, i) { return (i === 0 ? s : "".concat(" ".repeat(spaces)).concat(s)); })
            .join("\n");
    };
    var emplaceBodySchema = function (from) {
        return function (emplacer) {
            return function (meta) {
                if (!(meta === null || meta === void 0 ? void 0 : meta.content))
                    return null;
                var entries = Object.entries(meta.content).filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return !!v;
                });
                var json = entries.find(function (e) {
                    return meta["x-nestia-encrypted"] === true
                        ? e[0].includes("text/plain") || e[0].includes("application/json")
                        : e[0].includes("application/json") || e[0].includes("*/*");
                });
                if (json) {
                    var schema = json[1].schema;
                    return schema || from === "response"
                        ? {
                            type: "application/json",
                            name: "body",
                            key: "body",
                            schema: schema
                                ? isNotObjectLiteral(schema)
                                    ? schema
                                    : emplacer(schema)
                                : {},
                            description: function () { return meta.description; },
                            media: function () { return json[1]; },
                            "x-nestia-encrypted": meta["x-nestia-encrypted"],
                        }
                        : null;
                }
                var query = entries.find(function (e) {
                    return e[0].includes("application/x-www-form-urlencoded");
                });
                if (query) {
                    var schema = query[1].schema;
                    return schema || from === "response"
                        ? {
                            type: "application/x-www-form-urlencoded",
                            name: "body",
                            key: "body",
                            schema: schema
                                ? isNotObjectLiteral(schema)
                                    ? schema
                                    : emplacer(schema)
                                : {},
                            description: function () { return meta.description; },
                            media: function () { return query[1]; },
                        }
                        : null;
                }
                var text = entries.find(function (e) { return e[0].includes("text/plain"); });
                if (text)
                    return {
                        type: "text/plain",
                        name: "body",
                        key: "body",
                        schema: { type: "string" },
                        description: function () { return meta.description; },
                        media: function () { return text[1]; },
                    };
                if (from === "request") {
                    var multipart_1 = entries.find(function (e) {
                        return e[0].includes("multipart/form-data");
                    });
                    if (multipart_1) {
                        var schema = multipart_1[1].schema;
                        return {
                            type: "multipart/form-data",
                            name: "body",
                            key: "body",
                            schema: schema
                                ? isNotObjectLiteral(schema)
                                    ? schema
                                    : emplacer(schema)
                                : {},
                            description: function () { return meta.description; },
                            media: function () { return multipart_1[1]; },
                        };
                    }
                }
                return false;
            };
        };
    };
    var emplaceReference = function (props) {
        var _a;
        var _b;
        (_a = (_b = props.document.components).schemas) !== null && _a !== void 0 ? _a : (_b.schemas = {});
        props.document.components.schemas[props.name] = props.schema;
        return {
            $ref: "#/components/schemas/".concat(props.name),
        };
    };
    var isNotObjectLiteral = function (schema) {
        return OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(schema) ||
            OpenApiTypeChecker_1.OpenApiTypeChecker.isBoolean(schema) ||
            OpenApiTypeChecker_1.OpenApiTypeChecker.isNumber(schema) ||
            OpenApiTypeChecker_1.OpenApiTypeChecker.isString(schema) ||
            OpenApiTypeChecker_1.OpenApiTypeChecker.isUnknown(schema) ||
            (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(schema) &&
                schema.oneOf.every(isNotObjectLiteral)) ||
            (OpenApiTypeChecker_1.OpenApiTypeChecker.isArray(schema) && isNotObjectLiteral(schema.items));
    };
})(HttpMigrateApplicationComposer || (exports.HttpMigrateApplicationComposer = HttpMigrateApplicationComposer = {}));
