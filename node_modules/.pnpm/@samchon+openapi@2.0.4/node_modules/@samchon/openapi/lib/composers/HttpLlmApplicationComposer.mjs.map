{"version":3,"file":"HttpLlmApplicationComposer.mjs","sources":["../../src/composers/HttpLlmApplicationComposer.ts"],"sourcesContent":["import { OpenApi } from \"../OpenApi\";\nimport { IChatGptSchema } from \"../structures/IChatGptSchema\";\nimport { IHttpLlmApplication } from \"../structures/IHttpLlmApplication\";\nimport { IHttpLlmFunction } from \"../structures/IHttpLlmFunction\";\nimport { IHttpMigrateApplication } from \"../structures/IHttpMigrateApplication\";\nimport { IHttpMigrateRoute } from \"../structures/IHttpMigrateRoute\";\nimport { ILlmFunction } from \"../structures/ILlmFunction\";\nimport { ILlmSchema } from \"../structures/ILlmSchema\";\nimport { LlmSchemaComposer } from \"./LlmSchemaComposer\";\n\nexport namespace HttpLlmComposer {\n  export const application = <Model extends ILlmSchema.Model>(props: {\n    model: Model;\n    migrate: IHttpMigrateApplication;\n    options: IHttpLlmApplication.IOptions<Model>;\n  }): IHttpLlmApplication<Model> => {\n    // COMPOSE FUNCTIONS\n    const errors: IHttpLlmApplication.IError[] = props.migrate.errors\n      .filter((e) => e.operation()[\"x-samchon-human\"] !== true)\n      .map((e) => ({\n        method: e.method,\n        path: e.path,\n        messages: e.messages,\n        operation: () => e.operation(),\n        route: () => undefined,\n      }));\n    const functions: IHttpLlmFunction<Model>[] = props.migrate.routes\n      .filter((e) => e.operation()[\"x-samchon-human\"] !== true)\n      .map((route, i) => {\n        if (route.method === \"head\") {\n          errors.push({\n            method: route.method,\n            path: route.path,\n            messages: [\"HEAD method is not supported in the LLM application.\"],\n            operation: () => route.operation(),\n            route: () => route as any as IHttpMigrateRoute,\n          });\n          return null;\n        } else if (\n          route.body?.type === \"multipart/form-data\" ||\n          route.success?.type === \"multipart/form-data\"\n        ) {\n          errors.push({\n            method: route.method,\n            path: route.path,\n            messages: [\n              `The \"multipart/form-data\" content type is not supported in the LLM application.`,\n            ],\n            operation: () => route.operation(),\n            route: () => route as any as IHttpMigrateRoute,\n          });\n          return null;\n        }\n        const localErrors: string[] = [];\n        const func: IHttpLlmFunction<Model> | null = composeFunction<Model>({\n          model: props.model,\n          options: props.options,\n          components: props.migrate.document().components,\n          route: route,\n          errors: localErrors,\n          index: i,\n        });\n        if (func === null)\n          errors.push({\n            method: route.method,\n            path: route.path,\n            messages: localErrors,\n            operation: () => route.operation(),\n            route: () => route as any as IHttpMigrateRoute,\n          });\n        return func;\n      })\n      .filter((v): v is IHttpLlmFunction<Model> => v !== null);\n    return {\n      model: props.model,\n      options: props.options,\n      functions,\n      errors,\n    };\n  };\n\n  const composeFunction = <Model extends ILlmSchema.Model>(props: {\n    model: Model;\n    components: OpenApi.IComponents;\n    route: IHttpMigrateRoute;\n    options: IHttpLlmApplication.IOptions<Model>;\n    errors: string[];\n    index: number;\n  }): IHttpLlmFunction<Model> | null => {\n    const $defs: Record<string, IChatGptSchema> = {};\n    const cast = (\n      s: OpenApi.IJsonSchema,\n      accessor: string,\n    ): ILlmSchema.ModelSchema[Model] | null => {\n      const result = LlmSchemaComposer.schema(props.model)({\n        config: props.options as any,\n        schema: s,\n        components: props.components,\n        $defs,\n        accessor,\n        refAccessor: `$input.components.schemas`,\n      });\n      if (result.success === false) {\n        props.errors.push(\n          ...result.error.reasons.map((r) => `${r.accessor}: ${r.message}`),\n        );\n        return null;\n      }\n      return result.value as ILlmSchema.ModelSchema[Model];\n    };\n\n    const endpoint: string = `$input.paths[${JSON.stringify(props.route.path)}][${JSON.stringify(props.route.method)}]`;\n    const output: ILlmSchema.ModelSchema[Model] | null | undefined = props.route\n      .success\n      ? cast(\n          props.route.success.schema,\n          `${endpoint}.responses[${JSON.stringify(props.route.success.status)}][${JSON.stringify(props.route.success.type)}].schema`,\n        )\n      : undefined;\n    const properties: Array<\n      readonly [string, ILlmSchema.ModelSchema[Model] | null]\n    > = [\n      ...props.route.parameters.map(\n        (s) =>\n          [\n            s.key,\n            cast(\n              {\n                ...s.schema,\n                title: s.parameter().title ?? s.schema.title,\n                description: s.parameter().description ?? s.schema.description,\n              },\n              `${endpoint}.parameters[${JSON.stringify(s.key)}].schema`,\n            ),\n          ] as const,\n      ),\n      ...(props.route.query\n        ? [\n            [\n              props.route.query.key,\n              cast(\n                {\n                  ...props.route.query.schema,\n                  title:\n                    props.route.query.title() ?? props.route.query.schema.title,\n                  description:\n                    props.route.query.description() ??\n                    props.route.query.schema.description,\n                },\n                `${endpoint}.parameters[${JSON.stringify(props.route.query.key)}].schema`,\n              ),\n            ] as const,\n          ]\n        : []),\n      ...(props.route.body\n        ? [\n            [\n              props.route.body.key,\n              cast(\n                {\n                  ...props.route.body.schema,\n                  description:\n                    props.route.body.description() ??\n                    props.route.body.schema.description,\n                },\n                `${endpoint}.requestBody.content[${JSON.stringify(props.route.body.type)}].schema`,\n              ),\n            ] as const,\n          ]\n        : []),\n    ];\n    if (output === null || properties.some(([_k, v]) => v === null))\n      return null;\n\n    // COMPOSE PARAMETERS\n    const parameters: ILlmSchema.ModelParameters[Model] = {\n      type: \"object\",\n      properties: Object.fromEntries(\n        properties as [string, ILlmSchema.ModelSchema[Model]][],\n      ),\n      additionalProperties: false,\n      required: properties.map(([k]) => k),\n    } as any as ILlmSchema.ModelParameters[Model];\n    if (Object.keys($defs).length)\n      (parameters as any as IChatGptSchema.IParameters).$defs = $defs;\n    const operation: OpenApi.IOperation = props.route.operation();\n\n    // FINALIZATION\n    return {\n      method: props.route.method as \"get\",\n      path: props.route.path,\n      name: props.route.accessor.join(\"_\"),\n      strict: true,\n      parameters,\n      separated: props.options.separate\n        ? (LlmSchemaComposer.separateParameters(props.model)({\n            predicate: props.options.separate as any,\n            parameters:\n              parameters satisfies ILlmSchema.ModelParameters[Model] as any,\n          }) as ILlmFunction.ISeparated<Model>)\n        : undefined,\n      output: output as any,\n      description: (() => {\n        if (!operation.summary?.length || !operation.description?.length)\n          return operation.summary || operation.description;\n        const summary: string = operation.summary.endsWith(\".\")\n          ? operation.summary.slice(0, -1)\n          : operation.summary;\n        return operation.description.startsWith(summary)\n          ? operation.description\n          : summary + \".\\n\\n\" + operation.description;\n      })(),\n      deprecated: operation.deprecated,\n      tags: operation.tags,\n      route: () => props.route as any,\n      operation: () => props.route.operation(),\n    };\n  };\n}\n"],"names":["HttpLlmComposer","application","props","errors","migrate","filter","e","operation","map","method","path","messages","route","undefined","functions","routes","i","push","body","type","success","localErrors","func","composeFunction","model","options","components","document","index","v","$defs","cast","s","accessor","result","LlmSchemaComposer","schema","config","refAccessor","error","reasons","r","message","value","endpoint","JSON","stringify","output","status","properties","parameters","key","title","parameter","description","query","some","_k","Object","fromEntries","additionalProperties","required","k","keys","length","name","join","strict","separated","separate","separateParameters","predicate","summary","endsWith","slice","startsWith","deprecated","tags"],"mappings":"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"}