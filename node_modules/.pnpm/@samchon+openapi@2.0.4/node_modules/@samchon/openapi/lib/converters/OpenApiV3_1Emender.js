"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenApiV3_1Emender = void 0;
var OpenApiV3_1Emender;
(function (OpenApiV3_1Emender) {
    OpenApiV3_1Emender.convert = function (input) {
        var _a;
        if (input["x-samchon-emended"] === true)
            return input;
        return __assign(__assign({}, input), { components: convertComponents((_a = input.components) !== null && _a !== void 0 ? _a : {}), paths: input.paths
                ? Object.fromEntries(Object.entries(input.paths)
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return v !== undefined;
                })
                    .map(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return [key, convertPathItem(input)(value)];
                }))
                : undefined, webhooks: input.webhooks
                ? Object.fromEntries(Object.entries(input.webhooks)
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return v !== undefined;
                })
                    .map(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return [key, convertWebhooks(input)(value)];
                })
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], value = _b[1];
                    return value !== undefined;
                }))
                : undefined, "x-samchon-emended": true });
    };
    /* -----------------------------------------------------------
      OPERATORS
    ----------------------------------------------------------- */
    var convertWebhooks = function (doc) {
        return function (webhook) {
            var _a, _b, _c;
            if (!TypeChecker.isReference(webhook))
                return convertPathItem(doc)(webhook);
            var found = (_b = (_a = doc.components) === null || _a === void 0 ? void 0 : _a.pathItems) === null || _b === void 0 ? void 0 : _b[(_c = webhook.$ref.split("/").pop()) !== null && _c !== void 0 ? _c : ""];
            return found ? convertPathItem(doc)(found) : undefined;
        };
    };
    var convertPathItem = function (doc) {
        return function (pathItem) { return (__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, pathItem), (pathItem.get
            ? { get: convertOperation(doc)(pathItem)(pathItem.get) }
            : undefined)), (pathItem.put
            ? { put: convertOperation(doc)(pathItem)(pathItem.put) }
            : undefined)), (pathItem.post
            ? { post: convertOperation(doc)(pathItem)(pathItem.post) }
            : undefined)), (pathItem.delete
            ? { delete: convertOperation(doc)(pathItem)(pathItem.delete) }
            : undefined)), (pathItem.options
            ? { options: convertOperation(doc)(pathItem)(pathItem.options) }
            : undefined)), (pathItem.head
            ? { head: convertOperation(doc)(pathItem)(pathItem.head) }
            : undefined)), (pathItem.patch
            ? { patch: convertOperation(doc)(pathItem)(pathItem.patch) }
            : undefined)), (pathItem.trace
            ? { trace: convertOperation(doc)(pathItem)(pathItem.trace) }
            : undefined))); };
    };
    var convertOperation = function (doc) {
        return function (pathItem) {
            return function (input) {
                var _a, _b;
                return (__assign(__assign({}, input), { parameters: pathItem.parameters !== undefined || input.parameters !== undefined
                        ? __spreadArray(__spreadArray([], __read(((_a = pathItem.parameters) !== null && _a !== void 0 ? _a : [])), false), __read(((_b = input.parameters) !== null && _b !== void 0 ? _b : [])), false).map(function (p) {
                            var _a, _b, _c, _d, _e, _f, _g, _h;
                            if (!TypeChecker.isReference(p))
                                return convertParameter((_a = doc.components) !== null && _a !== void 0 ? _a : {})(p);
                            var found = p.$ref.startsWith("#/components/headers/")
                                ? (_c = (_b = doc.components) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c[(_d = p.$ref.split("/").pop()) !== null && _d !== void 0 ? _d : ""]
                                : (_f = (_e = doc.components) === null || _e === void 0 ? void 0 : _e.parameters) === null || _f === void 0 ? void 0 : _f[(_g = p.$ref.split("/").pop()) !== null && _g !== void 0 ? _g : ""];
                            return found !== undefined
                                ? convertParameter((_h = doc.components) !== null && _h !== void 0 ? _h : {})(__assign(__assign({}, found), { in: "header" }))
                                : undefined;
                        })
                            .filter(function (_, v) { return v !== undefined; })
                        : undefined, requestBody: input.requestBody
                        ? convertRequestBody(doc)(input.requestBody)
                        : undefined, responses: input.responses
                        ? Object.fromEntries(Object.entries(input.responses)
                            .filter(function (_a) {
                            var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                            return v !== undefined;
                        })
                            .map(function (_a) {
                            var _b = __read(_a, 2), key = _b[0], value = _b[1];
                            return [key, convertResponse(doc)(value)];
                        })
                            .filter(function (_a) {
                            var _b = __read(_a, 2), _ = _b[0], value = _b[1];
                            return value !== undefined;
                        }))
                        : undefined }));
            };
        };
    };
    var convertParameter = function (components) {
        return function (input) { return (__assign(__assign({}, input), { schema: convertSchema(components)(input.schema), examples: input.examples
                ? Object.fromEntries(Object.entries(input.examples)
                    .map(function (_a) {
                    var _b, _c;
                    var _d = __read(_a, 2), key = _d[0], value = _d[1];
                    return [
                        key,
                        TypeChecker.isReference(value)
                            ? (_b = components.examples) === null || _b === void 0 ? void 0 : _b[(_c = value.$ref.split("/").pop()) !== null && _c !== void 0 ? _c : ""]
                            : value,
                    ];
                })
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return v !== undefined;
                }))
                : undefined })); };
    };
    var convertRequestBody = function (doc) {
        return function (input) {
            var _a, _b, _c, _d;
            if (TypeChecker.isReference(input)) {
                var found = (_b = (_a = doc.components) === null || _a === void 0 ? void 0 : _a.requestBodies) === null || _b === void 0 ? void 0 : _b[(_c = input.$ref.split("/").pop()) !== null && _c !== void 0 ? _c : ""];
                if (found === undefined)
                    return undefined;
                input = found;
            }
            return __assign(__assign({}, input), { content: input.content
                    ? convertContent((_d = doc.components) !== null && _d !== void 0 ? _d : {})(input.content)
                    : undefined });
        };
    };
    var convertResponse = function (doc) {
        return function (input) {
            var _a, _b, _c, _d;
            if (TypeChecker.isReference(input)) {
                var found = (_b = (_a = doc.components) === null || _a === void 0 ? void 0 : _a.responses) === null || _b === void 0 ? void 0 : _b[(_c = input.$ref.split("/").pop()) !== null && _c !== void 0 ? _c : ""];
                if (found === undefined)
                    return undefined;
                input = found;
            }
            return __assign(__assign({}, input), { content: input.content
                    ? convertContent((_d = doc.components) !== null && _d !== void 0 ? _d : {})(input.content)
                    : undefined, headers: input.headers
                    ? Object.fromEntries(Object.entries(input.headers)
                        .filter(function (_a) {
                        var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                        return v !== undefined;
                    })
                        .map(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        return [
                            key,
                            (function () {
                                var _a, _b, _c, _d, _e;
                                if (TypeChecker.isReference(value) === false)
                                    return convertParameter((_a = doc.components) !== null && _a !== void 0 ? _a : {})(__assign(__assign({}, value), { in: "header" }));
                                var found = value.$ref.startsWith("#/components/headers/")
                                    ? (_c = (_b = doc.components) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c[(_d = value.$ref.split("/").pop()) !== null && _d !== void 0 ? _d : ""]
                                    : undefined;
                                return found !== undefined
                                    ? convertParameter((_e = doc.components) !== null && _e !== void 0 ? _e : {})(__assign(__assign({}, found), { in: "header" }))
                                    : undefined;
                            })(),
                        ];
                    })
                        .filter(function (_a) {
                        var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                        return v !== undefined;
                    }))
                    : undefined });
        };
    };
    var convertContent = function (components) {
        return function (record) {
            return Object.fromEntries(Object.entries(record)
                .filter(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                return v !== undefined;
            })
                .map(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return [
                    key,
                    __assign(__assign({}, value), { schema: value.schema
                            ? convertSchema(components)(value.schema)
                            : undefined, examples: value.examples
                            ? Object.fromEntries(Object.entries(value.examples)
                                .map(function (_a) {
                                var _b, _c;
                                var _d = __read(_a, 2), key = _d[0], value = _d[1];
                                return [
                                    key,
                                    TypeChecker.isReference(value)
                                        ? (_b = components.examples) === null || _b === void 0 ? void 0 : _b[(_c = value.$ref.split("/").pop()) !== null && _c !== void 0 ? _c : ""]
                                        : value,
                                ];
                            })
                                .filter(function (_a) {
                                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                                return v !== undefined;
                            }))
                            : undefined }),
                ];
            }));
        };
    };
    /* -----------------------------------------------------------
      DEFINITIONS
    ----------------------------------------------------------- */
    var convertComponents = function (input) {
        var _a;
        return ({
            schemas: Object.fromEntries(Object.entries((_a = input.schemas) !== null && _a !== void 0 ? _a : {})
                .filter(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                return v !== undefined;
            })
                .map(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return [key, convertSchema(input)(value)];
            })),
            securitySchemes: input.securitySchemes,
        });
    };
    var convertSchema = function (components) {
        return function (input) {
            var union = [];
            var attribute = __assign({ title: input.title, description: input.description }, Object.fromEntries(Object.entries(input).filter(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return key.startsWith("x-") && value !== undefined;
            })));
            var nullable = {
                value: false,
                default: undefined,
            };
            var visit = function (schema) {
                var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
                var _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
                // NULLABLE PROPERTY
                if (schema.nullable ===
                    true) {
                    nullable.value || (nullable.value = true);
                    if (schema.default === null)
                        nullable.default = null;
                }
                if (Array.isArray(schema.enum) &&
                    ((_e = schema.enum) === null || _e === void 0 ? void 0 : _e.length) &&
                    ((_f = schema.enum) === null || _f === void 0 ? void 0 : _f.some(function (e) { return e === null; })))
                    nullable.value || (nullable.value = true);
                // MIXED TYPE CASE
                if (TypeChecker.isMixed(schema)) {
                    if (schema.const !== undefined)
                        visit(__assign(__assign({}, schema), {
                            type: undefined,
                            oneOf: undefined,
                            anyOf: undefined,
                            allOf: undefined,
                            $ref: undefined,
                        }));
                    if (schema.oneOf !== undefined)
                        visit(__assign(__assign({}, schema), {
                            type: undefined,
                            anyOf: undefined,
                            allOf: undefined,
                            $ref: undefined,
                        }));
                    if (schema.anyOf !== undefined)
                        visit(__assign(__assign({}, schema), {
                            type: undefined,
                            oneOf: undefined,
                            allOf: undefined,
                            $ref: undefined,
                        }));
                    if (schema.allOf !== undefined)
                        visit(__assign(__assign({}, schema), {
                            type: undefined,
                            oneOf: undefined,
                            anyOf: undefined,
                            $ref: undefined,
                        }));
                    var _loop_1 = function (type) {
                        if (type === "boolean" || type === "number" || type === "string")
                            visit(__assign(__assign(__assign({}, schema), {
                                enum: ((_g = schema.enum) === null || _g === void 0 ? void 0 : _g.length) && schema.enum.filter(function (e) { return e !== null; })
                                    ? schema.enum.filter(function (x) { return typeof x === type; })
                                    : undefined,
                            }), { type: type }));
                        else if (type === "integer")
                            visit(__assign(__assign(__assign({}, schema), {
                                enum: ((_h = schema.enum) === null || _h === void 0 ? void 0 : _h.length) && schema.enum.filter(function (e) { return e !== null; })
                                    ? schema.enum.filter(function (x) {
                                        return x !== null &&
                                            typeof x === "number" &&
                                            Number.isInteger(x);
                                    })
                                    : undefined,
                            }), { type: type }));
                        else
                            visit(__assign(__assign({}, schema), { type: type }));
                    };
                    try {
                        for (var _r = __values(schema.type), _s = _r.next(); !_s.done; _s = _r.next()) {
                            var type = _s.value;
                            _loop_1(type);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_s && !_s.done && (_a = _r.return)) _a.call(_r);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                // UNION TYPE CASE
                else if (TypeChecker.isOneOf(schema))
                    schema.oneOf.forEach(visit);
                else if (TypeChecker.isAnyOf(schema))
                    schema.anyOf.forEach(visit);
                else if (TypeChecker.isAllOf(schema))
                    if (schema.allOf.length === 1)
                        visit(schema.allOf[0]);
                    else
                        union.push(convertAllOfSchema(components)(schema));
                // ATOMIC TYPE CASE (CONSIDER ENUM VALUES)
                else if (TypeChecker.isBoolean(schema))
                    if (((_j = schema.enum) === null || _j === void 0 ? void 0 : _j.length) &&
                        schema.enum.filter(function (e) { return e !== null; }).length)
                        try {
                            for (var _t = __values(schema.enum.filter(function (e) { return e !== null; })), _u = _t.next(); !_u.done; _u = _t.next()) {
                                var value = _u.value;
                                union.push(__assign({ const: value }, __assign(__assign({}, schema), { type: undefined, enum: undefined, default: undefined })));
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_u && !_u.done && (_b = _t.return)) _b.call(_t);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    else
                        union.push(__assign(__assign(__assign({}, schema), { default: (_k = schema.default) !== null && _k !== void 0 ? _k : undefined }), {
                            enum: undefined,
                        }));
                else if (TypeChecker.isInteger(schema) || TypeChecker.isNumber(schema))
                    if (((_l = schema.enum) === null || _l === void 0 ? void 0 : _l.length) && schema.enum.filter(function (e) { return e !== null; }))
                        try {
                            for (var _v = __values(schema.enum.filter(function (e) { return e !== null; })), _w = _v.next(); !_w.done; _w = _v.next()) {
                                var value = _w.value;
                                union.push(__assign({ const: value }, __assign(__assign({}, schema), { type: undefined, enum: undefined, default: undefined, minimum: undefined, maximum: undefined, exclusiveMinimum: undefined, exclusiveMaximum: undefined, multipleOf: undefined })));
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_w && !_w.done && (_c = _v.return)) _c.call(_v);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    else
                        union.push(__assign(__assign(__assign(__assign(__assign({}, schema), { default: (_m = schema.default) !== null && _m !== void 0 ? _m : undefined }), {
                            enum: undefined,
                        }), (typeof schema.exclusiveMinimum === "number"
                            ? {
                                minimum: schema.exclusiveMinimum,
                                exclusiveMinimum: true,
                            }
                            : {
                                exclusiveMinimum: schema.exclusiveMinimum,
                            })), (typeof schema.exclusiveMaximum === "number"
                            ? {
                                maximum: schema.exclusiveMaximum,
                                exclusiveMaximum: true,
                            }
                            : {
                                exclusiveMaximum: schema.exclusiveMaximum,
                            })));
                else if (TypeChecker.isString(schema))
                    if (((_o = schema.enum) === null || _o === void 0 ? void 0 : _o.length) &&
                        schema.enum.filter(function (e) { return e !== null; }).length)
                        try {
                            for (var _x = __values(schema.enum.filter(function (e) { return e !== null; })), _y = _x.next(); !_y.done; _y = _x.next()) {
                                var value = _y.value;
                                union.push(__assign({ const: value }, __assign(__assign({}, schema), { type: undefined, enum: undefined, default: undefined })));
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_y && !_y.done && (_d = _x.return)) _d.call(_x);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                    else
                        union.push(__assign(__assign(__assign({}, schema), { default: (_p = schema.default) !== null && _p !== void 0 ? _p : undefined }), {
                            enum: undefined,
                        }));
                // ARRAY TYPE CASE (CONSIDER TUPLE)
                else if (TypeChecker.isArray(schema)) {
                    if (Array.isArray(schema.items))
                        union.push(__assign(__assign({}, schema), {
                            items: undefined,
                            prefixItems: schema.items.map(convertSchema(components)),
                            additionalItems: typeof schema.additionalItems === "object" &&
                                schema.additionalItems !== null
                                ? convertSchema(components)(schema.additionalItems)
                                : schema.additionalItems,
                        }));
                    else if (Array.isArray(schema.prefixItems))
                        union.push(__assign(__assign({}, schema), {
                            items: undefined,
                            prefixItems: schema.prefixItems.map(convertSchema(components)),
                            additionalItems: typeof schema.additionalItems === "object" &&
                                schema.additionalItems !== null
                                ? convertSchema(components)(schema.additionalItems)
                                : schema.additionalItems,
                        }));
                    else if (schema.items === undefined)
                        union.push(__assign(__assign({}, schema), {
                            items: undefined,
                            prefixItems: [],
                        }));
                    else
                        union.push(__assign(__assign({}, schema), {
                            items: convertSchema(components)(schema.items),
                            prefixItems: undefined,
                            additionalItems: undefined,
                        }));
                }
                // OBJECT TYPE CASE
                else if (TypeChecker.isObject(schema))
                    union.push(__assign(__assign({}, schema), {
                        properties: schema.properties
                            ? Object.fromEntries(Object.entries(schema.properties)
                                .filter(function (_a) {
                                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                                return v !== undefined;
                            })
                                .map(function (_a) {
                                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                                return [key, convertSchema(components)(value)];
                            }))
                            : {},
                        additionalProperties: schema.additionalProperties
                            ? typeof schema.additionalProperties === "object" &&
                                schema.additionalProperties !== null
                                ? convertSchema(components)(schema.additionalProperties)
                                : schema.additionalProperties
                            : undefined,
                        required: (_q = schema.required) !== null && _q !== void 0 ? _q : [],
                    }));
                else if (TypeChecker.isRecursiveReference(schema))
                    union.push(__assign(__assign({}, schema), {
                        $ref: schema.$recursiveRef,
                        $recursiveRef: undefined,
                    }));
                // THE OTHERS
                else
                    union.push(schema);
            };
            visit(input);
            if (nullable.value === true &&
                !union.some(function (e) { return e.type === "null"; }))
                union.push({
                    type: "null",
                    default: nullable.default,
                });
            return __assign(__assign(__assign({}, (union.length === 0
                ? { type: undefined }
                : union.length === 1
                    ? __assign({}, union[0]) : { oneOf: union.map(function (u) { return (__assign(__assign({}, u), { nullable: undefined })); }) })), attribute), { nullable: undefined });
        };
    };
    var convertAllOfSchema = function (components) {
        return function (input) {
            var objects = input.allOf.map(function (schema) { return retrieveObject(components)(schema); });
            if (objects.some(function (obj) { return obj === null; }))
                return __assign({ type: undefined }, {
                    allOf: undefined,
                });
            return __assign(__assign(__assign({}, input), { type: "object", properties: Object.fromEntries(objects
                    .map(function (o) { var _a; return Object.entries((_a = o === null || o === void 0 ? void 0 : o.properties) !== null && _a !== void 0 ? _a : {}); })
                    .flat()
                    .map(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return [key, convertSchema(components)(value)];
                })) }), {
                allOf: undefined,
                required: __spreadArray([], __read(new Set(objects.map(function (o) { var _a; return (_a = o === null || o === void 0 ? void 0 : o.required) !== null && _a !== void 0 ? _a : []; }).flat())), false),
            });
        };
    };
    var retrieveObject = function (components) {
        return function (input, visited) {
            var _a, _b, _c, _d, _e, _f;
            if (visited === void 0) { visited = new Set(); }
            if (TypeChecker.isObject(input))
                return input.properties !== undefined && !input.additionalProperties
                    ? input
                    : null;
            else if (visited.has(input))
                return null;
            else
                visited.add(input);
            if (TypeChecker.isReference(input))
                return retrieveObject(components)((_c = (_a = components.schemas) === null || _a === void 0 ? void 0 : _a[(_b = input.$ref.split("/").pop()) !== null && _b !== void 0 ? _b : ""]) !== null && _c !== void 0 ? _c : {}, visited);
            else if (TypeChecker.isRecursiveReference(input))
                return retrieveObject(components)((_f = (_d = components.schemas) === null || _d === void 0 ? void 0 : _d[(_e = input.$recursiveRef.split("/").pop()) !== null && _e !== void 0 ? _e : ""]) !== null && _f !== void 0 ? _f : {}, visited);
            return null;
        };
    };
    var TypeChecker;
    (function (TypeChecker) {
        TypeChecker.isConstant = function (schema) {
            return schema.const !== undefined;
        };
        TypeChecker.isBoolean = function (schema) {
            return schema.type === "boolean";
        };
        TypeChecker.isInteger = function (schema) {
            return schema.type === "integer";
        };
        TypeChecker.isNumber = function (schema) {
            return schema.type === "number";
        };
        TypeChecker.isString = function (schema) {
            return schema.type === "string";
        };
        TypeChecker.isArray = function (schema) {
            return schema.type === "array";
        };
        TypeChecker.isObject = function (schema) {
            return schema.type === "object";
        };
        TypeChecker.isReference = function (schema) {
            return schema.$ref !== undefined;
        };
        TypeChecker.isRecursiveReference = function (schema) {
            return schema.$recursiveRef !==
                undefined;
        };
        TypeChecker.isAllOf = function (schema) {
            return schema.allOf !== undefined;
        };
        TypeChecker.isAnyOf = function (schema) {
            return schema.anyOf !== undefined;
        };
        TypeChecker.isOneOf = function (schema) {
            return schema.oneOf !== undefined;
        };
        TypeChecker.isNullOnly = function (schema) {
            return schema.type === "null";
        };
        TypeChecker.isMixed = function (schema) {
            return Array.isArray(schema.type);
        };
    })(TypeChecker || (TypeChecker = {}));
})(OpenApiV3_1Emender || (exports.OpenApiV3_1Emender = OpenApiV3_1Emender = {}));
