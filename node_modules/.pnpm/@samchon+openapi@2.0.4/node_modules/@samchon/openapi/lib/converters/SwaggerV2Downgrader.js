"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerV2Downgrader = void 0;
var OpenApiTypeChecker_1 = require("../utils/OpenApiTypeChecker");
var SwaggerV2Downgrader;
(function (SwaggerV2Downgrader) {
    SwaggerV2Downgrader.downgrade = function (input) {
        var _a, _b, _c;
        var collection = SwaggerV2Downgrader.downgradeComponents(input.components);
        return {
            swagger: "2.0",
            info: input.info,
            host: ((_b = (_a = input.servers) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.url)
                ? input.servers[0].url.split("://").pop()
                : "",
            definitions: collection.downgraded,
            securityDefinitions: ((_c = input.components) === null || _c === void 0 ? void 0 : _c.securitySchemes)
                ? Object.fromEntries(Object.entries(input.components.securitySchemes)
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return v !== undefined;
                })
                    .map(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return downgradeSecurityScheme(value).map(function (v) { return [key, v]; });
                })
                    .flat())
                : undefined,
            paths: input.paths
                ? Object.fromEntries(Object.entries(input.paths)
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return v !== undefined;
                })
                    .map(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return [key, downgradePathItem(collection)(value)];
                }))
                : undefined,
            security: input.security,
            tags: input.tags,
        };
    };
    /* -----------------------------------------------------------
      OPERATORS
    ----------------------------------------------------------- */
    var downgradePathItem = function (collection) {
        return function (pathItem) { return (__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, pathItem), (pathItem.get
            ? { get: downgradeOperation(collection)(pathItem.get) }
            : undefined)), (pathItem.put
            ? { put: downgradeOperation(collection)(pathItem.put) }
            : undefined)), (pathItem.post
            ? { post: downgradeOperation(collection)(pathItem.post) }
            : undefined)), (pathItem.delete
            ? { delete: downgradeOperation(collection)(pathItem.delete) }
            : undefined)), (pathItem.options
            ? { options: downgradeOperation(collection)(pathItem.options) }
            : undefined)), (pathItem.head
            ? { head: downgradeOperation(collection)(pathItem.head) }
            : undefined)), (pathItem.patch
            ? { patch: downgradeOperation(collection)(pathItem.patch) }
            : undefined)), (pathItem.trace
            ? { trace: downgradeOperation(collection)(pathItem.trace) }
            : undefined))); };
    };
    var downgradeOperation = function (collection) {
        return function (input) {
            var _a;
            return (__assign(__assign(__assign({}, input), { parameters: input.parameters !== undefined || input.requestBody !== undefined
                    ? __spreadArray(__spreadArray([], __read(((_a = input.parameters) !== null && _a !== void 0 ? _a : []).map(downgradeParameter(collection))), false), __read((input.requestBody
                        ? [downgradeRequestBody(collection)(input.requestBody)]
                        : [])), false) : undefined, responses: input.responses
                    ? Object.fromEntries(Object.entries(input.responses)
                        .filter(function (_a) {
                        var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                        return v !== undefined;
                    })
                        .map(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        return [
                            key,
                            downgradeResponse(collection)(value),
                        ];
                    }))
                    : undefined }), {
                requestBody: undefined,
                servers: undefined,
            }));
        };
    };
    var downgradeParameter = function (collection) {
        return function (input, i) {
            var _a, _b;
            return (__assign(__assign(__assign(__assign({}, SwaggerV2Downgrader.downgradeSchema(collection)(input.schema)), input), { required: (_a = input.schema) === null || _a === void 0 ? void 0 : _a.required, schema: undefined, name: (_b = input.name) !== null && _b !== void 0 ? _b : "p".concat(i) }), {
                example: undefined,
                examples: undefined,
            }));
        };
    };
    var downgradeRequestBody = function (collection) {
        return function (input) {
            var _a, _b, _c;
            return ({
                name: "body",
                in: "body",
                description: input.description,
                required: input.required,
                schema: SwaggerV2Downgrader.downgradeSchema(collection)((_c = (_b = Object.values((_a = input.content) !== null && _a !== void 0 ? _a : {})[0]) === null || _b === void 0 ? void 0 : _b.schema) !== null && _c !== void 0 ? _c : {}),
            });
        };
    };
    var downgradeResponse = function (collection) {
        return function (input) {
            var _a, _b, _c;
            return ({
                description: input.description,
                schema: SwaggerV2Downgrader.downgradeSchema(collection)((_c = (_b = Object.values((_a = input.content) !== null && _a !== void 0 ? _a : {})[0]) === null || _b === void 0 ? void 0 : _b.schema) !== null && _c !== void 0 ? _c : {}),
                headers: input.headers
                    ? Object.fromEntries(Object.entries(input.headers)
                        .filter(function (_a) {
                        var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                        return v !== undefined;
                    })
                        .map(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        return [
                            key,
                            __assign(__assign(__assign({}, value), { schema: SwaggerV2Downgrader.downgradeSchema(collection)(value.schema) }), {
                                example: undefined,
                                examples: undefined,
                            }),
                        ];
                    }))
                    : undefined,
            });
        };
    };
    /* -----------------------------------------------------------
      DEFINITIONS
    ----------------------------------------------------------- */
    SwaggerV2Downgrader.downgradeComponents = function (input) {
        var e_1, _a;
        var collection = {
            original: input,
            downgraded: {},
        };
        if (input.schemas) {
            collection.downgraded.schemas = {};
            try {
                for (var _b = __values(Object.entries(input.schemas)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                    if (value !== undefined)
                        collection.downgraded[key.split("/").pop()] =
                            SwaggerV2Downgrader.downgradeSchema(collection)(value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return collection;
    };
    SwaggerV2Downgrader.downgradeSchema = function (collection) {
        return function (input) {
            var e_2, _a;
            var nullable = isNullable(new Set())(collection.original)(input);
            var union = [];
            var attribute = __assign({ title: input.title, description: input.description, example: input.example, examples: input.examples ? Object.values(input.examples) : undefined }, Object.fromEntries(Object.entries(input).filter(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return key.startsWith("x-") && value !== undefined;
            })));
            var visit = function (schema) {
                if (OpenApiTypeChecker_1.OpenApiTypeChecker.isBoolean(schema))
                    union.push({ type: "boolean" });
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isBoolean(schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isInteger(schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isNumber(schema) ||
                    OpenApiTypeChecker_1.OpenApiTypeChecker.isString(schema))
                    union.push(__assign(__assign({}, schema), { examples: schema.examples
                            ? Object.values(schema.examples)
                            : undefined }));
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(schema))
                    union.push({ $ref: "#/definitions/".concat(schema.$ref.split("/").pop()) });
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isArray(schema))
                    union.push(__assign(__assign({}, schema), { items: SwaggerV2Downgrader.downgradeSchema(collection)(schema.items), examples: schema.examples
                            ? Object.values(schema.examples)
                            : undefined }));
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isTuple(schema))
                    union.push(__assign(__assign(__assign(__assign({}, schema), { items: (function () {
                            if (schema.additionalItems === true)
                                return {};
                            var elements = __spreadArray(__spreadArray([], __read(schema.prefixItems), false), __read((typeof schema.additionalItems === "object"
                                ? [SwaggerV2Downgrader.downgradeSchema(collection)(schema.additionalItems)]
                                : [])), false);
                            if (elements.length === 0)
                                return {};
                            return {
                                "x-oneOf": elements.map(SwaggerV2Downgrader.downgradeSchema(collection)),
                            };
                        })(), minItems: schema.prefixItems.length, maxItems: !!schema.additionalItems === true
                            ? undefined
                            : schema.prefixItems.length }), {
                        prefixItems: undefined,
                        additionalItems: undefined,
                    }), { examples: schema.examples
                            ? Object.values(schema.examples)
                            : undefined }));
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isObject(schema))
                    union.push(__assign(__assign({}, schema), { properties: schema.properties
                            ? Object.fromEntries(Object.entries(schema.properties)
                                .filter(function (_a) {
                                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                                return v !== undefined;
                            })
                                .map(function (_a) {
                                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                                return [
                                    key,
                                    SwaggerV2Downgrader.downgradeSchema(collection)(value),
                                ];
                            }))
                            : undefined, additionalProperties: typeof schema.additionalProperties === "object"
                            ? SwaggerV2Downgrader.downgradeSchema(collection)(schema.additionalProperties)
                            : schema.additionalProperties, required: schema.required, examples: schema.examples
                            ? Object.values(schema.examples)
                            : undefined }));
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(schema))
                    schema.oneOf.forEach(visit);
            };
            var visitConstant = function (schema) {
                var insert = function (value) {
                    var _a;
                    var matched = union.find(function (u) {
                        return u.type === value;
                    });
                    if (matched !== undefined) {
                        (_a = matched.enum) !== null && _a !== void 0 ? _a : (matched.enum = []);
                        matched.enum.push(value);
                    }
                    else
                        union.push({ type: typeof value, enum: [value] });
                    if (OpenApiTypeChecker_1.OpenApiTypeChecker.isConstant(schema))
                        insert(schema.const);
                    else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(schema))
                        schema.oneOf.forEach(insert);
                };
            };
            visit(input);
            visitConstant(input);
            if (nullable) {
                try {
                    for (var union_1 = __values(union), union_1_1 = union_1.next(); !union_1_1.done; union_1_1 = union_1.next()) {
                        var u = union_1_1.value;
                        if (OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(u))
                            downgradeNullableReference(new Set())(collection)(u);
                        else
                            u["x-nullable"] = true;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (union_1_1 && !union_1_1.done && (_a = union_1.return)) _a.call(union_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (nullable === true && union.length === 0)
                return __assign({ type: "null" }, attribute);
            return __assign(__assign(__assign({}, (union.length === 0
                ? { type: undefined }
                : union.length === 1
                    ? __assign({}, union[0]) : { "x-oneOf": union })), attribute), (union.length > 1 ? { discriminator: undefined } : {}));
        };
    };
    var downgradeNullableReference = function (visited) {
        return function (collection) {
            return function (schema) {
                var _a;
                var key = schema.$ref.split("/").pop();
                if (key.endsWith(".Nullable"))
                    return;
                var found = (_a = collection.original.schemas) === null || _a === void 0 ? void 0 : _a[key];
                if (found === undefined)
                    return;
                else if (isNullable(visited)(collection.original)(found) === true)
                    return;
                else if (collection.downgraded["".concat(key, ".Nullable")] === undefined) {
                    collection.downgraded["".concat(key, ".Nullable")] = {};
                    collection.downgraded["".concat(key, ".Nullable")] = SwaggerV2Downgrader.downgradeSchema(collection)(OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(found)
                        ? __assign(__assign({}, found), { oneOf: __spreadArray(__spreadArray([], __read(found.oneOf), false), [{ type: "null" }], false) }) : __assign(__assign({ title: found.title, description: found.description, example: found.example, examples: found.examples
                            ? Object.values(found.examples)
                            : undefined }, Object.fromEntries(Object.entries(found).filter(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        return key.startsWith("x-") && value !== undefined;
                    }))), { oneOf: [found, { type: "null" }] }));
                }
                schema.$ref += ".Nullable";
            };
        };
    };
    var downgradeSecurityScheme = function (input) {
        if (input.type === "apiKey")
            return [input];
        else if (input.type === "http")
            if (input.scheme === "basic")
                return [{ type: "basic", description: input.description }];
            else
                return [];
        else if (input.type === "oauth2") {
            var output = [];
            if (input.flows.implicit)
                output.push({
                    type: "oauth2",
                    flow: "implicit",
                    authorizationUrl: input.flows.implicit.authorizationUrl,
                    scopes: input.flows.implicit.scopes,
                });
            if (input.flows.password)
                output.push({
                    type: "oauth2",
                    flow: "password",
                    tokenUrl: input.flows.password.tokenUrl,
                    scopes: input.flows.password.scopes,
                });
            if (input.flows.clientCredentials)
                output.push({
                    type: "oauth2",
                    flow: "application",
                    tokenUrl: input.flows.clientCredentials.tokenUrl,
                    scopes: input.flows.clientCredentials.scopes,
                });
            if (input.flows.authorizationCode)
                output.push({
                    type: "oauth2",
                    flow: "accessCode",
                    authorizationUrl: input.flows.authorizationCode.authorizationUrl,
                    tokenUrl: input.flows.authorizationCode.tokenUrl,
                    scopes: input.flows.authorizationCode.scopes,
                });
            return output;
        }
        return [];
    };
    var isNullable = function (visited) {
        return function (components) {
            return function (schema) {
                var _a;
                if (OpenApiTypeChecker_1.OpenApiTypeChecker.isNull(schema))
                    return true;
                else if (OpenApiTypeChecker_1.OpenApiTypeChecker.isReference(schema)) {
                    if (visited.has(schema.$ref))
                        return false;
                    visited.add(schema.$ref);
                    var key = schema.$ref.split("/").pop();
                    var next = (_a = components.schemas) === null || _a === void 0 ? void 0 : _a[key];
                    return next ? isNullable(visited)(components)(next) : false;
                }
                return (OpenApiTypeChecker_1.OpenApiTypeChecker.isOneOf(schema) &&
                    schema.oneOf.some(isNullable(visited)(components)));
            };
        };
    };
})(SwaggerV2Downgrader || (exports.SwaggerV2Downgrader = SwaggerV2Downgrader = {}));
