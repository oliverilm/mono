"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerV2Upgrader = void 0;
var OpenApiTypeChecker_1 = require("../utils/OpenApiTypeChecker");
var SwaggerV2Upgrader;
(function (SwaggerV2Upgrader) {
    SwaggerV2Upgrader.convert = function (input) { return ({
        openapi: "3.1.0",
        info: input.info,
        components: convertComponents(input),
        paths: input.paths
            ? Object.fromEntries(Object.entries(input.paths)
                .filter(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                return v !== undefined;
            })
                .map(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return [key, convertPathItem(input)(value)];
            }))
            : undefined,
        servers: input.host
            ? [
                {
                    url: input.host,
                },
            ]
            : undefined,
        security: input.security,
        tags: input.tags,
        "x-samchon-emended": true,
    }); };
    /* -----------------------------------------------------------
      OPERATORS
    ----------------------------------------------------------- */
    var convertPathItem = function (doc) {
        return function (pathItem) { return (__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, pathItem), (pathItem.get
            ? { get: convertOperation(doc)(pathItem)(pathItem.get) }
            : undefined)), (pathItem.put
            ? { put: convertOperation(doc)(pathItem)(pathItem.put) }
            : undefined)), (pathItem.post
            ? { post: convertOperation(doc)(pathItem)(pathItem.post) }
            : undefined)), (pathItem.delete
            ? { delete: convertOperation(doc)(pathItem)(pathItem.delete) }
            : undefined)), (pathItem.options
            ? { options: convertOperation(doc)(pathItem)(pathItem.options) }
            : undefined)), (pathItem.head
            ? { head: convertOperation(doc)(pathItem)(pathItem.head) }
            : undefined)), (pathItem.patch
            ? { patch: convertOperation(doc)(pathItem)(pathItem.patch) }
            : undefined)), (pathItem.trace
            ? { trace: convertOperation(doc)(pathItem)(pathItem.trace) }
            : undefined))); };
    };
    var convertOperation = function (doc) {
        return function (pathItem) {
            return function (input) {
                var _a, _b, _c;
                return (__assign(__assign({}, input), { parameters: pathItem.parameters !== undefined || input.parameters !== undefined
                        ? __spreadArray(__spreadArray([], __read(((_a = pathItem.parameters) !== null && _a !== void 0 ? _a : [])), false), __read(((_b = input.parameters) !== null && _b !== void 0 ? _b : [])), false).map(function (p) {
                            var _a, _b;
                            return TypeChecker.isReference(p)
                                ? (_a = doc.parameters) === null || _a === void 0 ? void 0 : _a[(_b = p.$ref.split("/").pop()) !== null && _b !== void 0 ? _b : ""]
                                : p;
                        })
                            .filter(function (p) {
                            return p !== undefined &&
                                p.in !== "body" &&
                                p.schema ===
                                    undefined;
                        }).map(convertParameter((_c = doc.definitions) !== null && _c !== void 0 ? _c : {}))
                        : undefined, requestBody: (function () {
                        var _a, _b;
                        var found = (_a = input.parameters) === null || _a === void 0 ? void 0 : _a.find(function (p) {
                            var _a, _b;
                            if (TypeChecker.isReference(p))
                                p = (_a = doc.parameters) === null || _a === void 0 ? void 0 : _a[(_b = p.$ref.split("/").pop()) !== null && _b !== void 0 ? _b : ""];
                            return ((p === null || p === void 0 ? void 0 : p.schema) !== undefined);
                        });
                        return found
                            ? convertRequestBody((_b = doc.definitions) !== null && _b !== void 0 ? _b : {})(found)
                            : undefined;
                    })(), responses: input.responses
                        ? Object.fromEntries(Object.entries(input.responses)
                            .filter(function (_a) {
                            var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                            return v !== undefined;
                        })
                            .map(function (_a) {
                            var _b = __read(_a, 2), key = _b[0], value = _b[1];
                            return [key, convertResponse(doc)(value)];
                        })
                            .filter(function (_a) {
                            var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                            return v !== undefined;
                        }))
                        : undefined }));
            };
        };
    };
    var convertParameter = function (definitions) {
        return function (input) { return ({
            name: input.name,
            in: input.in,
            description: input.description,
            schema: SwaggerV2Upgrader.convertSchema(definitions)(input),
            required: true,
        }); };
    };
    var convertRequestBody = function (definitions) {
        return function (input) { return ({
            description: input.description,
            content: {
                "application/json": {
                    schema: SwaggerV2Upgrader.convertSchema(definitions)(input.schema),
                },
            },
        }); };
    };
    var convertResponse = function (doc) {
        return function (input) {
            var _a, _b, _c;
            if (TypeChecker.isReference(input)) {
                var found = (_a = doc.responses) === null || _a === void 0 ? void 0 : _a[(_b = input.$ref.split("/").pop()) !== null && _b !== void 0 ? _b : ""];
                if (found === undefined)
                    return undefined;
                input = found;
            }
            return {
                description: input.description,
                content: input.schema
                    ? {
                        "application/json": {
                            schema: SwaggerV2Upgrader.convertSchema((_c = doc.definitions) !== null && _c !== void 0 ? _c : {})(input.schema),
                            example: input.example,
                        },
                    }
                    : undefined,
                headers: input.headers
                    ? Object.fromEntries(Object.entries(input.headers)
                        .filter(function (_a) {
                        var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                        return v !== undefined;
                    })
                        .map(function (_a) {
                        var _b;
                        var _c = __read(_a, 2), key = _c[0], value = _c[1];
                        return [
                            key,
                            {
                                schema: SwaggerV2Upgrader.convertSchema((_b = doc.definitions) !== null && _b !== void 0 ? _b : {})(value),
                                in: "header",
                            },
                        ];
                    }))
                    : undefined,
            };
        };
    };
    /* -----------------------------------------------------------
      DEFINITIONS
    ----------------------------------------------------------- */
    var convertComponents = function (input) {
        var _a;
        return ({
            schemas: Object.fromEntries(Object.entries((_a = input.definitions) !== null && _a !== void 0 ? _a : {})
                .filter(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                return v !== undefined;
            })
                .map(function (_a) {
                var _b;
                var _c = __read(_a, 2), key = _c[0], value = _c[1];
                return [
                    key,
                    SwaggerV2Upgrader.convertSchema((_b = input.definitions) !== null && _b !== void 0 ? _b : {})(value),
                ];
            })),
            securitySchemes: input.securityDefinitions
                ? Object.fromEntries(Object.entries(input.securityDefinitions)
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return v !== undefined;
                })
                    .map(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return [key, convertSecurityScheme(value)];
                })
                    .filter(function (_a) {
                    var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                    return v !== undefined;
                }))
                : undefined,
        });
    };
    var convertSecurityScheme = function (input) {
        if (input.type === "apiKey")
            return input;
        else if (input.type === "basic")
            return {
                type: "http",
                scheme: "basic",
                description: input.description,
            };
        else if (input.type === "oauth2")
            if (input.flow === "implicit")
                return {
                    type: "oauth2",
                    description: input.description,
                    flows: {
                        implicit: {
                            authorizationUrl: input.authorizationUrl,
                            scopes: input.scopes,
                        },
                    },
                };
            else if (input.flow === "accessCode")
                return {
                    type: "oauth2",
                    description: input.description,
                    flows: {
                        authorizationCode: {
                            authorizationUrl: input.authorizationUrl,
                            tokenUrl: input.tokenUrl,
                            scopes: input.scopes,
                        },
                    },
                };
            else if (input.flow === "password")
                return {
                    type: "oauth2",
                    description: input.description,
                    flows: {
                        password: {
                            tokenUrl: input.tokenUrl,
                            scopes: input.scopes,
                        },
                    },
                };
            else if (input.flow === "application")
                return {
                    type: "oauth2",
                    description: input.description,
                    flows: {
                        clientCredentials: {
                            tokenUrl: input.tokenUrl,
                            scopes: input.scopes,
                        },
                    },
                };
            else
                return undefined;
        return undefined;
    };
    SwaggerV2Upgrader.convertSchema = function (definitions) {
        return function (input) {
            var e_1, _a;
            var nullable = {
                value: false,
                default: undefined,
            };
            var union = [];
            var attribute = __assign(__assign({ title: input.title, description: input.description }, Object.fromEntries(Object.entries(input).filter(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                return key.startsWith("x-") && value !== undefined;
            }))), { example: input.example, examples: input.examples
                    ? Object.fromEntries(input.examples.map(function (v, i) { return [i.toString(), v]; }))
                    : undefined });
            var visit = function (schema) {
                var _a, _b, _c, _d, _e;
                // NULLABLE PROPERTY
                if (schema["x-nullable"] === true) {
                    nullable.value || (nullable.value = true);
                    if (schema.default === null)
                        nullable.default = null;
                }
                if (Array.isArray(schema.enum) &&
                    ((_a = schema.enum) === null || _a === void 0 ? void 0 : _a.length) &&
                    ((_b = schema.enum) === null || _b === void 0 ? void 0 : _b.some(function (e) { return e === null; })))
                    nullable.value || (nullable.value = true);
                // UNION TYPE CASE
                if (TypeChecker.isAnyOf(schema))
                    schema["x-anyOf"].forEach(visit);
                else if (TypeChecker.isOneOf(schema))
                    schema["x-oneOf"].forEach(visit);
                else if (TypeChecker.isAllOf(schema))
                    if (schema.allOf.length === 1)
                        visit(schema.allOf[0]);
                    else
                        union.push(convertAllOfSchema(definitions)(schema));
                // ATOMIC TYPE CASE (CONSIDER ENUM VALUES)
                else if (TypeChecker.isBoolean(schema) ||
                    TypeChecker.isInteger(schema) ||
                    TypeChecker.isNumber(schema) ||
                    TypeChecker.isString(schema))
                    if (((_c = schema.enum) === null || _c === void 0 ? void 0 : _c.length) &&
                        schema.enum.filter(function (e) { return e !== null; }).length)
                        union.push.apply(union, __spreadArray([], __read(schema.enum
                            .filter(function (v) { return v !== null; })
                            .map(function (value) { return ({ const: value }); })), false));
                    else
                        union.push(__assign(__assign(__assign({}, schema), { default: ((_d = schema.default) !== null && _d !== void 0 ? _d : undefined), examples: schema.examples
                                ? Object.fromEntries(schema.examples.map(function (v, i) { return [i.toString(), v]; }))
                                : undefined }), { enum: undefined }));
                // INSTANCE TYPE CASE
                else if (TypeChecker.isArray(schema))
                    union.push(__assign(__assign({}, schema), { items: SwaggerV2Upgrader.convertSchema(definitions)(schema.items), examples: schema.examples
                            ? Object.fromEntries(schema.examples.map(function (v, i) { return [i.toString(), v]; }))
                            : undefined }));
                else if (TypeChecker.isObject(schema))
                    union.push(__assign(__assign(__assign({}, schema), {
                        properties: schema.properties
                            ? Object.fromEntries(Object.entries(schema.properties)
                                .filter(function (_a) {
                                var _b = __read(_a, 2), _ = _b[0], v = _b[1];
                                return v !== undefined;
                            })
                                .map(function (_a) {
                                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                                return [
                                    key,
                                    SwaggerV2Upgrader.convertSchema(definitions)(value),
                                ];
                            }))
                            : {},
                        additionalProperties: schema.additionalProperties
                            ? typeof schema.additionalProperties === "object" &&
                                schema.additionalProperties !== null
                                ? SwaggerV2Upgrader.convertSchema(definitions)(schema.additionalProperties)
                                : schema.additionalProperties
                            : undefined,
                    }), { examples: schema.examples
                            ? Object.fromEntries(schema.examples.map(function (v, i) { return [i.toString(), v]; }))
                            : undefined, required: (_e = schema.required) !== null && _e !== void 0 ? _e : [] }));
                else if (TypeChecker.isReference(schema))
                    union.push(__assign(__assign({}, schema), { $ref: schema.$ref.replace("#/definitions/", "#/components/schemas/"), examples: schema.examples
                            ? Object.fromEntries(schema.examples.map(function (v, i) { return [i.toString(), v]; }))
                            : undefined }));
                else
                    union.push(__assign(__assign({}, schema), { examples: schema.examples
                            ? Object.fromEntries(schema.examples.map(function (v, i) { return [i.toString(), v]; }))
                            : undefined }));
            };
            visit(input);
            if (nullable.value === true &&
                !union.some(function (e) { return e.type === "null"; }))
                union.push({
                    type: "null",
                    default: nullable.default,
                });
            if (union.length === 2 &&
                union.filter(function (x) { return OpenApiTypeChecker_1.OpenApiTypeChecker.isNull(x); }).length === 1) {
                var type = union.filter(function (x) { return OpenApiTypeChecker_1.OpenApiTypeChecker.isNull(x) === false; })[0];
                try {
                    for (var _b = __values([
                        "title",
                        "description",
                        "deprecated",
                        "example",
                        "examples",
                    ]), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        if (type[key] !== undefined)
                            delete type[key];
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return __assign(__assign(__assign({}, (union.length === 0
                ? { type: undefined }
                : union.length === 1
                    ? __assign({}, union[0]) : { oneOf: union.map(function (u) { return (__assign(__assign({}, u), { "x-nullable": undefined })); }) })), attribute), { "x-nullable": undefined });
        };
    };
    var convertAllOfSchema = function (definitions) {
        return function (input) {
            var objects = input.allOf.map(function (schema) { return retrieveObject(definitions)(schema); });
            if (objects.some(function (obj) { return obj === null; }))
                return __assign({ type: undefined }, {
                    allOf: undefined,
                });
            return __assign(__assign(__assign({}, input), { type: "object", properties: Object.fromEntries(objects
                    .map(function (o) { var _a; return Object.entries((_a = o === null || o === void 0 ? void 0 : o.properties) !== null && _a !== void 0 ? _a : {}); })
                    .flat()
                    .map(function (_a) {
                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                    return [key, SwaggerV2Upgrader.convertSchema(definitions)(value)];
                })) }), {
                allOf: undefined,
                required: __spreadArray([], __read(new Set(objects.map(function (o) { var _a; return (_a = o === null || o === void 0 ? void 0 : o.required) !== null && _a !== void 0 ? _a : []; }).flat())), false),
            });
        };
    };
    var retrieveObject = function (definitions) {
        return function (input, visited) {
            var _a, _b;
            if (visited === void 0) { visited = new Set(); }
            if (TypeChecker.isObject(input))
                return input.properties !== undefined && !input.additionalProperties
                    ? input
                    : null;
            else if (visited.has(input))
                return null;
            else
                visited.add(input);
            if (TypeChecker.isReference(input))
                return retrieveObject(definitions)((_b = definitions === null || definitions === void 0 ? void 0 : definitions[(_a = input.$ref.split("/").pop()) !== null && _a !== void 0 ? _a : ""]) !== null && _b !== void 0 ? _b : {}, visited);
            return null;
        };
    };
    var TypeChecker;
    (function (TypeChecker) {
        TypeChecker.isBoolean = function (schema) {
            return schema.type === "boolean";
        };
        TypeChecker.isInteger = function (schema) {
            return schema.type === "integer";
        };
        TypeChecker.isNumber = function (schema) {
            return schema.type === "number";
        };
        TypeChecker.isString = function (schema) {
            return schema.type === "string";
        };
        TypeChecker.isArray = function (schema) {
            return schema.type === "array";
        };
        TypeChecker.isObject = function (schema) {
            return schema.type === "object";
        };
        TypeChecker.isReference = function (schema) {
            return schema.$ref !== undefined;
        };
        TypeChecker.isAllOf = function (schema) {
            return schema.allOf !== undefined;
        };
        TypeChecker.isOneOf = function (schema) {
            return schema["x-oneOf"] !== undefined;
        };
        TypeChecker.isAnyOf = function (schema) {
            return schema["x-anyOf"] !== undefined;
        };
        TypeChecker.isNullOnly = function (schema) {
            return schema.type === "null";
        };
    })(TypeChecker || (TypeChecker = {}));
})(SwaggerV2Upgrader || (exports.SwaggerV2Upgrader = SwaggerV2Upgrader = {}));
