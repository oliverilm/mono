
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.0.1
 * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
 */
Prisma.prismaVersion = {
  client: "6.0.1",
  engine: "5dbef10bdbfb579e07d35cc85fb1518d357cb99e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CampScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  connectedCompetitionId: 'connectedCompetitionId'
};

exports.Prisma.ClubScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClubAdminScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.ClubMetadataScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  clubName: 'clubName',
  isAccepted: 'isAccepted',
  profileId: 'profileId',
  invitedById: 'invitedById'
};

exports.Prisma.CompetitionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  isPublished: 'isPublished',
  isArchived: 'isArchived',
  clubId: 'clubId',
  clubName: 'clubName',
  description: 'description',
  location: 'location',
  additionalInfo: 'additionalInfo',
  registrationEndAt: 'registrationEndAt',
  startingAt: 'startingAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitionAdminScalarFieldEnum = {
  id: 'id',
  competitionId: 'competitionId',
  userId: 'userId',
  role: 'role'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.CompetitionCategoryScalarFieldEnum = {
  id: 'id',
  weights: 'weights',
  largestYearAllowed: 'largestYearAllowed',
  smallestYearAllowed: 'smallestYearAllowed',
  sex: 'sex',
  competitionId: 'competitionId',
  competitionName: 'competitionName',
  competitionSlug: 'competitionSlug',
  categoryId: 'categoryId',
  categoryName: 'categoryName'
};

exports.Prisma.CompetitorScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  clubName: 'clubName',
  profileId: 'profileId',
  firstName: 'firstName',
  lastName: 'lastName',
  competitionCategoryId: 'competitionCategoryId',
  competitionId: 'competitionId',
  competitionName: 'competitionName',
  competitionSlug: 'competitionSlug',
  weight: 'weight',
  seed: 'seed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitionLinkScalarFieldEnum = {
  id: 'id',
  url: 'url',
  label: 'label',
  competitionId: 'competitionId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  nationalId: 'nationalId',
  nationalIdType: 'nationalIdType',
  dateOfBirth: 'dateOfBirth',
  sex: 'sex',
  userId: 'userId',
  clubId: 'clubId',
  belt: 'belt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ClubRole = exports.$Enums.ClubRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN'
};

exports.CompetitionRole = exports.$Enums.CompetitionRole = {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER'
};

exports.CompetitionCategorySex = exports.$Enums.CompetitionCategorySex = {
  Male: 'Male',
  Female: 'Female',
  Unisex: 'Unisex'
};

exports.Sex = exports.$Enums.Sex = {
  Male: 'Male',
  Female: 'Female'
};

exports.Belt = exports.$Enums.Belt = {
  KYU_6: 'KYU_6',
  KYU_5: 'KYU_5',
  KYU_4: 'KYU_4',
  KYU_3: 'KYU_3',
  KYU_2: 'KYU_2',
  KYU_1: 'KYU_1',
  DAN_1: 'DAN_1',
  DAN_2: 'DAN_2',
  DAN_3: 'DAN_3',
  DAN_4: 'DAN_4',
  DAN_5: 'DAN_5'
};

exports.Prisma.ModelName = {
  Camp: 'Camp',
  Club: 'Club',
  ClubAdmin: 'ClubAdmin',
  ClubMetadata: 'ClubMetadata',
  Invitation: 'Invitation',
  Competition: 'Competition',
  CompetitionAdmin: 'CompetitionAdmin',
  Category: 'Category',
  CompetitionCategory: 'CompetitionCategory',
  Competitor: 'Competitor',
  CompetitionLink: 'CompetitionLink',
  Session: 'Session',
  User: 'User',
  UserProfile: 'UserProfile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
