model Camp {
  id   String @id @default(cuid())
  name String
  slug String @unique

  connectedCompetition   Competition? @relation(fields: [connectedCompetitionId], references: [id])
  connectedCompetitionId String?      @unique
}

model Club {
  id String @id @default(cuid())

  name String @unique
  slug String // derived from the name

  description String
  country     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubMetadata ClubMetadata?
  clubAdmins   ClubAdmin[]
  userProfiles UserProfile[]
}

enum ClubRole {
  OWNER
  ADMIN
}

model ClubAdmin {
  id Int @id @default(autoincrement())

  club   Club   @relation(fields: [clubId], references: [id])
  clubId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  role ClubRole
}

model ClubMetadata {
  id String @id @default(cuid())

  club   Club   @relation(fields: [clubId], references: [id])
  clubId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Competition {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique // calculated from name

  isPublished Boolean @default(false)
  isArchived  Boolean @default(false)

  clubName       String
  description    String?
  location       String?
  additionalInfo Json?

  registrationEndAt DateTime? @db.Date
  startingAt        DateTime? @db.Date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  camp              Camp?
  categories        CompetitionCategory[]
  competitionAdmins CompetitionAdmin[]
  competitionLinks  CompetitionLink[]

  @@unique([id, name, slug])
  @@index([isPublished, isArchived, slug])
  @@index(clubName)
  @@index(name)
  @@index(slug)
}

enum CompetitionRole {
  OWNER
  MANAGER
}

model CompetitionAdmin {
  id Int @id @default(autoincrement())

  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role CompetitionRole

  @@unique([competitionId, userId])
  @@index([competitionId, userId])
}

model Category {
  id Int @id @default(autoincrement())

  value String @unique

  competitionCategories CompetitionCategory[]

  @@unique([id, value])
}

enum CompetitionCategorySex {
  Male
  Female
  Unisex
}

model CompetitionCategory {
  id Int @id @default(autoincrement())

  weights             String[]
  largestYearAllowed  Int
  smallestYearAllowed Int
  sex                 CompetitionCategorySex

  competition     Competition? @relation(fields: [competitionId, competitionName, competitionSlug], references: [id, name, slug])
  competitionId   String
  competitionName String
  competitionSlug String

  category     Category @relation(fields: [categoryId, categoryName], references: [id, value])
  categoryId   Int
  categoryName String

  competitors Competitor[]

  @@unique([id, competitionId, competitionName, competitionSlug])
  @@index(competitionId)
  @@index(categoryId)
}

model Competitor {
  id Int @id @default(autoincrement())

  clubName String

  profile   UserProfile @relation(fields: [profileId, firstName, lastName], references: [id, firstName, lastName])
  profileId String
  firstName String
  lastName  String

  competitionCategory   CompetitionCategory @relation(fields: [competitionCategoryId, competitionId, competitionName, competitionSlug], references: [id, competitionId, competitionName, competitionSlug])
  competitionCategoryId Int
  competitionId         String
  competitionName       String
  competitionSlug       String

  weight String
  seed   Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([profileId, competitionCategoryId, weight])
  // todo: monitor this object requests and possibli make index changes here
  @@index(competitionId)
  @@index(weight)
  @@index(profileId)
  @@index(clubName)
}

model CompetitionLink {
  id Int @id @default(autoincrement())

  url   String
  label String

  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String

  @@index([competitionId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Belt {
  KYU_6
  KYU_5
  KYU_4
  KYU_3
  KYU_2
  KYU_1
  DAN_1
  DAN_2
  DAN_3
  DAN_4
  DAN_5
}

model Session {
  id Int @id @default(autoincrement())

  token String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model User {
  id String @id @default(cuid())

  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  competitionAdmins CompetitionAdmin[]
  clubAdmin         ClubAdmin?
  userProfile       UserProfile?
  sessions          Session[]
}

enum Sex {
  Male
  Female
}

model UserProfile {
  id String @id @default(cuid())

  firstName String?
  lastName  String?

  nationalId     String? @unique
  nationalIdType String? // TODO: make this enum ????

  dateOfBirth DateTime? @db.Date
  sex         Sex       @default(Male)

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  club   Club?   @relation(fields: [clubId], references: [id])
  clubId String?

  belt Belt?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participations Competitor[]

  @@unique([id, firstName, lastName])
}
