
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Camp
 * 
 */
export type Camp = $Result.DefaultSelection<Prisma.$CampPayload>
/**
 * Model Club
 * 
 */
export type Club = $Result.DefaultSelection<Prisma.$ClubPayload>
/**
 * Model ClubMetadata
 * 
 */
export type ClubMetadata = $Result.DefaultSelection<Prisma.$ClubMetadataPayload>
/**
 * Model Competition
 * 
 */
export type Competition = $Result.DefaultSelection<Prisma.$CompetitionPayload>
/**
 * Model CompetitionAdmin
 * 
 */
export type CompetitionAdmin = $Result.DefaultSelection<Prisma.$CompetitionAdminPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model CompetitionCategory
 * 
 */
export type CompetitionCategory = $Result.DefaultSelection<Prisma.$CompetitionCategoryPayload>
/**
 * Model Competitor
 * 
 */
export type Competitor = $Result.DefaultSelection<Prisma.$CompetitorPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CompetitionRole: {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER'
};

export type CompetitionRole = (typeof CompetitionRole)[keyof typeof CompetitionRole]


export const CompetitionCategorySex: {
  Male: 'Male',
  Female: 'Female',
  Unisex: 'Unisex'
};

export type CompetitionCategorySex = (typeof CompetitionCategorySex)[keyof typeof CompetitionCategorySex]


export const Belt: {
  KYU_6: 'KYU_6',
  KYU_5: 'KYU_5',
  KYU_4: 'KYU_4',
  KYU_3: 'KYU_3',
  KYU_2: 'KYU_2',
  KYU_1: 'KYU_1',
  DAN_1: 'DAN_1',
  DAN_2: 'DAN_2',
  DAN_3: 'DAN_3',
  DAN_4: 'DAN_4',
  DAN_5: 'DAN_5'
};

export type Belt = (typeof Belt)[keyof typeof Belt]


export const Sex: {
  Male: 'Male',
  Female: 'Female'
};

export type Sex = (typeof Sex)[keyof typeof Sex]

}

export type CompetitionRole = $Enums.CompetitionRole

export const CompetitionRole: typeof $Enums.CompetitionRole

export type CompetitionCategorySex = $Enums.CompetitionCategorySex

export const CompetitionCategorySex: typeof $Enums.CompetitionCategorySex

export type Belt = $Enums.Belt

export const Belt: typeof $Enums.Belt

export type Sex = $Enums.Sex

export const Sex: typeof $Enums.Sex

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Camps
 * const camps = await prisma.camp.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Camps
   * const camps = await prisma.camp.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.camp`: Exposes CRUD operations for the **Camp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Camps
    * const camps = await prisma.camp.findMany()
    * ```
    */
  get camp(): Prisma.CampDelegate<ExtArgs>;

  /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clubs
    * const clubs = await prisma.club.findMany()
    * ```
    */
  get club(): Prisma.ClubDelegate<ExtArgs>;

  /**
   * `prisma.clubMetadata`: Exposes CRUD operations for the **ClubMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClubMetadata
    * const clubMetadata = await prisma.clubMetadata.findMany()
    * ```
    */
  get clubMetadata(): Prisma.ClubMetadataDelegate<ExtArgs>;

  /**
   * `prisma.competition`: Exposes CRUD operations for the **Competition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competitions
    * const competitions = await prisma.competition.findMany()
    * ```
    */
  get competition(): Prisma.CompetitionDelegate<ExtArgs>;

  /**
   * `prisma.competitionAdmin`: Exposes CRUD operations for the **CompetitionAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompetitionAdmins
    * const competitionAdmins = await prisma.competitionAdmin.findMany()
    * ```
    */
  get competitionAdmin(): Prisma.CompetitionAdminDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.competitionCategory`: Exposes CRUD operations for the **CompetitionCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompetitionCategories
    * const competitionCategories = await prisma.competitionCategory.findMany()
    * ```
    */
  get competitionCategory(): Prisma.CompetitionCategoryDelegate<ExtArgs>;

  /**
   * `prisma.competitor`: Exposes CRUD operations for the **Competitor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competitors
    * const competitors = await prisma.competitor.findMany()
    * ```
    */
  get competitor(): Prisma.CompetitorDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Camp: 'Camp',
    Club: 'Club',
    ClubMetadata: 'ClubMetadata',
    Competition: 'Competition',
    CompetitionAdmin: 'CompetitionAdmin',
    Category: 'Category',
    CompetitionCategory: 'CompetitionCategory',
    Competitor: 'Competitor',
    Session: 'Session',
    User: 'User',
    UserProfile: 'UserProfile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "camp" | "club" | "clubMetadata" | "competition" | "competitionAdmin" | "category" | "competitionCategory" | "competitor" | "session" | "user" | "userProfile"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Camp: {
        payload: Prisma.$CampPayload<ExtArgs>
        fields: Prisma.CampFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>
          }
          findFirst: {
            args: Prisma.CampFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>
          }
          findMany: {
            args: Prisma.CampFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>[]
          }
          create: {
            args: Prisma.CampCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>
          }
          createMany: {
            args: Prisma.CampCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>[]
          }
          delete: {
            args: Prisma.CampDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>
          }
          update: {
            args: Prisma.CampUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>
          }
          deleteMany: {
            args: Prisma.CampDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CampUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampPayload>
          }
          aggregate: {
            args: Prisma.CampAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCamp>
          }
          groupBy: {
            args: Prisma.CampGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampCountArgs<ExtArgs>
            result: $Utils.Optional<CampCountAggregateOutputType> | number
          }
        }
      }
      Club: {
        payload: Prisma.$ClubPayload<ExtArgs>
        fields: Prisma.ClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findFirst: {
            args: Prisma.ClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findMany: {
            args: Prisma.ClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          create: {
            args: Prisma.ClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          createMany: {
            args: Prisma.ClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          delete: {
            args: Prisma.ClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          update: {
            args: Prisma.ClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          deleteMany: {
            args: Prisma.ClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          aggregate: {
            args: Prisma.ClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClub>
          }
          groupBy: {
            args: Prisma.ClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubCountArgs<ExtArgs>
            result: $Utils.Optional<ClubCountAggregateOutputType> | number
          }
        }
      }
      ClubMetadata: {
        payload: Prisma.$ClubMetadataPayload<ExtArgs>
        fields: Prisma.ClubMetadataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubMetadataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubMetadataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>
          }
          findFirst: {
            args: Prisma.ClubMetadataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubMetadataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>
          }
          findMany: {
            args: Prisma.ClubMetadataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>[]
          }
          create: {
            args: Prisma.ClubMetadataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>
          }
          createMany: {
            args: Prisma.ClubMetadataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClubMetadataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>[]
          }
          delete: {
            args: Prisma.ClubMetadataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>
          }
          update: {
            args: Prisma.ClubMetadataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>
          }
          deleteMany: {
            args: Prisma.ClubMetadataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubMetadataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClubMetadataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubMetadataPayload>
          }
          aggregate: {
            args: Prisma.ClubMetadataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClubMetadata>
          }
          groupBy: {
            args: Prisma.ClubMetadataGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubMetadataGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubMetadataCountArgs<ExtArgs>
            result: $Utils.Optional<ClubMetadataCountAggregateOutputType> | number
          }
        }
      }
      Competition: {
        payload: Prisma.$CompetitionPayload<ExtArgs>
        fields: Prisma.CompetitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetitionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetitionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          findFirst: {
            args: Prisma.CompetitionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetitionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          findMany: {
            args: Prisma.CompetitionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>[]
          }
          create: {
            args: Prisma.CompetitionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          createMany: {
            args: Prisma.CompetitionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetitionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>[]
          }
          delete: {
            args: Prisma.CompetitionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          update: {
            args: Prisma.CompetitionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          deleteMany: {
            args: Prisma.CompetitionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetitionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetitionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionPayload>
          }
          aggregate: {
            args: Prisma.CompetitionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetition>
          }
          groupBy: {
            args: Prisma.CompetitionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetitionCountArgs<ExtArgs>
            result: $Utils.Optional<CompetitionCountAggregateOutputType> | number
          }
        }
      }
      CompetitionAdmin: {
        payload: Prisma.$CompetitionAdminPayload<ExtArgs>
        fields: Prisma.CompetitionAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetitionAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetitionAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>
          }
          findFirst: {
            args: Prisma.CompetitionAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetitionAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>
          }
          findMany: {
            args: Prisma.CompetitionAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>[]
          }
          create: {
            args: Prisma.CompetitionAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>
          }
          createMany: {
            args: Prisma.CompetitionAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetitionAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>[]
          }
          delete: {
            args: Prisma.CompetitionAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>
          }
          update: {
            args: Prisma.CompetitionAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>
          }
          deleteMany: {
            args: Prisma.CompetitionAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetitionAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetitionAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionAdminPayload>
          }
          aggregate: {
            args: Prisma.CompetitionAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetitionAdmin>
          }
          groupBy: {
            args: Prisma.CompetitionAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetitionAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetitionAdminCountArgs<ExtArgs>
            result: $Utils.Optional<CompetitionAdminCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      CompetitionCategory: {
        payload: Prisma.$CompetitionCategoryPayload<ExtArgs>
        fields: Prisma.CompetitionCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetitionCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetitionCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>
          }
          findFirst: {
            args: Prisma.CompetitionCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetitionCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>
          }
          findMany: {
            args: Prisma.CompetitionCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>[]
          }
          create: {
            args: Prisma.CompetitionCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>
          }
          createMany: {
            args: Prisma.CompetitionCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetitionCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>[]
          }
          delete: {
            args: Prisma.CompetitionCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>
          }
          update: {
            args: Prisma.CompetitionCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>
          }
          deleteMany: {
            args: Prisma.CompetitionCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetitionCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetitionCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitionCategoryPayload>
          }
          aggregate: {
            args: Prisma.CompetitionCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetitionCategory>
          }
          groupBy: {
            args: Prisma.CompetitionCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetitionCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetitionCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CompetitionCategoryCountAggregateOutputType> | number
          }
        }
      }
      Competitor: {
        payload: Prisma.$CompetitorPayload<ExtArgs>
        fields: Prisma.CompetitorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetitorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetitorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>
          }
          findFirst: {
            args: Prisma.CompetitorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetitorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>
          }
          findMany: {
            args: Prisma.CompetitorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>[]
          }
          create: {
            args: Prisma.CompetitorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>
          }
          createMany: {
            args: Prisma.CompetitorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetitorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>[]
          }
          delete: {
            args: Prisma.CompetitorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>
          }
          update: {
            args: Prisma.CompetitorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>
          }
          deleteMany: {
            args: Prisma.CompetitorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetitorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetitorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetitorPayload>
          }
          aggregate: {
            args: Prisma.CompetitorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetitor>
          }
          groupBy: {
            args: Prisma.CompetitorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetitorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetitorCountArgs<ExtArgs>
            result: $Utils.Optional<CompetitorCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClubCountOutputType
   */

  export type ClubCountOutputType = {
    userProfiles: number
  }

  export type ClubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userProfiles?: boolean | ClubCountOutputTypeCountUserProfilesArgs
  }

  // Custom InputTypes
  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubCountOutputType
     */
    select?: ClubCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountUserProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
  }


  /**
   * Count Type CompetitionCountOutputType
   */

  export type CompetitionCountOutputType = {
    categories: number
    competitionAdmins: number
  }

  export type CompetitionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | CompetitionCountOutputTypeCountCategoriesArgs
    competitionAdmins?: boolean | CompetitionCountOutputTypeCountCompetitionAdminsArgs
  }

  // Custom InputTypes
  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCountOutputType
     */
    select?: CompetitionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionCategoryWhereInput
  }

  /**
   * CompetitionCountOutputType without action
   */
  export type CompetitionCountOutputTypeCountCompetitionAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionAdminWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    competitionCategories: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competitionCategories?: boolean | CategoryCountOutputTypeCountCompetitionCategoriesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountCompetitionCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionCategoryWhereInput
  }


  /**
   * Count Type CompetitionCategoryCountOutputType
   */

  export type CompetitionCategoryCountOutputType = {
    competitors: number
  }

  export type CompetitionCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competitors?: boolean | CompetitionCategoryCountOutputTypeCountCompetitorsArgs
  }

  // Custom InputTypes
  /**
   * CompetitionCategoryCountOutputType without action
   */
  export type CompetitionCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategoryCountOutputType
     */
    select?: CompetitionCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompetitionCategoryCountOutputType without action
   */
  export type CompetitionCategoryCountOutputTypeCountCompetitorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitorWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    competitionAdmins: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competitionAdmins?: boolean | UserCountOutputTypeCountCompetitionAdminsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompetitionAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionAdminWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type UserProfileCountOutputType
   */

  export type UserProfileCountOutputType = {
    participations: number
  }

  export type UserProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participations?: boolean | UserProfileCountOutputTypeCountParticipationsArgs
  }

  // Custom InputTypes
  /**
   * UserProfileCountOutputType without action
   */
  export type UserProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfileCountOutputType
     */
    select?: UserProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserProfileCountOutputType without action
   */
  export type UserProfileCountOutputTypeCountParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Camp
   */

  export type AggregateCamp = {
    _count: CampCountAggregateOutputType | null
    _min: CampMinAggregateOutputType | null
    _max: CampMaxAggregateOutputType | null
  }

  export type CampMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    connectedCompetitionId: string | null
  }

  export type CampMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    connectedCompetitionId: string | null
  }

  export type CampCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    connectedCompetitionId: number
    _all: number
  }


  export type CampMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    connectedCompetitionId?: true
  }

  export type CampMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    connectedCompetitionId?: true
  }

  export type CampCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    connectedCompetitionId?: true
    _all?: true
  }

  export type CampAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Camp to aggregate.
     */
    where?: CampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Camps to fetch.
     */
    orderBy?: CampOrderByWithRelationInput | CampOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Camps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Camps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Camps
    **/
    _count?: true | CampCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampMaxAggregateInputType
  }

  export type GetCampAggregateType<T extends CampAggregateArgs> = {
        [P in keyof T & keyof AggregateCamp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCamp[P]>
      : GetScalarType<T[P], AggregateCamp[P]>
  }




  export type CampGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampWhereInput
    orderBy?: CampOrderByWithAggregationInput | CampOrderByWithAggregationInput[]
    by: CampScalarFieldEnum[] | CampScalarFieldEnum
    having?: CampScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampCountAggregateInputType | true
    _min?: CampMinAggregateInputType
    _max?: CampMaxAggregateInputType
  }

  export type CampGroupByOutputType = {
    id: string
    name: string
    slug: string
    connectedCompetitionId: string | null
    _count: CampCountAggregateOutputType | null
    _min: CampMinAggregateOutputType | null
    _max: CampMaxAggregateOutputType | null
  }

  type GetCampGroupByPayload<T extends CampGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampGroupByOutputType[P]>
            : GetScalarType<T[P], CampGroupByOutputType[P]>
        }
      >
    >


  export type CampSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    connectedCompetitionId?: boolean
    connectedCompetition?: boolean | Camp$connectedCompetitionArgs<ExtArgs>
  }, ExtArgs["result"]["camp"]>

  export type CampSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    connectedCompetitionId?: boolean
    connectedCompetition?: boolean | Camp$connectedCompetitionArgs<ExtArgs>
  }, ExtArgs["result"]["camp"]>

  export type CampSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    connectedCompetitionId?: boolean
  }

  export type CampInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connectedCompetition?: boolean | Camp$connectedCompetitionArgs<ExtArgs>
  }
  export type CampIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connectedCompetition?: boolean | Camp$connectedCompetitionArgs<ExtArgs>
  }

  export type $CampPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Camp"
    objects: {
      connectedCompetition: Prisma.$CompetitionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      connectedCompetitionId: string | null
    }, ExtArgs["result"]["camp"]>
    composites: {}
  }

  type CampGetPayload<S extends boolean | null | undefined | CampDefaultArgs> = $Result.GetResult<Prisma.$CampPayload, S>

  type CampCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CampFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CampCountAggregateInputType | true
    }

  export interface CampDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Camp'], meta: { name: 'Camp' } }
    /**
     * Find zero or one Camp that matches the filter.
     * @param {CampFindUniqueArgs} args - Arguments to find a Camp
     * @example
     * // Get one Camp
     * const camp = await prisma.camp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampFindUniqueArgs>(args: SelectSubset<T, CampFindUniqueArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Camp that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CampFindUniqueOrThrowArgs} args - Arguments to find a Camp
     * @example
     * // Get one Camp
     * const camp = await prisma.camp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampFindUniqueOrThrowArgs>(args: SelectSubset<T, CampFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Camp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampFindFirstArgs} args - Arguments to find a Camp
     * @example
     * // Get one Camp
     * const camp = await prisma.camp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampFindFirstArgs>(args?: SelectSubset<T, CampFindFirstArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Camp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampFindFirstOrThrowArgs} args - Arguments to find a Camp
     * @example
     * // Get one Camp
     * const camp = await prisma.camp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampFindFirstOrThrowArgs>(args?: SelectSubset<T, CampFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Camps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Camps
     * const camps = await prisma.camp.findMany()
     * 
     * // Get first 10 Camps
     * const camps = await prisma.camp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campWithIdOnly = await prisma.camp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampFindManyArgs>(args?: SelectSubset<T, CampFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Camp.
     * @param {CampCreateArgs} args - Arguments to create a Camp.
     * @example
     * // Create one Camp
     * const Camp = await prisma.camp.create({
     *   data: {
     *     // ... data to create a Camp
     *   }
     * })
     * 
     */
    create<T extends CampCreateArgs>(args: SelectSubset<T, CampCreateArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Camps.
     * @param {CampCreateManyArgs} args - Arguments to create many Camps.
     * @example
     * // Create many Camps
     * const camp = await prisma.camp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampCreateManyArgs>(args?: SelectSubset<T, CampCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Camps and returns the data saved in the database.
     * @param {CampCreateManyAndReturnArgs} args - Arguments to create many Camps.
     * @example
     * // Create many Camps
     * const camp = await prisma.camp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Camps and only return the `id`
     * const campWithIdOnly = await prisma.camp.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampCreateManyAndReturnArgs>(args?: SelectSubset<T, CampCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Camp.
     * @param {CampDeleteArgs} args - Arguments to delete one Camp.
     * @example
     * // Delete one Camp
     * const Camp = await prisma.camp.delete({
     *   where: {
     *     // ... filter to delete one Camp
     *   }
     * })
     * 
     */
    delete<T extends CampDeleteArgs>(args: SelectSubset<T, CampDeleteArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Camp.
     * @param {CampUpdateArgs} args - Arguments to update one Camp.
     * @example
     * // Update one Camp
     * const camp = await prisma.camp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampUpdateArgs>(args: SelectSubset<T, CampUpdateArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Camps.
     * @param {CampDeleteManyArgs} args - Arguments to filter Camps to delete.
     * @example
     * // Delete a few Camps
     * const { count } = await prisma.camp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampDeleteManyArgs>(args?: SelectSubset<T, CampDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Camps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Camps
     * const camp = await prisma.camp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampUpdateManyArgs>(args: SelectSubset<T, CampUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Camp.
     * @param {CampUpsertArgs} args - Arguments to update or create a Camp.
     * @example
     * // Update or create a Camp
     * const camp = await prisma.camp.upsert({
     *   create: {
     *     // ... data to create a Camp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Camp we want to update
     *   }
     * })
     */
    upsert<T extends CampUpsertArgs>(args: SelectSubset<T, CampUpsertArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Camps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampCountArgs} args - Arguments to filter Camps to count.
     * @example
     * // Count the number of Camps
     * const count = await prisma.camp.count({
     *   where: {
     *     // ... the filter for the Camps we want to count
     *   }
     * })
    **/
    count<T extends CampCountArgs>(
      args?: Subset<T, CampCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Camp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampAggregateArgs>(args: Subset<T, CampAggregateArgs>): Prisma.PrismaPromise<GetCampAggregateType<T>>

    /**
     * Group by Camp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampGroupByArgs['orderBy'] }
        : { orderBy?: CampGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Camp model
   */
  readonly fields: CampFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Camp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    connectedCompetition<T extends Camp$connectedCompetitionArgs<ExtArgs> = {}>(args?: Subset<T, Camp$connectedCompetitionArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Camp model
   */ 
  interface CampFieldRefs {
    readonly id: FieldRef<"Camp", 'String'>
    readonly name: FieldRef<"Camp", 'String'>
    readonly slug: FieldRef<"Camp", 'String'>
    readonly connectedCompetitionId: FieldRef<"Camp", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Camp findUnique
   */
  export type CampFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * Filter, which Camp to fetch.
     */
    where: CampWhereUniqueInput
  }

  /**
   * Camp findUniqueOrThrow
   */
  export type CampFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * Filter, which Camp to fetch.
     */
    where: CampWhereUniqueInput
  }

  /**
   * Camp findFirst
   */
  export type CampFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * Filter, which Camp to fetch.
     */
    where?: CampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Camps to fetch.
     */
    orderBy?: CampOrderByWithRelationInput | CampOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Camps.
     */
    cursor?: CampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Camps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Camps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Camps.
     */
    distinct?: CampScalarFieldEnum | CampScalarFieldEnum[]
  }

  /**
   * Camp findFirstOrThrow
   */
  export type CampFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * Filter, which Camp to fetch.
     */
    where?: CampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Camps to fetch.
     */
    orderBy?: CampOrderByWithRelationInput | CampOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Camps.
     */
    cursor?: CampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Camps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Camps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Camps.
     */
    distinct?: CampScalarFieldEnum | CampScalarFieldEnum[]
  }

  /**
   * Camp findMany
   */
  export type CampFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * Filter, which Camps to fetch.
     */
    where?: CampWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Camps to fetch.
     */
    orderBy?: CampOrderByWithRelationInput | CampOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Camps.
     */
    cursor?: CampWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Camps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Camps.
     */
    skip?: number
    distinct?: CampScalarFieldEnum | CampScalarFieldEnum[]
  }

  /**
   * Camp create
   */
  export type CampCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * The data needed to create a Camp.
     */
    data: XOR<CampCreateInput, CampUncheckedCreateInput>
  }

  /**
   * Camp createMany
   */
  export type CampCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Camps.
     */
    data: CampCreateManyInput | CampCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Camp createManyAndReturn
   */
  export type CampCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Camps.
     */
    data: CampCreateManyInput | CampCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Camp update
   */
  export type CampUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * The data needed to update a Camp.
     */
    data: XOR<CampUpdateInput, CampUncheckedUpdateInput>
    /**
     * Choose, which Camp to update.
     */
    where: CampWhereUniqueInput
  }

  /**
   * Camp updateMany
   */
  export type CampUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Camps.
     */
    data: XOR<CampUpdateManyMutationInput, CampUncheckedUpdateManyInput>
    /**
     * Filter which Camps to update
     */
    where?: CampWhereInput
  }

  /**
   * Camp upsert
   */
  export type CampUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * The filter to search for the Camp to update in case it exists.
     */
    where: CampWhereUniqueInput
    /**
     * In case the Camp found by the `where` argument doesn't exist, create a new Camp with this data.
     */
    create: XOR<CampCreateInput, CampUncheckedCreateInput>
    /**
     * In case the Camp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampUpdateInput, CampUncheckedUpdateInput>
  }

  /**
   * Camp delete
   */
  export type CampDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    /**
     * Filter which Camp to delete.
     */
    where: CampWhereUniqueInput
  }

  /**
   * Camp deleteMany
   */
  export type CampDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Camps to delete
     */
    where?: CampWhereInput
  }

  /**
   * Camp.connectedCompetition
   */
  export type Camp$connectedCompetitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    where?: CompetitionWhereInput
  }

  /**
   * Camp without action
   */
  export type CampDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
  }


  /**
   * Model Club
   */

  export type AggregateClub = {
    _count: ClubCountAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  export type ClubMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    country: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClubMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    country?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    country?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    country?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Club to aggregate.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clubs
    **/
    _count?: true | ClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMaxAggregateInputType
  }

  export type GetClubAggregateType<T extends ClubAggregateArgs> = {
        [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClub[P]>
      : GetScalarType<T[P], AggregateClub[P]>
  }




  export type ClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithAggregationInput | ClubOrderByWithAggregationInput[]
    by: ClubScalarFieldEnum[] | ClubScalarFieldEnum
    having?: ClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubCountAggregateInputType | true
    _min?: ClubMinAggregateInputType
    _max?: ClubMaxAggregateInputType
  }

  export type ClubGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string
    country: string
    createdAt: Date
    updatedAt: Date
    _count: ClubCountAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  type GetClubGroupByPayload<T extends ClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubGroupByOutputType[P]>
            : GetScalarType<T[P], ClubGroupByOutputType[P]>
        }
      >
    >


  export type ClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clubMetadata?: boolean | Club$clubMetadataArgs<ExtArgs>
    userProfiles?: boolean | Club$userProfilesArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>

  export type ClubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["club"]>

  export type ClubSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clubMetadata?: boolean | Club$clubMetadataArgs<ExtArgs>
    userProfiles?: boolean | Club$userProfilesArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Club"
    objects: {
      clubMetadata: Prisma.$ClubMetadataPayload<ExtArgs> | null
      userProfiles: Prisma.$UserProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string
      country: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["club"]>
    composites: {}
  }

  type ClubGetPayload<S extends boolean | null | undefined | ClubDefaultArgs> = $Result.GetResult<Prisma.$ClubPayload, S>

  type ClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClubFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClubCountAggregateInputType | true
    }

  export interface ClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Club'], meta: { name: 'Club' } }
    /**
     * Find zero or one Club that matches the filter.
     * @param {ClubFindUniqueArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubFindUniqueArgs>(args: SelectSubset<T, ClubFindUniqueArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Club that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Club that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubFindFirstArgs>(args?: SelectSubset<T, ClubFindFirstArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Club that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clubs
     * const clubs = await prisma.club.findMany()
     * 
     * // Get first 10 Clubs
     * const clubs = await prisma.club.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClubFindManyArgs>(args?: SelectSubset<T, ClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Club.
     * @param {ClubCreateArgs} args - Arguments to create a Club.
     * @example
     * // Create one Club
     * const Club = await prisma.club.create({
     *   data: {
     *     // ... data to create a Club
     *   }
     * })
     * 
     */
    create<T extends ClubCreateArgs>(args: SelectSubset<T, ClubCreateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clubs.
     * @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubCreateManyArgs>(args?: SelectSubset<T, ClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clubs and returns the data saved in the database.
     * @param {ClubCreateManyAndReturnArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clubs and only return the `id`
     * const clubWithIdOnly = await prisma.club.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClubCreateManyAndReturnArgs>(args?: SelectSubset<T, ClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Club.
     * @param {ClubDeleteArgs} args - Arguments to delete one Club.
     * @example
     * // Delete one Club
     * const Club = await prisma.club.delete({
     *   where: {
     *     // ... filter to delete one Club
     *   }
     * })
     * 
     */
    delete<T extends ClubDeleteArgs>(args: SelectSubset<T, ClubDeleteArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Club.
     * @param {ClubUpdateArgs} args - Arguments to update one Club.
     * @example
     * // Update one Club
     * const club = await prisma.club.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubUpdateArgs>(args: SelectSubset<T, ClubUpdateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clubs.
     * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
     * @example
     * // Delete a few Clubs
     * const { count } = await prisma.club.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubDeleteManyArgs>(args?: SelectSubset<T, ClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubUpdateManyArgs>(args: SelectSubset<T, ClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Club.
     * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
     * @example
     * // Update or create a Club
     * const club = await prisma.club.upsert({
     *   create: {
     *     // ... data to create a Club
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Club we want to update
     *   }
     * })
     */
    upsert<T extends ClubUpsertArgs>(args: SelectSubset<T, ClubUpsertArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
     * @example
     * // Count the number of Clubs
     * const count = await prisma.club.count({
     *   where: {
     *     // ... the filter for the Clubs we want to count
     *   }
     * })
    **/
    count<T extends ClubCountArgs>(
      args?: Subset<T, ClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubAggregateArgs>(args: Subset<T, ClubAggregateArgs>): Prisma.PrismaPromise<GetClubAggregateType<T>>

    /**
     * Group by Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubGroupByArgs['orderBy'] }
        : { orderBy?: ClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Club model
   */
  readonly fields: ClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Club.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clubMetadata<T extends Club$clubMetadataArgs<ExtArgs> = {}>(args?: Subset<T, Club$clubMetadataArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    userProfiles<T extends Club$userProfilesArgs<ExtArgs> = {}>(args?: Subset<T, Club$userProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Club model
   */ 
  interface ClubFieldRefs {
    readonly id: FieldRef<"Club", 'String'>
    readonly name: FieldRef<"Club", 'String'>
    readonly slug: FieldRef<"Club", 'String'>
    readonly description: FieldRef<"Club", 'String'>
    readonly country: FieldRef<"Club", 'String'>
    readonly createdAt: FieldRef<"Club", 'DateTime'>
    readonly updatedAt: FieldRef<"Club", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Club findUnique
   */
  export type ClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findUniqueOrThrow
   */
  export type ClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findFirst
   */
  export type ClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findFirstOrThrow
   */
  export type ClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findMany
   */
  export type ClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Clubs to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club create
   */
  export type ClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to create a Club.
     */
    data: XOR<ClubCreateInput, ClubUncheckedCreateInput>
  }

  /**
   * Club createMany
   */
  export type ClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club createManyAndReturn
   */
  export type ClubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club update
   */
  export type ClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to update a Club.
     */
    data: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
    /**
     * Choose, which Club to update.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club updateMany
   */
  export type ClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
  }

  /**
   * Club upsert
   */
  export type ClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The filter to search for the Club to update in case it exists.
     */
    where: ClubWhereUniqueInput
    /**
     * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
     */
    create: XOR<ClubCreateInput, ClubUncheckedCreateInput>
    /**
     * In case the Club was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
  }

  /**
   * Club delete
   */
  export type ClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter which Club to delete.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club deleteMany
   */
  export type ClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clubs to delete
     */
    where?: ClubWhereInput
  }

  /**
   * Club.clubMetadata
   */
  export type Club$clubMetadataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    where?: ClubMetadataWhereInput
  }

  /**
   * Club.userProfiles
   */
  export type Club$userProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    cursor?: UserProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * Club without action
   */
  export type ClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
  }


  /**
   * Model ClubMetadata
   */

  export type AggregateClubMetadata = {
    _count: ClubMetadataCountAggregateOutputType | null
    _min: ClubMetadataMinAggregateOutputType | null
    _max: ClubMetadataMaxAggregateOutputType | null
  }

  export type ClubMetadataMinAggregateOutputType = {
    id: string | null
    clubId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubMetadataMaxAggregateOutputType = {
    id: string | null
    clubId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubMetadataCountAggregateOutputType = {
    id: number
    clubId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClubMetadataMinAggregateInputType = {
    id?: true
    clubId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubMetadataMaxAggregateInputType = {
    id?: true
    clubId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubMetadataCountAggregateInputType = {
    id?: true
    clubId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClubMetadataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClubMetadata to aggregate.
     */
    where?: ClubMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubMetadata to fetch.
     */
    orderBy?: ClubMetadataOrderByWithRelationInput | ClubMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClubMetadata
    **/
    _count?: true | ClubMetadataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMetadataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMetadataMaxAggregateInputType
  }

  export type GetClubMetadataAggregateType<T extends ClubMetadataAggregateArgs> = {
        [P in keyof T & keyof AggregateClubMetadata]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClubMetadata[P]>
      : GetScalarType<T[P], AggregateClubMetadata[P]>
  }




  export type ClubMetadataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubMetadataWhereInput
    orderBy?: ClubMetadataOrderByWithAggregationInput | ClubMetadataOrderByWithAggregationInput[]
    by: ClubMetadataScalarFieldEnum[] | ClubMetadataScalarFieldEnum
    having?: ClubMetadataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubMetadataCountAggregateInputType | true
    _min?: ClubMetadataMinAggregateInputType
    _max?: ClubMetadataMaxAggregateInputType
  }

  export type ClubMetadataGroupByOutputType = {
    id: string
    clubId: string
    createdAt: Date
    updatedAt: Date
    _count: ClubMetadataCountAggregateOutputType | null
    _min: ClubMetadataMinAggregateOutputType | null
    _max: ClubMetadataMaxAggregateOutputType | null
  }

  type GetClubMetadataGroupByPayload<T extends ClubMetadataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubMetadataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubMetadataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubMetadataGroupByOutputType[P]>
            : GetScalarType<T[P], ClubMetadataGroupByOutputType[P]>
        }
      >
    >


  export type ClubMetadataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clubMetadata"]>

  export type ClubMetadataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clubMetadata"]>

  export type ClubMetadataSelectScalar = {
    id?: boolean
    clubId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClubMetadataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }
  export type ClubMetadataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    club?: boolean | ClubDefaultArgs<ExtArgs>
  }

  export type $ClubMetadataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClubMetadata"
    objects: {
      club: Prisma.$ClubPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clubId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["clubMetadata"]>
    composites: {}
  }

  type ClubMetadataGetPayload<S extends boolean | null | undefined | ClubMetadataDefaultArgs> = $Result.GetResult<Prisma.$ClubMetadataPayload, S>

  type ClubMetadataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClubMetadataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClubMetadataCountAggregateInputType | true
    }

  export interface ClubMetadataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClubMetadata'], meta: { name: 'ClubMetadata' } }
    /**
     * Find zero or one ClubMetadata that matches the filter.
     * @param {ClubMetadataFindUniqueArgs} args - Arguments to find a ClubMetadata
     * @example
     * // Get one ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubMetadataFindUniqueArgs>(args: SelectSubset<T, ClubMetadataFindUniqueArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClubMetadata that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClubMetadataFindUniqueOrThrowArgs} args - Arguments to find a ClubMetadata
     * @example
     * // Get one ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubMetadataFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubMetadataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClubMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubMetadataFindFirstArgs} args - Arguments to find a ClubMetadata
     * @example
     * // Get one ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubMetadataFindFirstArgs>(args?: SelectSubset<T, ClubMetadataFindFirstArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClubMetadata that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubMetadataFindFirstOrThrowArgs} args - Arguments to find a ClubMetadata
     * @example
     * // Get one ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubMetadataFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubMetadataFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClubMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubMetadataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.findMany()
     * 
     * // Get first 10 ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubMetadataWithIdOnly = await prisma.clubMetadata.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClubMetadataFindManyArgs>(args?: SelectSubset<T, ClubMetadataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClubMetadata.
     * @param {ClubMetadataCreateArgs} args - Arguments to create a ClubMetadata.
     * @example
     * // Create one ClubMetadata
     * const ClubMetadata = await prisma.clubMetadata.create({
     *   data: {
     *     // ... data to create a ClubMetadata
     *   }
     * })
     * 
     */
    create<T extends ClubMetadataCreateArgs>(args: SelectSubset<T, ClubMetadataCreateArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClubMetadata.
     * @param {ClubMetadataCreateManyArgs} args - Arguments to create many ClubMetadata.
     * @example
     * // Create many ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubMetadataCreateManyArgs>(args?: SelectSubset<T, ClubMetadataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClubMetadata and returns the data saved in the database.
     * @param {ClubMetadataCreateManyAndReturnArgs} args - Arguments to create many ClubMetadata.
     * @example
     * // Create many ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClubMetadata and only return the `id`
     * const clubMetadataWithIdOnly = await prisma.clubMetadata.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClubMetadataCreateManyAndReturnArgs>(args?: SelectSubset<T, ClubMetadataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClubMetadata.
     * @param {ClubMetadataDeleteArgs} args - Arguments to delete one ClubMetadata.
     * @example
     * // Delete one ClubMetadata
     * const ClubMetadata = await prisma.clubMetadata.delete({
     *   where: {
     *     // ... filter to delete one ClubMetadata
     *   }
     * })
     * 
     */
    delete<T extends ClubMetadataDeleteArgs>(args: SelectSubset<T, ClubMetadataDeleteArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClubMetadata.
     * @param {ClubMetadataUpdateArgs} args - Arguments to update one ClubMetadata.
     * @example
     * // Update one ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubMetadataUpdateArgs>(args: SelectSubset<T, ClubMetadataUpdateArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClubMetadata.
     * @param {ClubMetadataDeleteManyArgs} args - Arguments to filter ClubMetadata to delete.
     * @example
     * // Delete a few ClubMetadata
     * const { count } = await prisma.clubMetadata.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubMetadataDeleteManyArgs>(args?: SelectSubset<T, ClubMetadataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClubMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubMetadataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubMetadataUpdateManyArgs>(args: SelectSubset<T, ClubMetadataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClubMetadata.
     * @param {ClubMetadataUpsertArgs} args - Arguments to update or create a ClubMetadata.
     * @example
     * // Update or create a ClubMetadata
     * const clubMetadata = await prisma.clubMetadata.upsert({
     *   create: {
     *     // ... data to create a ClubMetadata
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClubMetadata we want to update
     *   }
     * })
     */
    upsert<T extends ClubMetadataUpsertArgs>(args: SelectSubset<T, ClubMetadataUpsertArgs<ExtArgs>>): Prisma__ClubMetadataClient<$Result.GetResult<Prisma.$ClubMetadataPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClubMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubMetadataCountArgs} args - Arguments to filter ClubMetadata to count.
     * @example
     * // Count the number of ClubMetadata
     * const count = await prisma.clubMetadata.count({
     *   where: {
     *     // ... the filter for the ClubMetadata we want to count
     *   }
     * })
    **/
    count<T extends ClubMetadataCountArgs>(
      args?: Subset<T, ClubMetadataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubMetadataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClubMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubMetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubMetadataAggregateArgs>(args: Subset<T, ClubMetadataAggregateArgs>): Prisma.PrismaPromise<GetClubMetadataAggregateType<T>>

    /**
     * Group by ClubMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubMetadataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubMetadataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubMetadataGroupByArgs['orderBy'] }
        : { orderBy?: ClubMetadataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubMetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClubMetadata model
   */
  readonly fields: ClubMetadataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClubMetadata.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubMetadataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    club<T extends ClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClubDefaultArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClubMetadata model
   */ 
  interface ClubMetadataFieldRefs {
    readonly id: FieldRef<"ClubMetadata", 'String'>
    readonly clubId: FieldRef<"ClubMetadata", 'String'>
    readonly createdAt: FieldRef<"ClubMetadata", 'DateTime'>
    readonly updatedAt: FieldRef<"ClubMetadata", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClubMetadata findUnique
   */
  export type ClubMetadataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * Filter, which ClubMetadata to fetch.
     */
    where: ClubMetadataWhereUniqueInput
  }

  /**
   * ClubMetadata findUniqueOrThrow
   */
  export type ClubMetadataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * Filter, which ClubMetadata to fetch.
     */
    where: ClubMetadataWhereUniqueInput
  }

  /**
   * ClubMetadata findFirst
   */
  export type ClubMetadataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * Filter, which ClubMetadata to fetch.
     */
    where?: ClubMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubMetadata to fetch.
     */
    orderBy?: ClubMetadataOrderByWithRelationInput | ClubMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClubMetadata.
     */
    cursor?: ClubMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClubMetadata.
     */
    distinct?: ClubMetadataScalarFieldEnum | ClubMetadataScalarFieldEnum[]
  }

  /**
   * ClubMetadata findFirstOrThrow
   */
  export type ClubMetadataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * Filter, which ClubMetadata to fetch.
     */
    where?: ClubMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubMetadata to fetch.
     */
    orderBy?: ClubMetadataOrderByWithRelationInput | ClubMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClubMetadata.
     */
    cursor?: ClubMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClubMetadata.
     */
    distinct?: ClubMetadataScalarFieldEnum | ClubMetadataScalarFieldEnum[]
  }

  /**
   * ClubMetadata findMany
   */
  export type ClubMetadataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * Filter, which ClubMetadata to fetch.
     */
    where?: ClubMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClubMetadata to fetch.
     */
    orderBy?: ClubMetadataOrderByWithRelationInput | ClubMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClubMetadata.
     */
    cursor?: ClubMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClubMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClubMetadata.
     */
    skip?: number
    distinct?: ClubMetadataScalarFieldEnum | ClubMetadataScalarFieldEnum[]
  }

  /**
   * ClubMetadata create
   */
  export type ClubMetadataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * The data needed to create a ClubMetadata.
     */
    data: XOR<ClubMetadataCreateInput, ClubMetadataUncheckedCreateInput>
  }

  /**
   * ClubMetadata createMany
   */
  export type ClubMetadataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClubMetadata.
     */
    data: ClubMetadataCreateManyInput | ClubMetadataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClubMetadata createManyAndReturn
   */
  export type ClubMetadataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClubMetadata.
     */
    data: ClubMetadataCreateManyInput | ClubMetadataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClubMetadata update
   */
  export type ClubMetadataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * The data needed to update a ClubMetadata.
     */
    data: XOR<ClubMetadataUpdateInput, ClubMetadataUncheckedUpdateInput>
    /**
     * Choose, which ClubMetadata to update.
     */
    where: ClubMetadataWhereUniqueInput
  }

  /**
   * ClubMetadata updateMany
   */
  export type ClubMetadataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClubMetadata.
     */
    data: XOR<ClubMetadataUpdateManyMutationInput, ClubMetadataUncheckedUpdateManyInput>
    /**
     * Filter which ClubMetadata to update
     */
    where?: ClubMetadataWhereInput
  }

  /**
   * ClubMetadata upsert
   */
  export type ClubMetadataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * The filter to search for the ClubMetadata to update in case it exists.
     */
    where: ClubMetadataWhereUniqueInput
    /**
     * In case the ClubMetadata found by the `where` argument doesn't exist, create a new ClubMetadata with this data.
     */
    create: XOR<ClubMetadataCreateInput, ClubMetadataUncheckedCreateInput>
    /**
     * In case the ClubMetadata was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubMetadataUpdateInput, ClubMetadataUncheckedUpdateInput>
  }

  /**
   * ClubMetadata delete
   */
  export type ClubMetadataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
    /**
     * Filter which ClubMetadata to delete.
     */
    where: ClubMetadataWhereUniqueInput
  }

  /**
   * ClubMetadata deleteMany
   */
  export type ClubMetadataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClubMetadata to delete
     */
    where?: ClubMetadataWhereInput
  }

  /**
   * ClubMetadata without action
   */
  export type ClubMetadataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubMetadata
     */
    select?: ClubMetadataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubMetadataInclude<ExtArgs> | null
  }


  /**
   * Model Competition
   */

  export type AggregateCompetition = {
    _count: CompetitionCountAggregateOutputType | null
    _min: CompetitionMinAggregateOutputType | null
    _max: CompetitionMaxAggregateOutputType | null
  }

  export type CompetitionMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    clubName: string | null
    isPublished: boolean | null
    isArchived: boolean | null
    description: string | null
    startingAt: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompetitionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    clubName: string | null
    isPublished: boolean | null
    isArchived: boolean | null
    description: string | null
    startingAt: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompetitionCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    clubName: number
    isPublished: number
    isArchived: number
    description: number
    startingAt: number
    location: number
    additionalInfo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompetitionMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    clubName?: true
    isPublished?: true
    isArchived?: true
    description?: true
    startingAt?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompetitionMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    clubName?: true
    isPublished?: true
    isArchived?: true
    description?: true
    startingAt?: true
    location?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompetitionCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    clubName?: true
    isPublished?: true
    isArchived?: true
    description?: true
    startingAt?: true
    location?: true
    additionalInfo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompetitionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competition to aggregate.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competitions
    **/
    _count?: true | CompetitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetitionMaxAggregateInputType
  }

  export type GetCompetitionAggregateType<T extends CompetitionAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetition[P]>
      : GetScalarType<T[P], AggregateCompetition[P]>
  }




  export type CompetitionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionWhereInput
    orderBy?: CompetitionOrderByWithAggregationInput | CompetitionOrderByWithAggregationInput[]
    by: CompetitionScalarFieldEnum[] | CompetitionScalarFieldEnum
    having?: CompetitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetitionCountAggregateInputType | true
    _min?: CompetitionMinAggregateInputType
    _max?: CompetitionMaxAggregateInputType
  }

  export type CompetitionGroupByOutputType = {
    id: string
    name: string
    slug: string
    clubName: string
    isPublished: boolean
    isArchived: boolean
    description: string | null
    startingAt: Date | null
    location: string | null
    additionalInfo: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CompetitionCountAggregateOutputType | null
    _min: CompetitionMinAggregateOutputType | null
    _max: CompetitionMaxAggregateOutputType | null
  }

  type GetCompetitionGroupByPayload<T extends CompetitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetitionGroupByOutputType[P]>
            : GetScalarType<T[P], CompetitionGroupByOutputType[P]>
        }
      >
    >


  export type CompetitionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    clubName?: boolean
    isPublished?: boolean
    isArchived?: boolean
    description?: boolean
    startingAt?: boolean
    location?: boolean
    additionalInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categories?: boolean | Competition$categoriesArgs<ExtArgs>
    camp?: boolean | Competition$campArgs<ExtArgs>
    competitionAdmins?: boolean | Competition$competitionAdminsArgs<ExtArgs>
    _count?: boolean | CompetitionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competition"]>

  export type CompetitionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    clubName?: boolean
    isPublished?: boolean
    isArchived?: boolean
    description?: boolean
    startingAt?: boolean
    location?: boolean
    additionalInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["competition"]>

  export type CompetitionSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    clubName?: boolean
    isPublished?: boolean
    isArchived?: boolean
    description?: boolean
    startingAt?: boolean
    location?: boolean
    additionalInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompetitionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Competition$categoriesArgs<ExtArgs>
    camp?: boolean | Competition$campArgs<ExtArgs>
    competitionAdmins?: boolean | Competition$competitionAdminsArgs<ExtArgs>
    _count?: boolean | CompetitionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompetitionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompetitionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Competition"
    objects: {
      categories: Prisma.$CompetitionCategoryPayload<ExtArgs>[]
      camp: Prisma.$CampPayload<ExtArgs> | null
      competitionAdmins: Prisma.$CompetitionAdminPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      clubName: string
      isPublished: boolean
      isArchived: boolean
      description: string | null
      startingAt: Date | null
      location: string | null
      additionalInfo: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["competition"]>
    composites: {}
  }

  type CompetitionGetPayload<S extends boolean | null | undefined | CompetitionDefaultArgs> = $Result.GetResult<Prisma.$CompetitionPayload, S>

  type CompetitionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetitionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetitionCountAggregateInputType | true
    }

  export interface CompetitionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competition'], meta: { name: 'Competition' } }
    /**
     * Find zero or one Competition that matches the filter.
     * @param {CompetitionFindUniqueArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetitionFindUniqueArgs>(args: SelectSubset<T, CompetitionFindUniqueArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Competition that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetitionFindUniqueOrThrowArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetitionFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Competition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionFindFirstArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetitionFindFirstArgs>(args?: SelectSubset<T, CompetitionFindFirstArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Competition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionFindFirstOrThrowArgs} args - Arguments to find a Competition
     * @example
     * // Get one Competition
     * const competition = await prisma.competition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetitionFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetitionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Competitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competitions
     * const competitions = await prisma.competition.findMany()
     * 
     * // Get first 10 Competitions
     * const competitions = await prisma.competition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competitionWithIdOnly = await prisma.competition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompetitionFindManyArgs>(args?: SelectSubset<T, CompetitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Competition.
     * @param {CompetitionCreateArgs} args - Arguments to create a Competition.
     * @example
     * // Create one Competition
     * const Competition = await prisma.competition.create({
     *   data: {
     *     // ... data to create a Competition
     *   }
     * })
     * 
     */
    create<T extends CompetitionCreateArgs>(args: SelectSubset<T, CompetitionCreateArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Competitions.
     * @param {CompetitionCreateManyArgs} args - Arguments to create many Competitions.
     * @example
     * // Create many Competitions
     * const competition = await prisma.competition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetitionCreateManyArgs>(args?: SelectSubset<T, CompetitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Competitions and returns the data saved in the database.
     * @param {CompetitionCreateManyAndReturnArgs} args - Arguments to create many Competitions.
     * @example
     * // Create many Competitions
     * const competition = await prisma.competition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Competitions and only return the `id`
     * const competitionWithIdOnly = await prisma.competition.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetitionCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Competition.
     * @param {CompetitionDeleteArgs} args - Arguments to delete one Competition.
     * @example
     * // Delete one Competition
     * const Competition = await prisma.competition.delete({
     *   where: {
     *     // ... filter to delete one Competition
     *   }
     * })
     * 
     */
    delete<T extends CompetitionDeleteArgs>(args: SelectSubset<T, CompetitionDeleteArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Competition.
     * @param {CompetitionUpdateArgs} args - Arguments to update one Competition.
     * @example
     * // Update one Competition
     * const competition = await prisma.competition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetitionUpdateArgs>(args: SelectSubset<T, CompetitionUpdateArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Competitions.
     * @param {CompetitionDeleteManyArgs} args - Arguments to filter Competitions to delete.
     * @example
     * // Delete a few Competitions
     * const { count } = await prisma.competition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetitionDeleteManyArgs>(args?: SelectSubset<T, CompetitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competitions
     * const competition = await prisma.competition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetitionUpdateManyArgs>(args: SelectSubset<T, CompetitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competition.
     * @param {CompetitionUpsertArgs} args - Arguments to update or create a Competition.
     * @example
     * // Update or create a Competition
     * const competition = await prisma.competition.upsert({
     *   create: {
     *     // ... data to create a Competition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competition we want to update
     *   }
     * })
     */
    upsert<T extends CompetitionUpsertArgs>(args: SelectSubset<T, CompetitionUpsertArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Competitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCountArgs} args - Arguments to filter Competitions to count.
     * @example
     * // Count the number of Competitions
     * const count = await prisma.competition.count({
     *   where: {
     *     // ... the filter for the Competitions we want to count
     *   }
     * })
    **/
    count<T extends CompetitionCountArgs>(
      args?: Subset<T, CompetitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetitionAggregateArgs>(args: Subset<T, CompetitionAggregateArgs>): Prisma.PrismaPromise<GetCompetitionAggregateType<T>>

    /**
     * Group by Competition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetitionGroupByArgs['orderBy'] }
        : { orderBy?: CompetitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Competition model
   */
  readonly fields: CompetitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Competition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetitionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Competition$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Competition$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    camp<T extends Competition$campArgs<ExtArgs> = {}>(args?: Subset<T, Competition$campArgs<ExtArgs>>): Prisma__CampClient<$Result.GetResult<Prisma.$CampPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    competitionAdmins<T extends Competition$competitionAdminsArgs<ExtArgs> = {}>(args?: Subset<T, Competition$competitionAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Competition model
   */ 
  interface CompetitionFieldRefs {
    readonly id: FieldRef<"Competition", 'String'>
    readonly name: FieldRef<"Competition", 'String'>
    readonly slug: FieldRef<"Competition", 'String'>
    readonly clubName: FieldRef<"Competition", 'String'>
    readonly isPublished: FieldRef<"Competition", 'Boolean'>
    readonly isArchived: FieldRef<"Competition", 'Boolean'>
    readonly description: FieldRef<"Competition", 'String'>
    readonly startingAt: FieldRef<"Competition", 'DateTime'>
    readonly location: FieldRef<"Competition", 'String'>
    readonly additionalInfo: FieldRef<"Competition", 'Json'>
    readonly createdAt: FieldRef<"Competition", 'DateTime'>
    readonly updatedAt: FieldRef<"Competition", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Competition findUnique
   */
  export type CompetitionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition findUniqueOrThrow
   */
  export type CompetitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition findFirst
   */
  export type CompetitionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competitions.
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competitions.
     */
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Competition findFirstOrThrow
   */
  export type CompetitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competition to fetch.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competitions.
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competitions.
     */
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Competition findMany
   */
  export type CompetitionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter, which Competitions to fetch.
     */
    where?: CompetitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitions to fetch.
     */
    orderBy?: CompetitionOrderByWithRelationInput | CompetitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competitions.
     */
    cursor?: CompetitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitions.
     */
    skip?: number
    distinct?: CompetitionScalarFieldEnum | CompetitionScalarFieldEnum[]
  }

  /**
   * Competition create
   */
  export type CompetitionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * The data needed to create a Competition.
     */
    data: XOR<CompetitionCreateInput, CompetitionUncheckedCreateInput>
  }

  /**
   * Competition createMany
   */
  export type CompetitionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Competitions.
     */
    data: CompetitionCreateManyInput | CompetitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Competition createManyAndReturn
   */
  export type CompetitionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Competitions.
     */
    data: CompetitionCreateManyInput | CompetitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Competition update
   */
  export type CompetitionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * The data needed to update a Competition.
     */
    data: XOR<CompetitionUpdateInput, CompetitionUncheckedUpdateInput>
    /**
     * Choose, which Competition to update.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition updateMany
   */
  export type CompetitionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Competitions.
     */
    data: XOR<CompetitionUpdateManyMutationInput, CompetitionUncheckedUpdateManyInput>
    /**
     * Filter which Competitions to update
     */
    where?: CompetitionWhereInput
  }

  /**
   * Competition upsert
   */
  export type CompetitionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * The filter to search for the Competition to update in case it exists.
     */
    where: CompetitionWhereUniqueInput
    /**
     * In case the Competition found by the `where` argument doesn't exist, create a new Competition with this data.
     */
    create: XOR<CompetitionCreateInput, CompetitionUncheckedCreateInput>
    /**
     * In case the Competition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetitionUpdateInput, CompetitionUncheckedUpdateInput>
  }

  /**
   * Competition delete
   */
  export type CompetitionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    /**
     * Filter which Competition to delete.
     */
    where: CompetitionWhereUniqueInput
  }

  /**
   * Competition deleteMany
   */
  export type CompetitionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competitions to delete
     */
    where?: CompetitionWhereInput
  }

  /**
   * Competition.categories
   */
  export type Competition$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    where?: CompetitionCategoryWhereInput
    orderBy?: CompetitionCategoryOrderByWithRelationInput | CompetitionCategoryOrderByWithRelationInput[]
    cursor?: CompetitionCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionCategoryScalarFieldEnum | CompetitionCategoryScalarFieldEnum[]
  }

  /**
   * Competition.camp
   */
  export type Competition$campArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Camp
     */
    select?: CampSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampInclude<ExtArgs> | null
    where?: CampWhereInput
  }

  /**
   * Competition.competitionAdmins
   */
  export type Competition$competitionAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    where?: CompetitionAdminWhereInput
    orderBy?: CompetitionAdminOrderByWithRelationInput | CompetitionAdminOrderByWithRelationInput[]
    cursor?: CompetitionAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionAdminScalarFieldEnum | CompetitionAdminScalarFieldEnum[]
  }

  /**
   * Competition without action
   */
  export type CompetitionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
  }


  /**
   * Model CompetitionAdmin
   */

  export type AggregateCompetitionAdmin = {
    _count: CompetitionAdminCountAggregateOutputType | null
    _avg: CompetitionAdminAvgAggregateOutputType | null
    _sum: CompetitionAdminSumAggregateOutputType | null
    _min: CompetitionAdminMinAggregateOutputType | null
    _max: CompetitionAdminMaxAggregateOutputType | null
  }

  export type CompetitionAdminAvgAggregateOutputType = {
    id: number | null
  }

  export type CompetitionAdminSumAggregateOutputType = {
    id: number | null
  }

  export type CompetitionAdminMinAggregateOutputType = {
    id: number | null
    competitionId: string | null
    userId: string | null
    role: $Enums.CompetitionRole | null
  }

  export type CompetitionAdminMaxAggregateOutputType = {
    id: number | null
    competitionId: string | null
    userId: string | null
    role: $Enums.CompetitionRole | null
  }

  export type CompetitionAdminCountAggregateOutputType = {
    id: number
    competitionId: number
    userId: number
    role: number
    _all: number
  }


  export type CompetitionAdminAvgAggregateInputType = {
    id?: true
  }

  export type CompetitionAdminSumAggregateInputType = {
    id?: true
  }

  export type CompetitionAdminMinAggregateInputType = {
    id?: true
    competitionId?: true
    userId?: true
    role?: true
  }

  export type CompetitionAdminMaxAggregateInputType = {
    id?: true
    competitionId?: true
    userId?: true
    role?: true
  }

  export type CompetitionAdminCountAggregateInputType = {
    id?: true
    competitionId?: true
    userId?: true
    role?: true
    _all?: true
  }

  export type CompetitionAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionAdmin to aggregate.
     */
    where?: CompetitionAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionAdmins to fetch.
     */
    orderBy?: CompetitionAdminOrderByWithRelationInput | CompetitionAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetitionAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompetitionAdmins
    **/
    _count?: true | CompetitionAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetitionAdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetitionAdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetitionAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetitionAdminMaxAggregateInputType
  }

  export type GetCompetitionAdminAggregateType<T extends CompetitionAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetitionAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetitionAdmin[P]>
      : GetScalarType<T[P], AggregateCompetitionAdmin[P]>
  }




  export type CompetitionAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionAdminWhereInput
    orderBy?: CompetitionAdminOrderByWithAggregationInput | CompetitionAdminOrderByWithAggregationInput[]
    by: CompetitionAdminScalarFieldEnum[] | CompetitionAdminScalarFieldEnum
    having?: CompetitionAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetitionAdminCountAggregateInputType | true
    _avg?: CompetitionAdminAvgAggregateInputType
    _sum?: CompetitionAdminSumAggregateInputType
    _min?: CompetitionAdminMinAggregateInputType
    _max?: CompetitionAdminMaxAggregateInputType
  }

  export type CompetitionAdminGroupByOutputType = {
    id: number
    competitionId: string
    userId: string
    role: $Enums.CompetitionRole
    _count: CompetitionAdminCountAggregateOutputType | null
    _avg: CompetitionAdminAvgAggregateOutputType | null
    _sum: CompetitionAdminSumAggregateOutputType | null
    _min: CompetitionAdminMinAggregateOutputType | null
    _max: CompetitionAdminMaxAggregateOutputType | null
  }

  type GetCompetitionAdminGroupByPayload<T extends CompetitionAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetitionAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetitionAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetitionAdminGroupByOutputType[P]>
            : GetScalarType<T[P], CompetitionAdminGroupByOutputType[P]>
        }
      >
    >


  export type CompetitionAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    competitionId?: boolean
    userId?: boolean
    role?: boolean
    competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitionAdmin"]>

  export type CompetitionAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    competitionId?: boolean
    userId?: boolean
    role?: boolean
    competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitionAdmin"]>

  export type CompetitionAdminSelectScalar = {
    id?: boolean
    competitionId?: boolean
    userId?: boolean
    role?: boolean
  }

  export type CompetitionAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompetitionAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competition?: boolean | CompetitionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CompetitionAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompetitionAdmin"
    objects: {
      competition: Prisma.$CompetitionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      competitionId: string
      userId: string
      role: $Enums.CompetitionRole
    }, ExtArgs["result"]["competitionAdmin"]>
    composites: {}
  }

  type CompetitionAdminGetPayload<S extends boolean | null | undefined | CompetitionAdminDefaultArgs> = $Result.GetResult<Prisma.$CompetitionAdminPayload, S>

  type CompetitionAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetitionAdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetitionAdminCountAggregateInputType | true
    }

  export interface CompetitionAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompetitionAdmin'], meta: { name: 'CompetitionAdmin' } }
    /**
     * Find zero or one CompetitionAdmin that matches the filter.
     * @param {CompetitionAdminFindUniqueArgs} args - Arguments to find a CompetitionAdmin
     * @example
     * // Get one CompetitionAdmin
     * const competitionAdmin = await prisma.competitionAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetitionAdminFindUniqueArgs>(args: SelectSubset<T, CompetitionAdminFindUniqueArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompetitionAdmin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetitionAdminFindUniqueOrThrowArgs} args - Arguments to find a CompetitionAdmin
     * @example
     * // Get one CompetitionAdmin
     * const competitionAdmin = await prisma.competitionAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetitionAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetitionAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompetitionAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAdminFindFirstArgs} args - Arguments to find a CompetitionAdmin
     * @example
     * // Get one CompetitionAdmin
     * const competitionAdmin = await prisma.competitionAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetitionAdminFindFirstArgs>(args?: SelectSubset<T, CompetitionAdminFindFirstArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompetitionAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAdminFindFirstOrThrowArgs} args - Arguments to find a CompetitionAdmin
     * @example
     * // Get one CompetitionAdmin
     * const competitionAdmin = await prisma.competitionAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetitionAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetitionAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompetitionAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompetitionAdmins
     * const competitionAdmins = await prisma.competitionAdmin.findMany()
     * 
     * // Get first 10 CompetitionAdmins
     * const competitionAdmins = await prisma.competitionAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competitionAdminWithIdOnly = await prisma.competitionAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompetitionAdminFindManyArgs>(args?: SelectSubset<T, CompetitionAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompetitionAdmin.
     * @param {CompetitionAdminCreateArgs} args - Arguments to create a CompetitionAdmin.
     * @example
     * // Create one CompetitionAdmin
     * const CompetitionAdmin = await prisma.competitionAdmin.create({
     *   data: {
     *     // ... data to create a CompetitionAdmin
     *   }
     * })
     * 
     */
    create<T extends CompetitionAdminCreateArgs>(args: SelectSubset<T, CompetitionAdminCreateArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompetitionAdmins.
     * @param {CompetitionAdminCreateManyArgs} args - Arguments to create many CompetitionAdmins.
     * @example
     * // Create many CompetitionAdmins
     * const competitionAdmin = await prisma.competitionAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetitionAdminCreateManyArgs>(args?: SelectSubset<T, CompetitionAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompetitionAdmins and returns the data saved in the database.
     * @param {CompetitionAdminCreateManyAndReturnArgs} args - Arguments to create many CompetitionAdmins.
     * @example
     * // Create many CompetitionAdmins
     * const competitionAdmin = await prisma.competitionAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompetitionAdmins and only return the `id`
     * const competitionAdminWithIdOnly = await prisma.competitionAdmin.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetitionAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetitionAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompetitionAdmin.
     * @param {CompetitionAdminDeleteArgs} args - Arguments to delete one CompetitionAdmin.
     * @example
     * // Delete one CompetitionAdmin
     * const CompetitionAdmin = await prisma.competitionAdmin.delete({
     *   where: {
     *     // ... filter to delete one CompetitionAdmin
     *   }
     * })
     * 
     */
    delete<T extends CompetitionAdminDeleteArgs>(args: SelectSubset<T, CompetitionAdminDeleteArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompetitionAdmin.
     * @param {CompetitionAdminUpdateArgs} args - Arguments to update one CompetitionAdmin.
     * @example
     * // Update one CompetitionAdmin
     * const competitionAdmin = await prisma.competitionAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetitionAdminUpdateArgs>(args: SelectSubset<T, CompetitionAdminUpdateArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompetitionAdmins.
     * @param {CompetitionAdminDeleteManyArgs} args - Arguments to filter CompetitionAdmins to delete.
     * @example
     * // Delete a few CompetitionAdmins
     * const { count } = await prisma.competitionAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetitionAdminDeleteManyArgs>(args?: SelectSubset<T, CompetitionAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompetitionAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompetitionAdmins
     * const competitionAdmin = await prisma.competitionAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetitionAdminUpdateManyArgs>(args: SelectSubset<T, CompetitionAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompetitionAdmin.
     * @param {CompetitionAdminUpsertArgs} args - Arguments to update or create a CompetitionAdmin.
     * @example
     * // Update or create a CompetitionAdmin
     * const competitionAdmin = await prisma.competitionAdmin.upsert({
     *   create: {
     *     // ... data to create a CompetitionAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompetitionAdmin we want to update
     *   }
     * })
     */
    upsert<T extends CompetitionAdminUpsertArgs>(args: SelectSubset<T, CompetitionAdminUpsertArgs<ExtArgs>>): Prisma__CompetitionAdminClient<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompetitionAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAdminCountArgs} args - Arguments to filter CompetitionAdmins to count.
     * @example
     * // Count the number of CompetitionAdmins
     * const count = await prisma.competitionAdmin.count({
     *   where: {
     *     // ... the filter for the CompetitionAdmins we want to count
     *   }
     * })
    **/
    count<T extends CompetitionAdminCountArgs>(
      args?: Subset<T, CompetitionAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetitionAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompetitionAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetitionAdminAggregateArgs>(args: Subset<T, CompetitionAdminAggregateArgs>): Prisma.PrismaPromise<GetCompetitionAdminAggregateType<T>>

    /**
     * Group by CompetitionAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetitionAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetitionAdminGroupByArgs['orderBy'] }
        : { orderBy?: CompetitionAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetitionAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitionAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompetitionAdmin model
   */
  readonly fields: CompetitionAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompetitionAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetitionAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competition<T extends CompetitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionDefaultArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompetitionAdmin model
   */ 
  interface CompetitionAdminFieldRefs {
    readonly id: FieldRef<"CompetitionAdmin", 'Int'>
    readonly competitionId: FieldRef<"CompetitionAdmin", 'String'>
    readonly userId: FieldRef<"CompetitionAdmin", 'String'>
    readonly role: FieldRef<"CompetitionAdmin", 'CompetitionRole'>
  }
    

  // Custom InputTypes
  /**
   * CompetitionAdmin findUnique
   */
  export type CompetitionAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionAdmin to fetch.
     */
    where: CompetitionAdminWhereUniqueInput
  }

  /**
   * CompetitionAdmin findUniqueOrThrow
   */
  export type CompetitionAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionAdmin to fetch.
     */
    where: CompetitionAdminWhereUniqueInput
  }

  /**
   * CompetitionAdmin findFirst
   */
  export type CompetitionAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionAdmin to fetch.
     */
    where?: CompetitionAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionAdmins to fetch.
     */
    orderBy?: CompetitionAdminOrderByWithRelationInput | CompetitionAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionAdmins.
     */
    cursor?: CompetitionAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionAdmins.
     */
    distinct?: CompetitionAdminScalarFieldEnum | CompetitionAdminScalarFieldEnum[]
  }

  /**
   * CompetitionAdmin findFirstOrThrow
   */
  export type CompetitionAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionAdmin to fetch.
     */
    where?: CompetitionAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionAdmins to fetch.
     */
    orderBy?: CompetitionAdminOrderByWithRelationInput | CompetitionAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionAdmins.
     */
    cursor?: CompetitionAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionAdmins.
     */
    distinct?: CompetitionAdminScalarFieldEnum | CompetitionAdminScalarFieldEnum[]
  }

  /**
   * CompetitionAdmin findMany
   */
  export type CompetitionAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionAdmins to fetch.
     */
    where?: CompetitionAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionAdmins to fetch.
     */
    orderBy?: CompetitionAdminOrderByWithRelationInput | CompetitionAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompetitionAdmins.
     */
    cursor?: CompetitionAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionAdmins.
     */
    skip?: number
    distinct?: CompetitionAdminScalarFieldEnum | CompetitionAdminScalarFieldEnum[]
  }

  /**
   * CompetitionAdmin create
   */
  export type CompetitionAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a CompetitionAdmin.
     */
    data: XOR<CompetitionAdminCreateInput, CompetitionAdminUncheckedCreateInput>
  }

  /**
   * CompetitionAdmin createMany
   */
  export type CompetitionAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompetitionAdmins.
     */
    data: CompetitionAdminCreateManyInput | CompetitionAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompetitionAdmin createManyAndReturn
   */
  export type CompetitionAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompetitionAdmins.
     */
    data: CompetitionAdminCreateManyInput | CompetitionAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompetitionAdmin update
   */
  export type CompetitionAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a CompetitionAdmin.
     */
    data: XOR<CompetitionAdminUpdateInput, CompetitionAdminUncheckedUpdateInput>
    /**
     * Choose, which CompetitionAdmin to update.
     */
    where: CompetitionAdminWhereUniqueInput
  }

  /**
   * CompetitionAdmin updateMany
   */
  export type CompetitionAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompetitionAdmins.
     */
    data: XOR<CompetitionAdminUpdateManyMutationInput, CompetitionAdminUncheckedUpdateManyInput>
    /**
     * Filter which CompetitionAdmins to update
     */
    where?: CompetitionAdminWhereInput
  }

  /**
   * CompetitionAdmin upsert
   */
  export type CompetitionAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the CompetitionAdmin to update in case it exists.
     */
    where: CompetitionAdminWhereUniqueInput
    /**
     * In case the CompetitionAdmin found by the `where` argument doesn't exist, create a new CompetitionAdmin with this data.
     */
    create: XOR<CompetitionAdminCreateInput, CompetitionAdminUncheckedCreateInput>
    /**
     * In case the CompetitionAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetitionAdminUpdateInput, CompetitionAdminUncheckedUpdateInput>
  }

  /**
   * CompetitionAdmin delete
   */
  export type CompetitionAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    /**
     * Filter which CompetitionAdmin to delete.
     */
    where: CompetitionAdminWhereUniqueInput
  }

  /**
   * CompetitionAdmin deleteMany
   */
  export type CompetitionAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionAdmins to delete
     */
    where?: CompetitionAdminWhereInput
  }

  /**
   * CompetitionAdmin without action
   */
  export type CompetitionAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    value: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    value: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    value: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    value?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    value?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    value?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    value: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    competitionCategories?: boolean | Category$competitionCategoriesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    value?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competitionCategories?: boolean | Category$competitionCategoriesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      competitionCategories: Prisma.$CompetitionCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      value: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competitionCategories<T extends Category$competitionCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Category$competitionCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly value: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.competitionCategories
   */
  export type Category$competitionCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    where?: CompetitionCategoryWhereInput
    orderBy?: CompetitionCategoryOrderByWithRelationInput | CompetitionCategoryOrderByWithRelationInput[]
    cursor?: CompetitionCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionCategoryScalarFieldEnum | CompetitionCategoryScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model CompetitionCategory
   */

  export type AggregateCompetitionCategory = {
    _count: CompetitionCategoryCountAggregateOutputType | null
    _avg: CompetitionCategoryAvgAggregateOutputType | null
    _sum: CompetitionCategorySumAggregateOutputType | null
    _min: CompetitionCategoryMinAggregateOutputType | null
    _max: CompetitionCategoryMaxAggregateOutputType | null
  }

  export type CompetitionCategoryAvgAggregateOutputType = {
    id: number | null
    largestYearAllowed: number | null
    smallestYearAllowed: number | null
    categoryId: number | null
  }

  export type CompetitionCategorySumAggregateOutputType = {
    id: number | null
    largestYearAllowed: number | null
    smallestYearAllowed: number | null
    categoryId: number | null
  }

  export type CompetitionCategoryMinAggregateOutputType = {
    id: number | null
    largestYearAllowed: number | null
    smallestYearAllowed: number | null
    sex: $Enums.CompetitionCategorySex | null
    competitionId: string | null
    competitionName: string | null
    competitionSlug: string | null
    categoryId: number | null
    categoryName: string | null
  }

  export type CompetitionCategoryMaxAggregateOutputType = {
    id: number | null
    largestYearAllowed: number | null
    smallestYearAllowed: number | null
    sex: $Enums.CompetitionCategorySex | null
    competitionId: string | null
    competitionName: string | null
    competitionSlug: string | null
    categoryId: number | null
    categoryName: string | null
  }

  export type CompetitionCategoryCountAggregateOutputType = {
    id: number
    weights: number
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: number
    competitionId: number
    competitionName: number
    competitionSlug: number
    categoryId: number
    categoryName: number
    _all: number
  }


  export type CompetitionCategoryAvgAggregateInputType = {
    id?: true
    largestYearAllowed?: true
    smallestYearAllowed?: true
    categoryId?: true
  }

  export type CompetitionCategorySumAggregateInputType = {
    id?: true
    largestYearAllowed?: true
    smallestYearAllowed?: true
    categoryId?: true
  }

  export type CompetitionCategoryMinAggregateInputType = {
    id?: true
    largestYearAllowed?: true
    smallestYearAllowed?: true
    sex?: true
    competitionId?: true
    competitionName?: true
    competitionSlug?: true
    categoryId?: true
    categoryName?: true
  }

  export type CompetitionCategoryMaxAggregateInputType = {
    id?: true
    largestYearAllowed?: true
    smallestYearAllowed?: true
    sex?: true
    competitionId?: true
    competitionName?: true
    competitionSlug?: true
    categoryId?: true
    categoryName?: true
  }

  export type CompetitionCategoryCountAggregateInputType = {
    id?: true
    weights?: true
    largestYearAllowed?: true
    smallestYearAllowed?: true
    sex?: true
    competitionId?: true
    competitionName?: true
    competitionSlug?: true
    categoryId?: true
    categoryName?: true
    _all?: true
  }

  export type CompetitionCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionCategory to aggregate.
     */
    where?: CompetitionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionCategories to fetch.
     */
    orderBy?: CompetitionCategoryOrderByWithRelationInput | CompetitionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetitionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompetitionCategories
    **/
    _count?: true | CompetitionCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetitionCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetitionCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetitionCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetitionCategoryMaxAggregateInputType
  }

  export type GetCompetitionCategoryAggregateType<T extends CompetitionCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetitionCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetitionCategory[P]>
      : GetScalarType<T[P], AggregateCompetitionCategory[P]>
  }




  export type CompetitionCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitionCategoryWhereInput
    orderBy?: CompetitionCategoryOrderByWithAggregationInput | CompetitionCategoryOrderByWithAggregationInput[]
    by: CompetitionCategoryScalarFieldEnum[] | CompetitionCategoryScalarFieldEnum
    having?: CompetitionCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetitionCategoryCountAggregateInputType | true
    _avg?: CompetitionCategoryAvgAggregateInputType
    _sum?: CompetitionCategorySumAggregateInputType
    _min?: CompetitionCategoryMinAggregateInputType
    _max?: CompetitionCategoryMaxAggregateInputType
  }

  export type CompetitionCategoryGroupByOutputType = {
    id: number
    weights: string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competitionId: string
    competitionName: string
    competitionSlug: string
    categoryId: number
    categoryName: string
    _count: CompetitionCategoryCountAggregateOutputType | null
    _avg: CompetitionCategoryAvgAggregateOutputType | null
    _sum: CompetitionCategorySumAggregateOutputType | null
    _min: CompetitionCategoryMinAggregateOutputType | null
    _max: CompetitionCategoryMaxAggregateOutputType | null
  }

  type GetCompetitionCategoryGroupByPayload<T extends CompetitionCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetitionCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetitionCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetitionCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CompetitionCategoryGroupByOutputType[P]>
        }
      >
    >


  export type CompetitionCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    weights?: boolean
    largestYearAllowed?: boolean
    smallestYearAllowed?: boolean
    sex?: boolean
    competitionId?: boolean
    competitionName?: boolean
    competitionSlug?: boolean
    categoryId?: boolean
    categoryName?: boolean
    competition?: boolean | CompetitionCategory$competitionArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    competitors?: boolean | CompetitionCategory$competitorsArgs<ExtArgs>
    _count?: boolean | CompetitionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitionCategory"]>

  export type CompetitionCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    weights?: boolean
    largestYearAllowed?: boolean
    smallestYearAllowed?: boolean
    sex?: boolean
    competitionId?: boolean
    competitionName?: boolean
    competitionSlug?: boolean
    categoryId?: boolean
    categoryName?: boolean
    competition?: boolean | CompetitionCategory$competitionArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitionCategory"]>

  export type CompetitionCategorySelectScalar = {
    id?: boolean
    weights?: boolean
    largestYearAllowed?: boolean
    smallestYearAllowed?: boolean
    sex?: boolean
    competitionId?: boolean
    competitionName?: boolean
    competitionSlug?: boolean
    categoryId?: boolean
    categoryName?: boolean
  }

  export type CompetitionCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competition?: boolean | CompetitionCategory$competitionArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    competitors?: boolean | CompetitionCategory$competitorsArgs<ExtArgs>
    _count?: boolean | CompetitionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompetitionCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competition?: boolean | CompetitionCategory$competitionArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $CompetitionCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompetitionCategory"
    objects: {
      competition: Prisma.$CompetitionPayload<ExtArgs> | null
      category: Prisma.$CategoryPayload<ExtArgs>
      competitors: Prisma.$CompetitorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      weights: string[]
      largestYearAllowed: number
      smallestYearAllowed: number
      sex: $Enums.CompetitionCategorySex
      competitionId: string
      competitionName: string
      competitionSlug: string
      categoryId: number
      categoryName: string
    }, ExtArgs["result"]["competitionCategory"]>
    composites: {}
  }

  type CompetitionCategoryGetPayload<S extends boolean | null | undefined | CompetitionCategoryDefaultArgs> = $Result.GetResult<Prisma.$CompetitionCategoryPayload, S>

  type CompetitionCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetitionCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetitionCategoryCountAggregateInputType | true
    }

  export interface CompetitionCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompetitionCategory'], meta: { name: 'CompetitionCategory' } }
    /**
     * Find zero or one CompetitionCategory that matches the filter.
     * @param {CompetitionCategoryFindUniqueArgs} args - Arguments to find a CompetitionCategory
     * @example
     * // Get one CompetitionCategory
     * const competitionCategory = await prisma.competitionCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetitionCategoryFindUniqueArgs>(args: SelectSubset<T, CompetitionCategoryFindUniqueArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompetitionCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetitionCategoryFindUniqueOrThrowArgs} args - Arguments to find a CompetitionCategory
     * @example
     * // Get one CompetitionCategory
     * const competitionCategory = await prisma.competitionCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetitionCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetitionCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompetitionCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCategoryFindFirstArgs} args - Arguments to find a CompetitionCategory
     * @example
     * // Get one CompetitionCategory
     * const competitionCategory = await prisma.competitionCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetitionCategoryFindFirstArgs>(args?: SelectSubset<T, CompetitionCategoryFindFirstArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompetitionCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCategoryFindFirstOrThrowArgs} args - Arguments to find a CompetitionCategory
     * @example
     * // Get one CompetitionCategory
     * const competitionCategory = await prisma.competitionCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetitionCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetitionCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompetitionCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompetitionCategories
     * const competitionCategories = await prisma.competitionCategory.findMany()
     * 
     * // Get first 10 CompetitionCategories
     * const competitionCategories = await prisma.competitionCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competitionCategoryWithIdOnly = await prisma.competitionCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompetitionCategoryFindManyArgs>(args?: SelectSubset<T, CompetitionCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompetitionCategory.
     * @param {CompetitionCategoryCreateArgs} args - Arguments to create a CompetitionCategory.
     * @example
     * // Create one CompetitionCategory
     * const CompetitionCategory = await prisma.competitionCategory.create({
     *   data: {
     *     // ... data to create a CompetitionCategory
     *   }
     * })
     * 
     */
    create<T extends CompetitionCategoryCreateArgs>(args: SelectSubset<T, CompetitionCategoryCreateArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompetitionCategories.
     * @param {CompetitionCategoryCreateManyArgs} args - Arguments to create many CompetitionCategories.
     * @example
     * // Create many CompetitionCategories
     * const competitionCategory = await prisma.competitionCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetitionCategoryCreateManyArgs>(args?: SelectSubset<T, CompetitionCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompetitionCategories and returns the data saved in the database.
     * @param {CompetitionCategoryCreateManyAndReturnArgs} args - Arguments to create many CompetitionCategories.
     * @example
     * // Create many CompetitionCategories
     * const competitionCategory = await prisma.competitionCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompetitionCategories and only return the `id`
     * const competitionCategoryWithIdOnly = await prisma.competitionCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetitionCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetitionCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompetitionCategory.
     * @param {CompetitionCategoryDeleteArgs} args - Arguments to delete one CompetitionCategory.
     * @example
     * // Delete one CompetitionCategory
     * const CompetitionCategory = await prisma.competitionCategory.delete({
     *   where: {
     *     // ... filter to delete one CompetitionCategory
     *   }
     * })
     * 
     */
    delete<T extends CompetitionCategoryDeleteArgs>(args: SelectSubset<T, CompetitionCategoryDeleteArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompetitionCategory.
     * @param {CompetitionCategoryUpdateArgs} args - Arguments to update one CompetitionCategory.
     * @example
     * // Update one CompetitionCategory
     * const competitionCategory = await prisma.competitionCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetitionCategoryUpdateArgs>(args: SelectSubset<T, CompetitionCategoryUpdateArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompetitionCategories.
     * @param {CompetitionCategoryDeleteManyArgs} args - Arguments to filter CompetitionCategories to delete.
     * @example
     * // Delete a few CompetitionCategories
     * const { count } = await prisma.competitionCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetitionCategoryDeleteManyArgs>(args?: SelectSubset<T, CompetitionCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompetitionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompetitionCategories
     * const competitionCategory = await prisma.competitionCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetitionCategoryUpdateManyArgs>(args: SelectSubset<T, CompetitionCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompetitionCategory.
     * @param {CompetitionCategoryUpsertArgs} args - Arguments to update or create a CompetitionCategory.
     * @example
     * // Update or create a CompetitionCategory
     * const competitionCategory = await prisma.competitionCategory.upsert({
     *   create: {
     *     // ... data to create a CompetitionCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompetitionCategory we want to update
     *   }
     * })
     */
    upsert<T extends CompetitionCategoryUpsertArgs>(args: SelectSubset<T, CompetitionCategoryUpsertArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompetitionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCategoryCountArgs} args - Arguments to filter CompetitionCategories to count.
     * @example
     * // Count the number of CompetitionCategories
     * const count = await prisma.competitionCategory.count({
     *   where: {
     *     // ... the filter for the CompetitionCategories we want to count
     *   }
     * })
    **/
    count<T extends CompetitionCategoryCountArgs>(
      args?: Subset<T, CompetitionCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetitionCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompetitionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetitionCategoryAggregateArgs>(args: Subset<T, CompetitionCategoryAggregateArgs>): Prisma.PrismaPromise<GetCompetitionCategoryAggregateType<T>>

    /**
     * Group by CompetitionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitionCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetitionCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetitionCategoryGroupByArgs['orderBy'] }
        : { orderBy?: CompetitionCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetitionCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitionCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompetitionCategory model
   */
  readonly fields: CompetitionCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompetitionCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetitionCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competition<T extends CompetitionCategory$competitionArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionCategory$competitionArgs<ExtArgs>>): Prisma__CompetitionClient<$Result.GetResult<Prisma.$CompetitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    competitors<T extends CompetitionCategory$competitorsArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionCategory$competitorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompetitionCategory model
   */ 
  interface CompetitionCategoryFieldRefs {
    readonly id: FieldRef<"CompetitionCategory", 'Int'>
    readonly weights: FieldRef<"CompetitionCategory", 'String[]'>
    readonly largestYearAllowed: FieldRef<"CompetitionCategory", 'Int'>
    readonly smallestYearAllowed: FieldRef<"CompetitionCategory", 'Int'>
    readonly sex: FieldRef<"CompetitionCategory", 'CompetitionCategorySex'>
    readonly competitionId: FieldRef<"CompetitionCategory", 'String'>
    readonly competitionName: FieldRef<"CompetitionCategory", 'String'>
    readonly competitionSlug: FieldRef<"CompetitionCategory", 'String'>
    readonly categoryId: FieldRef<"CompetitionCategory", 'Int'>
    readonly categoryName: FieldRef<"CompetitionCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CompetitionCategory findUnique
   */
  export type CompetitionCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionCategory to fetch.
     */
    where: CompetitionCategoryWhereUniqueInput
  }

  /**
   * CompetitionCategory findUniqueOrThrow
   */
  export type CompetitionCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionCategory to fetch.
     */
    where: CompetitionCategoryWhereUniqueInput
  }

  /**
   * CompetitionCategory findFirst
   */
  export type CompetitionCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionCategory to fetch.
     */
    where?: CompetitionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionCategories to fetch.
     */
    orderBy?: CompetitionCategoryOrderByWithRelationInput | CompetitionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionCategories.
     */
    cursor?: CompetitionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionCategories.
     */
    distinct?: CompetitionCategoryScalarFieldEnum | CompetitionCategoryScalarFieldEnum[]
  }

  /**
   * CompetitionCategory findFirstOrThrow
   */
  export type CompetitionCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionCategory to fetch.
     */
    where?: CompetitionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionCategories to fetch.
     */
    orderBy?: CompetitionCategoryOrderByWithRelationInput | CompetitionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetitionCategories.
     */
    cursor?: CompetitionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetitionCategories.
     */
    distinct?: CompetitionCategoryScalarFieldEnum | CompetitionCategoryScalarFieldEnum[]
  }

  /**
   * CompetitionCategory findMany
   */
  export type CompetitionCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CompetitionCategories to fetch.
     */
    where?: CompetitionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetitionCategories to fetch.
     */
    orderBy?: CompetitionCategoryOrderByWithRelationInput | CompetitionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompetitionCategories.
     */
    cursor?: CompetitionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetitionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetitionCategories.
     */
    skip?: number
    distinct?: CompetitionCategoryScalarFieldEnum | CompetitionCategoryScalarFieldEnum[]
  }

  /**
   * CompetitionCategory create
   */
  export type CompetitionCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CompetitionCategory.
     */
    data: XOR<CompetitionCategoryCreateInput, CompetitionCategoryUncheckedCreateInput>
  }

  /**
   * CompetitionCategory createMany
   */
  export type CompetitionCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompetitionCategories.
     */
    data: CompetitionCategoryCreateManyInput | CompetitionCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompetitionCategory createManyAndReturn
   */
  export type CompetitionCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompetitionCategories.
     */
    data: CompetitionCategoryCreateManyInput | CompetitionCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompetitionCategory update
   */
  export type CompetitionCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CompetitionCategory.
     */
    data: XOR<CompetitionCategoryUpdateInput, CompetitionCategoryUncheckedUpdateInput>
    /**
     * Choose, which CompetitionCategory to update.
     */
    where: CompetitionCategoryWhereUniqueInput
  }

  /**
   * CompetitionCategory updateMany
   */
  export type CompetitionCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompetitionCategories.
     */
    data: XOR<CompetitionCategoryUpdateManyMutationInput, CompetitionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which CompetitionCategories to update
     */
    where?: CompetitionCategoryWhereInput
  }

  /**
   * CompetitionCategory upsert
   */
  export type CompetitionCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CompetitionCategory to update in case it exists.
     */
    where: CompetitionCategoryWhereUniqueInput
    /**
     * In case the CompetitionCategory found by the `where` argument doesn't exist, create a new CompetitionCategory with this data.
     */
    create: XOR<CompetitionCategoryCreateInput, CompetitionCategoryUncheckedCreateInput>
    /**
     * In case the CompetitionCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetitionCategoryUpdateInput, CompetitionCategoryUncheckedUpdateInput>
  }

  /**
   * CompetitionCategory delete
   */
  export type CompetitionCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
    /**
     * Filter which CompetitionCategory to delete.
     */
    where: CompetitionCategoryWhereUniqueInput
  }

  /**
   * CompetitionCategory deleteMany
   */
  export type CompetitionCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetitionCategories to delete
     */
    where?: CompetitionCategoryWhereInput
  }

  /**
   * CompetitionCategory.competition
   */
  export type CompetitionCategory$competitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competition
     */
    select?: CompetitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionInclude<ExtArgs> | null
    where?: CompetitionWhereInput
  }

  /**
   * CompetitionCategory.competitors
   */
  export type CompetitionCategory$competitorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    where?: CompetitorWhereInput
    orderBy?: CompetitorOrderByWithRelationInput | CompetitorOrderByWithRelationInput[]
    cursor?: CompetitorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitorScalarFieldEnum | CompetitorScalarFieldEnum[]
  }

  /**
   * CompetitionCategory without action
   */
  export type CompetitionCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionCategory
     */
    select?: CompetitionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Competitor
   */

  export type AggregateCompetitor = {
    _count: CompetitorCountAggregateOutputType | null
    _avg: CompetitorAvgAggregateOutputType | null
    _sum: CompetitorSumAggregateOutputType | null
    _min: CompetitorMinAggregateOutputType | null
    _max: CompetitorMaxAggregateOutputType | null
  }

  export type CompetitorAvgAggregateOutputType = {
    id: number | null
    competitionCategoryId: number | null
  }

  export type CompetitorSumAggregateOutputType = {
    id: number | null
    competitionCategoryId: number | null
  }

  export type CompetitorMinAggregateOutputType = {
    id: number | null
    clubName: string | null
    profileId: string | null
    firstName: string | null
    lastName: string | null
    competitionCategoryId: number | null
    competitionId: string | null
    competitionName: string | null
    competitionSlug: string | null
    weight: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompetitorMaxAggregateOutputType = {
    id: number | null
    clubName: string | null
    profileId: string | null
    firstName: string | null
    lastName: string | null
    competitionCategoryId: number | null
    competitionId: string | null
    competitionName: string | null
    competitionSlug: string | null
    weight: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompetitorCountAggregateOutputType = {
    id: number
    clubName: number
    profileId: number
    firstName: number
    lastName: number
    competitionCategoryId: number
    competitionId: number
    competitionName: number
    competitionSlug: number
    weight: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompetitorAvgAggregateInputType = {
    id?: true
    competitionCategoryId?: true
  }

  export type CompetitorSumAggregateInputType = {
    id?: true
    competitionCategoryId?: true
  }

  export type CompetitorMinAggregateInputType = {
    id?: true
    clubName?: true
    profileId?: true
    firstName?: true
    lastName?: true
    competitionCategoryId?: true
    competitionId?: true
    competitionName?: true
    competitionSlug?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompetitorMaxAggregateInputType = {
    id?: true
    clubName?: true
    profileId?: true
    firstName?: true
    lastName?: true
    competitionCategoryId?: true
    competitionId?: true
    competitionName?: true
    competitionSlug?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompetitorCountAggregateInputType = {
    id?: true
    clubName?: true
    profileId?: true
    firstName?: true
    lastName?: true
    competitionCategoryId?: true
    competitionId?: true
    competitionName?: true
    competitionSlug?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompetitorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competitor to aggregate.
     */
    where?: CompetitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitors to fetch.
     */
    orderBy?: CompetitorOrderByWithRelationInput | CompetitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competitors
    **/
    _count?: true | CompetitorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetitorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetitorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetitorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetitorMaxAggregateInputType
  }

  export type GetCompetitorAggregateType<T extends CompetitorAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetitor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetitor[P]>
      : GetScalarType<T[P], AggregateCompetitor[P]>
  }




  export type CompetitorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetitorWhereInput
    orderBy?: CompetitorOrderByWithAggregationInput | CompetitorOrderByWithAggregationInput[]
    by: CompetitorScalarFieldEnum[] | CompetitorScalarFieldEnum
    having?: CompetitorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetitorCountAggregateInputType | true
    _avg?: CompetitorAvgAggregateInputType
    _sum?: CompetitorSumAggregateInputType
    _min?: CompetitorMinAggregateInputType
    _max?: CompetitorMaxAggregateInputType
  }

  export type CompetitorGroupByOutputType = {
    id: number
    clubName: string
    profileId: string
    firstName: string
    lastName: string
    competitionCategoryId: number
    competitionId: string
    competitionName: string
    competitionSlug: string
    weight: string
    createdAt: Date
    updatedAt: Date | null
    _count: CompetitorCountAggregateOutputType | null
    _avg: CompetitorAvgAggregateOutputType | null
    _sum: CompetitorSumAggregateOutputType | null
    _min: CompetitorMinAggregateOutputType | null
    _max: CompetitorMaxAggregateOutputType | null
  }

  type GetCompetitorGroupByPayload<T extends CompetitorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetitorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetitorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetitorGroupByOutputType[P]>
            : GetScalarType<T[P], CompetitorGroupByOutputType[P]>
        }
      >
    >


  export type CompetitorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubName?: boolean
    profileId?: boolean
    firstName?: boolean
    lastName?: boolean
    competitionCategoryId?: boolean
    competitionId?: boolean
    competitionName?: boolean
    competitionSlug?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
    competitionCategory?: boolean | CompetitionCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitor"]>

  export type CompetitorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubName?: boolean
    profileId?: boolean
    firstName?: boolean
    lastName?: boolean
    competitionCategoryId?: boolean
    competitionId?: boolean
    competitionName?: boolean
    competitionSlug?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
    competitionCategory?: boolean | CompetitionCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competitor"]>

  export type CompetitorSelectScalar = {
    id?: boolean
    clubName?: boolean
    profileId?: boolean
    firstName?: boolean
    lastName?: boolean
    competitionCategoryId?: boolean
    competitionId?: boolean
    competitionName?: boolean
    competitionSlug?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompetitorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
    competitionCategory?: boolean | CompetitionCategoryDefaultArgs<ExtArgs>
  }
  export type CompetitorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | UserProfileDefaultArgs<ExtArgs>
    competitionCategory?: boolean | CompetitionCategoryDefaultArgs<ExtArgs>
  }

  export type $CompetitorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Competitor"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs>
      competitionCategory: Prisma.$CompetitionCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clubName: string
      profileId: string
      firstName: string
      lastName: string
      competitionCategoryId: number
      competitionId: string
      competitionName: string
      competitionSlug: string
      weight: string
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["competitor"]>
    composites: {}
  }

  type CompetitorGetPayload<S extends boolean | null | undefined | CompetitorDefaultArgs> = $Result.GetResult<Prisma.$CompetitorPayload, S>

  type CompetitorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetitorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetitorCountAggregateInputType | true
    }

  export interface CompetitorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competitor'], meta: { name: 'Competitor' } }
    /**
     * Find zero or one Competitor that matches the filter.
     * @param {CompetitorFindUniqueArgs} args - Arguments to find a Competitor
     * @example
     * // Get one Competitor
     * const competitor = await prisma.competitor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetitorFindUniqueArgs>(args: SelectSubset<T, CompetitorFindUniqueArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Competitor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetitorFindUniqueOrThrowArgs} args - Arguments to find a Competitor
     * @example
     * // Get one Competitor
     * const competitor = await prisma.competitor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetitorFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetitorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Competitor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitorFindFirstArgs} args - Arguments to find a Competitor
     * @example
     * // Get one Competitor
     * const competitor = await prisma.competitor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetitorFindFirstArgs>(args?: SelectSubset<T, CompetitorFindFirstArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Competitor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitorFindFirstOrThrowArgs} args - Arguments to find a Competitor
     * @example
     * // Get one Competitor
     * const competitor = await prisma.competitor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetitorFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetitorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Competitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competitors
     * const competitors = await prisma.competitor.findMany()
     * 
     * // Get first 10 Competitors
     * const competitors = await prisma.competitor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competitorWithIdOnly = await prisma.competitor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompetitorFindManyArgs>(args?: SelectSubset<T, CompetitorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Competitor.
     * @param {CompetitorCreateArgs} args - Arguments to create a Competitor.
     * @example
     * // Create one Competitor
     * const Competitor = await prisma.competitor.create({
     *   data: {
     *     // ... data to create a Competitor
     *   }
     * })
     * 
     */
    create<T extends CompetitorCreateArgs>(args: SelectSubset<T, CompetitorCreateArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Competitors.
     * @param {CompetitorCreateManyArgs} args - Arguments to create many Competitors.
     * @example
     * // Create many Competitors
     * const competitor = await prisma.competitor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetitorCreateManyArgs>(args?: SelectSubset<T, CompetitorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Competitors and returns the data saved in the database.
     * @param {CompetitorCreateManyAndReturnArgs} args - Arguments to create many Competitors.
     * @example
     * // Create many Competitors
     * const competitor = await prisma.competitor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Competitors and only return the `id`
     * const competitorWithIdOnly = await prisma.competitor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetitorCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetitorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Competitor.
     * @param {CompetitorDeleteArgs} args - Arguments to delete one Competitor.
     * @example
     * // Delete one Competitor
     * const Competitor = await prisma.competitor.delete({
     *   where: {
     *     // ... filter to delete one Competitor
     *   }
     * })
     * 
     */
    delete<T extends CompetitorDeleteArgs>(args: SelectSubset<T, CompetitorDeleteArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Competitor.
     * @param {CompetitorUpdateArgs} args - Arguments to update one Competitor.
     * @example
     * // Update one Competitor
     * const competitor = await prisma.competitor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetitorUpdateArgs>(args: SelectSubset<T, CompetitorUpdateArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Competitors.
     * @param {CompetitorDeleteManyArgs} args - Arguments to filter Competitors to delete.
     * @example
     * // Delete a few Competitors
     * const { count } = await prisma.competitor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetitorDeleteManyArgs>(args?: SelectSubset<T, CompetitorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competitors
     * const competitor = await prisma.competitor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetitorUpdateManyArgs>(args: SelectSubset<T, CompetitorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competitor.
     * @param {CompetitorUpsertArgs} args - Arguments to update or create a Competitor.
     * @example
     * // Update or create a Competitor
     * const competitor = await prisma.competitor.upsert({
     *   create: {
     *     // ... data to create a Competitor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competitor we want to update
     *   }
     * })
     */
    upsert<T extends CompetitorUpsertArgs>(args: SelectSubset<T, CompetitorUpsertArgs<ExtArgs>>): Prisma__CompetitorClient<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Competitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitorCountArgs} args - Arguments to filter Competitors to count.
     * @example
     * // Count the number of Competitors
     * const count = await prisma.competitor.count({
     *   where: {
     *     // ... the filter for the Competitors we want to count
     *   }
     * })
    **/
    count<T extends CompetitorCountArgs>(
      args?: Subset<T, CompetitorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetitorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetitorAggregateArgs>(args: Subset<T, CompetitorAggregateArgs>): Prisma.PrismaPromise<GetCompetitorAggregateType<T>>

    /**
     * Group by Competitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetitorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetitorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetitorGroupByArgs['orderBy'] }
        : { orderBy?: CompetitorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetitorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetitorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Competitor model
   */
  readonly fields: CompetitorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Competitor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetitorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends UserProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserProfileDefaultArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    competitionCategory<T extends CompetitionCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetitionCategoryDefaultArgs<ExtArgs>>): Prisma__CompetitionCategoryClient<$Result.GetResult<Prisma.$CompetitionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Competitor model
   */ 
  interface CompetitorFieldRefs {
    readonly id: FieldRef<"Competitor", 'Int'>
    readonly clubName: FieldRef<"Competitor", 'String'>
    readonly profileId: FieldRef<"Competitor", 'String'>
    readonly firstName: FieldRef<"Competitor", 'String'>
    readonly lastName: FieldRef<"Competitor", 'String'>
    readonly competitionCategoryId: FieldRef<"Competitor", 'Int'>
    readonly competitionId: FieldRef<"Competitor", 'String'>
    readonly competitionName: FieldRef<"Competitor", 'String'>
    readonly competitionSlug: FieldRef<"Competitor", 'String'>
    readonly weight: FieldRef<"Competitor", 'String'>
    readonly createdAt: FieldRef<"Competitor", 'DateTime'>
    readonly updatedAt: FieldRef<"Competitor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Competitor findUnique
   */
  export type CompetitorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * Filter, which Competitor to fetch.
     */
    where: CompetitorWhereUniqueInput
  }

  /**
   * Competitor findUniqueOrThrow
   */
  export type CompetitorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * Filter, which Competitor to fetch.
     */
    where: CompetitorWhereUniqueInput
  }

  /**
   * Competitor findFirst
   */
  export type CompetitorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * Filter, which Competitor to fetch.
     */
    where?: CompetitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitors to fetch.
     */
    orderBy?: CompetitorOrderByWithRelationInput | CompetitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competitors.
     */
    cursor?: CompetitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competitors.
     */
    distinct?: CompetitorScalarFieldEnum | CompetitorScalarFieldEnum[]
  }

  /**
   * Competitor findFirstOrThrow
   */
  export type CompetitorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * Filter, which Competitor to fetch.
     */
    where?: CompetitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitors to fetch.
     */
    orderBy?: CompetitorOrderByWithRelationInput | CompetitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competitors.
     */
    cursor?: CompetitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competitors.
     */
    distinct?: CompetitorScalarFieldEnum | CompetitorScalarFieldEnum[]
  }

  /**
   * Competitor findMany
   */
  export type CompetitorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * Filter, which Competitors to fetch.
     */
    where?: CompetitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competitors to fetch.
     */
    orderBy?: CompetitorOrderByWithRelationInput | CompetitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competitors.
     */
    cursor?: CompetitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competitors.
     */
    skip?: number
    distinct?: CompetitorScalarFieldEnum | CompetitorScalarFieldEnum[]
  }

  /**
   * Competitor create
   */
  export type CompetitorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * The data needed to create a Competitor.
     */
    data: XOR<CompetitorCreateInput, CompetitorUncheckedCreateInput>
  }

  /**
   * Competitor createMany
   */
  export type CompetitorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Competitors.
     */
    data: CompetitorCreateManyInput | CompetitorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Competitor createManyAndReturn
   */
  export type CompetitorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Competitors.
     */
    data: CompetitorCreateManyInput | CompetitorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Competitor update
   */
  export type CompetitorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * The data needed to update a Competitor.
     */
    data: XOR<CompetitorUpdateInput, CompetitorUncheckedUpdateInput>
    /**
     * Choose, which Competitor to update.
     */
    where: CompetitorWhereUniqueInput
  }

  /**
   * Competitor updateMany
   */
  export type CompetitorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Competitors.
     */
    data: XOR<CompetitorUpdateManyMutationInput, CompetitorUncheckedUpdateManyInput>
    /**
     * Filter which Competitors to update
     */
    where?: CompetitorWhereInput
  }

  /**
   * Competitor upsert
   */
  export type CompetitorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * The filter to search for the Competitor to update in case it exists.
     */
    where: CompetitorWhereUniqueInput
    /**
     * In case the Competitor found by the `where` argument doesn't exist, create a new Competitor with this data.
     */
    create: XOR<CompetitorCreateInput, CompetitorUncheckedCreateInput>
    /**
     * In case the Competitor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetitorUpdateInput, CompetitorUncheckedUpdateInput>
  }

  /**
   * Competitor delete
   */
  export type CompetitorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    /**
     * Filter which Competitor to delete.
     */
    where: CompetitorWhereUniqueInput
  }

  /**
   * Competitor deleteMany
   */
  export type CompetitorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competitors to delete
     */
    where?: CompetitorWhereInput
  }

  /**
   * Competitor without action
   */
  export type CompetitorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    token: string
    userId: string
    expiresAt: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      token: string
      userId: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly token: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    competitionAdmins?: boolean | User$competitionAdminsArgs<ExtArgs>
    userProfile?: boolean | User$userProfileArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competitionAdmins?: boolean | User$competitionAdminsArgs<ExtArgs>
    userProfile?: boolean | User$userProfileArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      competitionAdmins: Prisma.$CompetitionAdminPayload<ExtArgs>[]
      userProfile: Prisma.$UserProfilePayload<ExtArgs> | null
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competitionAdmins<T extends User$competitionAdminsArgs<ExtArgs> = {}>(args?: Subset<T, User$competitionAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitionAdminPayload<ExtArgs>, T, "findMany"> | Null>
    userProfile<T extends User$userProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$userProfileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.competitionAdmins
   */
  export type User$competitionAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetitionAdmin
     */
    select?: CompetitionAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitionAdminInclude<ExtArgs> | null
    where?: CompetitionAdminWhereInput
    orderBy?: CompetitionAdminOrderByWithRelationInput | CompetitionAdminOrderByWithRelationInput[]
    cursor?: CompetitionAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitionAdminScalarFieldEnum | CompetitionAdminScalarFieldEnum[]
  }

  /**
   * User.userProfile
   */
  export type User$userProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    nationalId: string | null
    nationalIdType: string | null
    dateOfBirth: Date | null
    sex: $Enums.Sex | null
    userId: string | null
    clubId: string | null
    belt: $Enums.Belt | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    nationalId: string | null
    nationalIdType: string | null
    dateOfBirth: Date | null
    sex: $Enums.Sex | null
    userId: string | null
    clubId: string | null
    belt: $Enums.Belt | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    nationalId: number
    nationalIdType: number
    dateOfBirth: number
    sex: number
    userId: number
    clubId: number
    belt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    nationalId?: true
    nationalIdType?: true
    dateOfBirth?: true
    sex?: true
    userId?: true
    clubId?: true
    belt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    nationalId?: true
    nationalIdType?: true
    dateOfBirth?: true
    sex?: true
    userId?: true
    clubId?: true
    belt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    nationalId?: true
    nationalIdType?: true
    dateOfBirth?: true
    sex?: true
    userId?: true
    clubId?: true
    belt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: string
    firstName: string | null
    lastName: string | null
    nationalId: string | null
    nationalIdType: string | null
    dateOfBirth: Date | null
    sex: $Enums.Sex
    userId: string | null
    clubId: string | null
    belt: $Enums.Belt | null
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    nationalId?: boolean
    nationalIdType?: boolean
    dateOfBirth?: boolean
    sex?: boolean
    userId?: boolean
    clubId?: boolean
    belt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserProfile$userArgs<ExtArgs>
    club?: boolean | UserProfile$clubArgs<ExtArgs>
    participations?: boolean | UserProfile$participationsArgs<ExtArgs>
    _count?: boolean | UserProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    nationalId?: boolean
    nationalIdType?: boolean
    dateOfBirth?: boolean
    sex?: boolean
    userId?: boolean
    clubId?: boolean
    belt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserProfile$userArgs<ExtArgs>
    club?: boolean | UserProfile$clubArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    nationalId?: boolean
    nationalIdType?: boolean
    dateOfBirth?: boolean
    sex?: boolean
    userId?: boolean
    clubId?: boolean
    belt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserProfile$userArgs<ExtArgs>
    club?: boolean | UserProfile$clubArgs<ExtArgs>
    participations?: boolean | UserProfile$participationsArgs<ExtArgs>
    _count?: boolean | UserProfileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserProfile$userArgs<ExtArgs>
    club?: boolean | UserProfile$clubArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      club: Prisma.$ClubPayload<ExtArgs> | null
      participations: Prisma.$CompetitorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string | null
      lastName: string | null
      nationalId: string | null
      nationalIdType: string | null
      dateOfBirth: Date | null
      sex: $Enums.Sex
      userId: string | null
      clubId: string | null
      belt: $Enums.Belt | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserProfile$userArgs<ExtArgs> = {}>(args?: Subset<T, UserProfile$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    club<T extends UserProfile$clubArgs<ExtArgs> = {}>(args?: Subset<T, UserProfile$clubArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    participations<T extends UserProfile$participationsArgs<ExtArgs> = {}>(args?: Subset<T, UserProfile$participationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetitorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */ 
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'String'>
    readonly firstName: FieldRef<"UserProfile", 'String'>
    readonly lastName: FieldRef<"UserProfile", 'String'>
    readonly nationalId: FieldRef<"UserProfile", 'String'>
    readonly nationalIdType: FieldRef<"UserProfile", 'String'>
    readonly dateOfBirth: FieldRef<"UserProfile", 'DateTime'>
    readonly sex: FieldRef<"UserProfile", 'Sex'>
    readonly userId: FieldRef<"UserProfile", 'String'>
    readonly clubId: FieldRef<"UserProfile", 'String'>
    readonly belt: FieldRef<"UserProfile", 'Belt'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile.user
   */
  export type UserProfile$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserProfile.club
   */
  export type UserProfile$clubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    where?: ClubWhereInput
  }

  /**
   * UserProfile.participations
   */
  export type UserProfile$participationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competitor
     */
    select?: CompetitorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetitorInclude<ExtArgs> | null
    where?: CompetitorWhereInput
    orderBy?: CompetitorOrderByWithRelationInput | CompetitorOrderByWithRelationInput[]
    cursor?: CompetitorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetitorScalarFieldEnum | CompetitorScalarFieldEnum[]
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CampScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    connectedCompetitionId: 'connectedCompetitionId'
  };

  export type CampScalarFieldEnum = (typeof CampScalarFieldEnum)[keyof typeof CampScalarFieldEnum]


  export const ClubScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    country: 'country',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClubScalarFieldEnum = (typeof ClubScalarFieldEnum)[keyof typeof ClubScalarFieldEnum]


  export const ClubMetadataScalarFieldEnum: {
    id: 'id',
    clubId: 'clubId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClubMetadataScalarFieldEnum = (typeof ClubMetadataScalarFieldEnum)[keyof typeof ClubMetadataScalarFieldEnum]


  export const CompetitionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    clubName: 'clubName',
    isPublished: 'isPublished',
    isArchived: 'isArchived',
    description: 'description',
    startingAt: 'startingAt',
    location: 'location',
    additionalInfo: 'additionalInfo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompetitionScalarFieldEnum = (typeof CompetitionScalarFieldEnum)[keyof typeof CompetitionScalarFieldEnum]


  export const CompetitionAdminScalarFieldEnum: {
    id: 'id',
    competitionId: 'competitionId',
    userId: 'userId',
    role: 'role'
  };

  export type CompetitionAdminScalarFieldEnum = (typeof CompetitionAdminScalarFieldEnum)[keyof typeof CompetitionAdminScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    value: 'value'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CompetitionCategoryScalarFieldEnum: {
    id: 'id',
    weights: 'weights',
    largestYearAllowed: 'largestYearAllowed',
    smallestYearAllowed: 'smallestYearAllowed',
    sex: 'sex',
    competitionId: 'competitionId',
    competitionName: 'competitionName',
    competitionSlug: 'competitionSlug',
    categoryId: 'categoryId',
    categoryName: 'categoryName'
  };

  export type CompetitionCategoryScalarFieldEnum = (typeof CompetitionCategoryScalarFieldEnum)[keyof typeof CompetitionCategoryScalarFieldEnum]


  export const CompetitorScalarFieldEnum: {
    id: 'id',
    clubName: 'clubName',
    profileId: 'profileId',
    firstName: 'firstName',
    lastName: 'lastName',
    competitionCategoryId: 'competitionCategoryId',
    competitionId: 'competitionId',
    competitionName: 'competitionName',
    competitionSlug: 'competitionSlug',
    weight: 'weight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompetitorScalarFieldEnum = (typeof CompetitorScalarFieldEnum)[keyof typeof CompetitorScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    nationalId: 'nationalId',
    nationalIdType: 'nationalIdType',
    dateOfBirth: 'dateOfBirth',
    sex: 'sex',
    userId: 'userId',
    clubId: 'clubId',
    belt: 'belt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'CompetitionRole'
   */
  export type EnumCompetitionRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompetitionRole'>
    


  /**
   * Reference to a field of type 'CompetitionRole[]'
   */
  export type ListEnumCompetitionRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompetitionRole[]'>
    


  /**
   * Reference to a field of type 'CompetitionCategorySex'
   */
  export type EnumCompetitionCategorySexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompetitionCategorySex'>
    


  /**
   * Reference to a field of type 'CompetitionCategorySex[]'
   */
  export type ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompetitionCategorySex[]'>
    


  /**
   * Reference to a field of type 'Sex'
   */
  export type EnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex'>
    


  /**
   * Reference to a field of type 'Sex[]'
   */
  export type ListEnumSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Sex[]'>
    


  /**
   * Reference to a field of type 'Belt'
   */
  export type EnumBeltFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Belt'>
    


  /**
   * Reference to a field of type 'Belt[]'
   */
  export type ListEnumBeltFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Belt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CampWhereInput = {
    AND?: CampWhereInput | CampWhereInput[]
    OR?: CampWhereInput[]
    NOT?: CampWhereInput | CampWhereInput[]
    id?: StringFilter<"Camp"> | string
    name?: StringFilter<"Camp"> | string
    slug?: StringFilter<"Camp"> | string
    connectedCompetitionId?: StringNullableFilter<"Camp"> | string | null
    connectedCompetition?: XOR<CompetitionNullableScalarRelationFilter, CompetitionWhereInput> | null
  }

  export type CampOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    connectedCompetitionId?: SortOrderInput | SortOrder
    connectedCompetition?: CompetitionOrderByWithRelationInput
  }

  export type CampWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    connectedCompetitionId?: string
    AND?: CampWhereInput | CampWhereInput[]
    OR?: CampWhereInput[]
    NOT?: CampWhereInput | CampWhereInput[]
    name?: StringFilter<"Camp"> | string
    connectedCompetition?: XOR<CompetitionNullableScalarRelationFilter, CompetitionWhereInput> | null
  }, "id" | "slug" | "connectedCompetitionId">

  export type CampOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    connectedCompetitionId?: SortOrderInput | SortOrder
    _count?: CampCountOrderByAggregateInput
    _max?: CampMaxOrderByAggregateInput
    _min?: CampMinOrderByAggregateInput
  }

  export type CampScalarWhereWithAggregatesInput = {
    AND?: CampScalarWhereWithAggregatesInput | CampScalarWhereWithAggregatesInput[]
    OR?: CampScalarWhereWithAggregatesInput[]
    NOT?: CampScalarWhereWithAggregatesInput | CampScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Camp"> | string
    name?: StringWithAggregatesFilter<"Camp"> | string
    slug?: StringWithAggregatesFilter<"Camp"> | string
    connectedCompetitionId?: StringNullableWithAggregatesFilter<"Camp"> | string | null
  }

  export type ClubWhereInput = {
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    id?: StringFilter<"Club"> | string
    name?: StringFilter<"Club"> | string
    slug?: StringFilter<"Club"> | string
    description?: StringFilter<"Club"> | string
    country?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    clubMetadata?: XOR<ClubMetadataNullableScalarRelationFilter, ClubMetadataWhereInput> | null
    userProfiles?: UserProfileListRelationFilter
  }

  export type ClubOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clubMetadata?: ClubMetadataOrderByWithRelationInput
    userProfiles?: UserProfileOrderByRelationAggregateInput
  }

  export type ClubWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    slug?: StringFilter<"Club"> | string
    description?: StringFilter<"Club"> | string
    country?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    clubMetadata?: XOR<ClubMetadataNullableScalarRelationFilter, ClubMetadataWhereInput> | null
    userProfiles?: UserProfileListRelationFilter
  }, "id" | "name">

  export type ClubOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClubCountOrderByAggregateInput
    _max?: ClubMaxOrderByAggregateInput
    _min?: ClubMinOrderByAggregateInput
  }

  export type ClubScalarWhereWithAggregatesInput = {
    AND?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    OR?: ClubScalarWhereWithAggregatesInput[]
    NOT?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Club"> | string
    name?: StringWithAggregatesFilter<"Club"> | string
    slug?: StringWithAggregatesFilter<"Club"> | string
    description?: StringWithAggregatesFilter<"Club"> | string
    country?: StringWithAggregatesFilter<"Club"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
  }

  export type ClubMetadataWhereInput = {
    AND?: ClubMetadataWhereInput | ClubMetadataWhereInput[]
    OR?: ClubMetadataWhereInput[]
    NOT?: ClubMetadataWhereInput | ClubMetadataWhereInput[]
    id?: StringFilter<"ClubMetadata"> | string
    clubId?: StringFilter<"ClubMetadata"> | string
    createdAt?: DateTimeFilter<"ClubMetadata"> | Date | string
    updatedAt?: DateTimeFilter<"ClubMetadata"> | Date | string
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }

  export type ClubMetadataOrderByWithRelationInput = {
    id?: SortOrder
    clubId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    club?: ClubOrderByWithRelationInput
  }

  export type ClubMetadataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clubId?: string
    AND?: ClubMetadataWhereInput | ClubMetadataWhereInput[]
    OR?: ClubMetadataWhereInput[]
    NOT?: ClubMetadataWhereInput | ClubMetadataWhereInput[]
    createdAt?: DateTimeFilter<"ClubMetadata"> | Date | string
    updatedAt?: DateTimeFilter<"ClubMetadata"> | Date | string
    club?: XOR<ClubScalarRelationFilter, ClubWhereInput>
  }, "id" | "clubId">

  export type ClubMetadataOrderByWithAggregationInput = {
    id?: SortOrder
    clubId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClubMetadataCountOrderByAggregateInput
    _max?: ClubMetadataMaxOrderByAggregateInput
    _min?: ClubMetadataMinOrderByAggregateInput
  }

  export type ClubMetadataScalarWhereWithAggregatesInput = {
    AND?: ClubMetadataScalarWhereWithAggregatesInput | ClubMetadataScalarWhereWithAggregatesInput[]
    OR?: ClubMetadataScalarWhereWithAggregatesInput[]
    NOT?: ClubMetadataScalarWhereWithAggregatesInput | ClubMetadataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClubMetadata"> | string
    clubId?: StringWithAggregatesFilter<"ClubMetadata"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ClubMetadata"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClubMetadata"> | Date | string
  }

  export type CompetitionWhereInput = {
    AND?: CompetitionWhereInput | CompetitionWhereInput[]
    OR?: CompetitionWhereInput[]
    NOT?: CompetitionWhereInput | CompetitionWhereInput[]
    id?: StringFilter<"Competition"> | string
    name?: StringFilter<"Competition"> | string
    slug?: StringFilter<"Competition"> | string
    clubName?: StringFilter<"Competition"> | string
    isPublished?: BoolFilter<"Competition"> | boolean
    isArchived?: BoolFilter<"Competition"> | boolean
    description?: StringNullableFilter<"Competition"> | string | null
    startingAt?: DateTimeNullableFilter<"Competition"> | Date | string | null
    location?: StringNullableFilter<"Competition"> | string | null
    additionalInfo?: JsonNullableFilter<"Competition">
    createdAt?: DateTimeFilter<"Competition"> | Date | string
    updatedAt?: DateTimeFilter<"Competition"> | Date | string
    categories?: CompetitionCategoryListRelationFilter
    camp?: XOR<CampNullableScalarRelationFilter, CampWhereInput> | null
    competitionAdmins?: CompetitionAdminListRelationFilter
  }

  export type CompetitionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    clubName?: SortOrder
    isPublished?: SortOrder
    isArchived?: SortOrder
    description?: SortOrderInput | SortOrder
    startingAt?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    additionalInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categories?: CompetitionCategoryOrderByRelationAggregateInput
    camp?: CampOrderByWithRelationInput
    competitionAdmins?: CompetitionAdminOrderByRelationAggregateInput
  }

  export type CompetitionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    slug?: string
    id_name_slug?: CompetitionIdNameSlugCompoundUniqueInput
    AND?: CompetitionWhereInput | CompetitionWhereInput[]
    OR?: CompetitionWhereInput[]
    NOT?: CompetitionWhereInput | CompetitionWhereInput[]
    clubName?: StringFilter<"Competition"> | string
    isPublished?: BoolFilter<"Competition"> | boolean
    isArchived?: BoolFilter<"Competition"> | boolean
    description?: StringNullableFilter<"Competition"> | string | null
    startingAt?: DateTimeNullableFilter<"Competition"> | Date | string | null
    location?: StringNullableFilter<"Competition"> | string | null
    additionalInfo?: JsonNullableFilter<"Competition">
    createdAt?: DateTimeFilter<"Competition"> | Date | string
    updatedAt?: DateTimeFilter<"Competition"> | Date | string
    categories?: CompetitionCategoryListRelationFilter
    camp?: XOR<CampNullableScalarRelationFilter, CampWhereInput> | null
    competitionAdmins?: CompetitionAdminListRelationFilter
  }, "id" | "name" | "slug" | "id_name_slug">

  export type CompetitionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    clubName?: SortOrder
    isPublished?: SortOrder
    isArchived?: SortOrder
    description?: SortOrderInput | SortOrder
    startingAt?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    additionalInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompetitionCountOrderByAggregateInput
    _max?: CompetitionMaxOrderByAggregateInput
    _min?: CompetitionMinOrderByAggregateInput
  }

  export type CompetitionScalarWhereWithAggregatesInput = {
    AND?: CompetitionScalarWhereWithAggregatesInput | CompetitionScalarWhereWithAggregatesInput[]
    OR?: CompetitionScalarWhereWithAggregatesInput[]
    NOT?: CompetitionScalarWhereWithAggregatesInput | CompetitionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Competition"> | string
    name?: StringWithAggregatesFilter<"Competition"> | string
    slug?: StringWithAggregatesFilter<"Competition"> | string
    clubName?: StringWithAggregatesFilter<"Competition"> | string
    isPublished?: BoolWithAggregatesFilter<"Competition"> | boolean
    isArchived?: BoolWithAggregatesFilter<"Competition"> | boolean
    description?: StringNullableWithAggregatesFilter<"Competition"> | string | null
    startingAt?: DateTimeNullableWithAggregatesFilter<"Competition"> | Date | string | null
    location?: StringNullableWithAggregatesFilter<"Competition"> | string | null
    additionalInfo?: JsonNullableWithAggregatesFilter<"Competition">
    createdAt?: DateTimeWithAggregatesFilter<"Competition"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Competition"> | Date | string
  }

  export type CompetitionAdminWhereInput = {
    AND?: CompetitionAdminWhereInput | CompetitionAdminWhereInput[]
    OR?: CompetitionAdminWhereInput[]
    NOT?: CompetitionAdminWhereInput | CompetitionAdminWhereInput[]
    id?: IntFilter<"CompetitionAdmin"> | number
    competitionId?: StringFilter<"CompetitionAdmin"> | string
    userId?: StringFilter<"CompetitionAdmin"> | string
    role?: EnumCompetitionRoleFilter<"CompetitionAdmin"> | $Enums.CompetitionRole
    competition?: XOR<CompetitionScalarRelationFilter, CompetitionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CompetitionAdminOrderByWithRelationInput = {
    id?: SortOrder
    competitionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    competition?: CompetitionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CompetitionAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    competitionId_userId?: CompetitionAdminCompetitionIdUserIdCompoundUniqueInput
    AND?: CompetitionAdminWhereInput | CompetitionAdminWhereInput[]
    OR?: CompetitionAdminWhereInput[]
    NOT?: CompetitionAdminWhereInput | CompetitionAdminWhereInput[]
    competitionId?: StringFilter<"CompetitionAdmin"> | string
    userId?: StringFilter<"CompetitionAdmin"> | string
    role?: EnumCompetitionRoleFilter<"CompetitionAdmin"> | $Enums.CompetitionRole
    competition?: XOR<CompetitionScalarRelationFilter, CompetitionWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "competitionId_userId">

  export type CompetitionAdminOrderByWithAggregationInput = {
    id?: SortOrder
    competitionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    _count?: CompetitionAdminCountOrderByAggregateInput
    _avg?: CompetitionAdminAvgOrderByAggregateInput
    _max?: CompetitionAdminMaxOrderByAggregateInput
    _min?: CompetitionAdminMinOrderByAggregateInput
    _sum?: CompetitionAdminSumOrderByAggregateInput
  }

  export type CompetitionAdminScalarWhereWithAggregatesInput = {
    AND?: CompetitionAdminScalarWhereWithAggregatesInput | CompetitionAdminScalarWhereWithAggregatesInput[]
    OR?: CompetitionAdminScalarWhereWithAggregatesInput[]
    NOT?: CompetitionAdminScalarWhereWithAggregatesInput | CompetitionAdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CompetitionAdmin"> | number
    competitionId?: StringWithAggregatesFilter<"CompetitionAdmin"> | string
    userId?: StringWithAggregatesFilter<"CompetitionAdmin"> | string
    role?: EnumCompetitionRoleWithAggregatesFilter<"CompetitionAdmin"> | $Enums.CompetitionRole
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    value?: StringFilter<"Category"> | string
    competitionCategories?: CompetitionCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    competitionCategories?: CompetitionCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    value?: string
    id_value?: CategoryIdValueCompoundUniqueInput
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    competitionCategories?: CompetitionCategoryListRelationFilter
  }, "id" | "value" | "id_value">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    value?: StringWithAggregatesFilter<"Category"> | string
  }

  export type CompetitionCategoryWhereInput = {
    AND?: CompetitionCategoryWhereInput | CompetitionCategoryWhereInput[]
    OR?: CompetitionCategoryWhereInput[]
    NOT?: CompetitionCategoryWhereInput | CompetitionCategoryWhereInput[]
    id?: IntFilter<"CompetitionCategory"> | number
    weights?: StringNullableListFilter<"CompetitionCategory">
    largestYearAllowed?: IntFilter<"CompetitionCategory"> | number
    smallestYearAllowed?: IntFilter<"CompetitionCategory"> | number
    sex?: EnumCompetitionCategorySexFilter<"CompetitionCategory"> | $Enums.CompetitionCategorySex
    competitionId?: StringFilter<"CompetitionCategory"> | string
    competitionName?: StringFilter<"CompetitionCategory"> | string
    competitionSlug?: StringFilter<"CompetitionCategory"> | string
    categoryId?: IntFilter<"CompetitionCategory"> | number
    categoryName?: StringFilter<"CompetitionCategory"> | string
    competition?: XOR<CompetitionNullableScalarRelationFilter, CompetitionWhereInput> | null
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    competitors?: CompetitorListRelationFilter
  }

  export type CompetitionCategoryOrderByWithRelationInput = {
    id?: SortOrder
    weights?: SortOrder
    largestYearAllowed?: SortOrder
    smallestYearAllowed?: SortOrder
    sex?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
    competition?: CompetitionOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    competitors?: CompetitorOrderByRelationAggregateInput
  }

  export type CompetitionCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    id_competitionId_competitionName_competitionSlug?: CompetitionCategoryIdCompetitionIdCompetitionNameCompetitionSlugCompoundUniqueInput
    AND?: CompetitionCategoryWhereInput | CompetitionCategoryWhereInput[]
    OR?: CompetitionCategoryWhereInput[]
    NOT?: CompetitionCategoryWhereInput | CompetitionCategoryWhereInput[]
    weights?: StringNullableListFilter<"CompetitionCategory">
    largestYearAllowed?: IntFilter<"CompetitionCategory"> | number
    smallestYearAllowed?: IntFilter<"CompetitionCategory"> | number
    sex?: EnumCompetitionCategorySexFilter<"CompetitionCategory"> | $Enums.CompetitionCategorySex
    competitionId?: StringFilter<"CompetitionCategory"> | string
    competitionName?: StringFilter<"CompetitionCategory"> | string
    competitionSlug?: StringFilter<"CompetitionCategory"> | string
    categoryId?: IntFilter<"CompetitionCategory"> | number
    categoryName?: StringFilter<"CompetitionCategory"> | string
    competition?: XOR<CompetitionNullableScalarRelationFilter, CompetitionWhereInput> | null
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    competitors?: CompetitorListRelationFilter
  }, "id" | "id_competitionId_competitionName_competitionSlug">

  export type CompetitionCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    weights?: SortOrder
    largestYearAllowed?: SortOrder
    smallestYearAllowed?: SortOrder
    sex?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
    _count?: CompetitionCategoryCountOrderByAggregateInput
    _avg?: CompetitionCategoryAvgOrderByAggregateInput
    _max?: CompetitionCategoryMaxOrderByAggregateInput
    _min?: CompetitionCategoryMinOrderByAggregateInput
    _sum?: CompetitionCategorySumOrderByAggregateInput
  }

  export type CompetitionCategoryScalarWhereWithAggregatesInput = {
    AND?: CompetitionCategoryScalarWhereWithAggregatesInput | CompetitionCategoryScalarWhereWithAggregatesInput[]
    OR?: CompetitionCategoryScalarWhereWithAggregatesInput[]
    NOT?: CompetitionCategoryScalarWhereWithAggregatesInput | CompetitionCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CompetitionCategory"> | number
    weights?: StringNullableListFilter<"CompetitionCategory">
    largestYearAllowed?: IntWithAggregatesFilter<"CompetitionCategory"> | number
    smallestYearAllowed?: IntWithAggregatesFilter<"CompetitionCategory"> | number
    sex?: EnumCompetitionCategorySexWithAggregatesFilter<"CompetitionCategory"> | $Enums.CompetitionCategorySex
    competitionId?: StringWithAggregatesFilter<"CompetitionCategory"> | string
    competitionName?: StringWithAggregatesFilter<"CompetitionCategory"> | string
    competitionSlug?: StringWithAggregatesFilter<"CompetitionCategory"> | string
    categoryId?: IntWithAggregatesFilter<"CompetitionCategory"> | number
    categoryName?: StringWithAggregatesFilter<"CompetitionCategory"> | string
  }

  export type CompetitorWhereInput = {
    AND?: CompetitorWhereInput | CompetitorWhereInput[]
    OR?: CompetitorWhereInput[]
    NOT?: CompetitorWhereInput | CompetitorWhereInput[]
    id?: IntFilter<"Competitor"> | number
    clubName?: StringFilter<"Competitor"> | string
    profileId?: StringFilter<"Competitor"> | string
    firstName?: StringFilter<"Competitor"> | string
    lastName?: StringFilter<"Competitor"> | string
    competitionCategoryId?: IntFilter<"Competitor"> | number
    competitionId?: StringFilter<"Competitor"> | string
    competitionName?: StringFilter<"Competitor"> | string
    competitionSlug?: StringFilter<"Competitor"> | string
    weight?: StringFilter<"Competitor"> | string
    createdAt?: DateTimeFilter<"Competitor"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Competitor"> | Date | string | null
    profile?: XOR<UserProfileScalarRelationFilter, UserProfileWhereInput>
    competitionCategory?: XOR<CompetitionCategoryScalarRelationFilter, CompetitionCategoryWhereInput>
  }

  export type CompetitorOrderByWithRelationInput = {
    id?: SortOrder
    clubName?: SortOrder
    profileId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    competitionCategoryId?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    profile?: UserProfileOrderByWithRelationInput
    competitionCategory?: CompetitionCategoryOrderByWithRelationInput
  }

  export type CompetitorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompetitorWhereInput | CompetitorWhereInput[]
    OR?: CompetitorWhereInput[]
    NOT?: CompetitorWhereInput | CompetitorWhereInput[]
    clubName?: StringFilter<"Competitor"> | string
    profileId?: StringFilter<"Competitor"> | string
    firstName?: StringFilter<"Competitor"> | string
    lastName?: StringFilter<"Competitor"> | string
    competitionCategoryId?: IntFilter<"Competitor"> | number
    competitionId?: StringFilter<"Competitor"> | string
    competitionName?: StringFilter<"Competitor"> | string
    competitionSlug?: StringFilter<"Competitor"> | string
    weight?: StringFilter<"Competitor"> | string
    createdAt?: DateTimeFilter<"Competitor"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Competitor"> | Date | string | null
    profile?: XOR<UserProfileScalarRelationFilter, UserProfileWhereInput>
    competitionCategory?: XOR<CompetitionCategoryScalarRelationFilter, CompetitionCategoryWhereInput>
  }, "id">

  export type CompetitorOrderByWithAggregationInput = {
    id?: SortOrder
    clubName?: SortOrder
    profileId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    competitionCategoryId?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: CompetitorCountOrderByAggregateInput
    _avg?: CompetitorAvgOrderByAggregateInput
    _max?: CompetitorMaxOrderByAggregateInput
    _min?: CompetitorMinOrderByAggregateInput
    _sum?: CompetitorSumOrderByAggregateInput
  }

  export type CompetitorScalarWhereWithAggregatesInput = {
    AND?: CompetitorScalarWhereWithAggregatesInput | CompetitorScalarWhereWithAggregatesInput[]
    OR?: CompetitorScalarWhereWithAggregatesInput[]
    NOT?: CompetitorScalarWhereWithAggregatesInput | CompetitorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Competitor"> | number
    clubName?: StringWithAggregatesFilter<"Competitor"> | string
    profileId?: StringWithAggregatesFilter<"Competitor"> | string
    firstName?: StringWithAggregatesFilter<"Competitor"> | string
    lastName?: StringWithAggregatesFilter<"Competitor"> | string
    competitionCategoryId?: IntWithAggregatesFilter<"Competitor"> | number
    competitionId?: StringWithAggregatesFilter<"Competitor"> | string
    competitionName?: StringWithAggregatesFilter<"Competitor"> | string
    competitionSlug?: StringWithAggregatesFilter<"Competitor"> | string
    weight?: StringWithAggregatesFilter<"Competitor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Competitor"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Competitor"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    token?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    token?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    token?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    competitionAdmins?: CompetitionAdminListRelationFilter
    userProfile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    competitionAdmins?: CompetitionAdminOrderByRelationAggregateInput
    userProfile?: UserProfileOrderByWithRelationInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    competitionAdmins?: CompetitionAdminListRelationFilter
    userProfile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    sessions?: SessionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    firstName?: StringNullableFilter<"UserProfile"> | string | null
    lastName?: StringNullableFilter<"UserProfile"> | string | null
    nationalId?: StringNullableFilter<"UserProfile"> | string | null
    nationalIdType?: StringNullableFilter<"UserProfile"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    sex?: EnumSexFilter<"UserProfile"> | $Enums.Sex
    userId?: StringNullableFilter<"UserProfile"> | string | null
    clubId?: StringNullableFilter<"UserProfile"> | string | null
    belt?: EnumBeltNullableFilter<"UserProfile"> | $Enums.Belt | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    club?: XOR<ClubNullableScalarRelationFilter, ClubWhereInput> | null
    participations?: CompetitorListRelationFilter
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    nationalId?: SortOrderInput | SortOrder
    nationalIdType?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    sex?: SortOrder
    userId?: SortOrderInput | SortOrder
    clubId?: SortOrderInput | SortOrder
    belt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    club?: ClubOrderByWithRelationInput
    participations?: CompetitorOrderByRelationAggregateInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nationalId?: string
    userId?: string
    id_firstName_lastName?: UserProfileIdFirstNameLastNameCompoundUniqueInput
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    firstName?: StringNullableFilter<"UserProfile"> | string | null
    lastName?: StringNullableFilter<"UserProfile"> | string | null
    nationalIdType?: StringNullableFilter<"UserProfile"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    sex?: EnumSexFilter<"UserProfile"> | $Enums.Sex
    clubId?: StringNullableFilter<"UserProfile"> | string | null
    belt?: EnumBeltNullableFilter<"UserProfile"> | $Enums.Belt | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    club?: XOR<ClubNullableScalarRelationFilter, ClubWhereInput> | null
    participations?: CompetitorListRelationFilter
  }, "id" | "nationalId" | "userId" | "id_firstName_lastName">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    nationalId?: SortOrderInput | SortOrder
    nationalIdType?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    sex?: SortOrder
    userId?: SortOrderInput | SortOrder
    clubId?: SortOrderInput | SortOrder
    belt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfile"> | string
    firstName?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    nationalId?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    nationalIdType?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"UserProfile"> | Date | string | null
    sex?: EnumSexWithAggregatesFilter<"UserProfile"> | $Enums.Sex
    userId?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    clubId?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    belt?: EnumBeltNullableWithAggregatesFilter<"UserProfile"> | $Enums.Belt | null
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type CampCreateInput = {
    id?: string
    name: string
    slug: string
    connectedCompetition?: CompetitionCreateNestedOneWithoutCampInput
  }

  export type CampUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    connectedCompetitionId?: string | null
  }

  export type CampUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    connectedCompetition?: CompetitionUpdateOneWithoutCampNestedInput
  }

  export type CampUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    connectedCompetitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CampCreateManyInput = {
    id?: string
    name: string
    slug: string
    connectedCompetitionId?: string | null
  }

  export type CampUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CampUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    connectedCompetitionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClubCreateInput = {
    id?: string
    name: string
    slug: string
    description: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubMetadata?: ClubMetadataCreateNestedOneWithoutClubInput
    userProfiles?: UserProfileCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubMetadata?: ClubMetadataUncheckedCreateNestedOneWithoutClubInput
    userProfiles?: UserProfileUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubMetadata?: ClubMetadataUpdateOneWithoutClubNestedInput
    userProfiles?: UserProfileUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubMetadata?: ClubMetadataUncheckedUpdateOneWithoutClubNestedInput
    userProfiles?: UserProfileUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubCreateManyInput = {
    id?: string
    name: string
    slug: string
    description: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubMetadataCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    club: ClubCreateNestedOneWithoutClubMetadataInput
  }

  export type ClubMetadataUncheckedCreateInput = {
    id?: string
    clubId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubMetadataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneRequiredWithoutClubMetadataNestedInput
  }

  export type ClubMetadataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubMetadataCreateManyInput = {
    id?: string
    clubId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubMetadataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubMetadataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetitionCreateInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CompetitionCategoryCreateNestedManyWithoutCompetitionInput
    camp?: CampCreateNestedOneWithoutConnectedCompetitionInput
    competitionAdmins?: CompetitionAdminCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CompetitionCategoryUncheckedCreateNestedManyWithoutCompetitionInput
    camp?: CampUncheckedCreateNestedOneWithoutConnectedCompetitionInput
    competitionAdmins?: CompetitionAdminUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CompetitionCategoryUpdateManyWithoutCompetitionNestedInput
    camp?: CampUpdateOneWithoutConnectedCompetitionNestedInput
    competitionAdmins?: CompetitionAdminUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CompetitionCategoryUncheckedUpdateManyWithoutCompetitionNestedInput
    camp?: CampUncheckedUpdateOneWithoutConnectedCompetitionNestedInput
    competitionAdmins?: CompetitionAdminUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionCreateManyInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompetitionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetitionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetitionAdminCreateInput = {
    role: $Enums.CompetitionRole
    competition: CompetitionCreateNestedOneWithoutCompetitionAdminsInput
    user: UserCreateNestedOneWithoutCompetitionAdminsInput
  }

  export type CompetitionAdminUncheckedCreateInput = {
    id?: number
    competitionId: string
    userId: string
    role: $Enums.CompetitionRole
  }

  export type CompetitionAdminUpdateInput = {
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
    competition?: CompetitionUpdateOneRequiredWithoutCompetitionAdminsNestedInput
    user?: UserUpdateOneRequiredWithoutCompetitionAdminsNestedInput
  }

  export type CompetitionAdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
  }

  export type CompetitionAdminCreateManyInput = {
    id?: number
    competitionId: string
    userId: string
    role: $Enums.CompetitionRole
  }

  export type CompetitionAdminUpdateManyMutationInput = {
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
  }

  export type CompetitionAdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
  }

  export type CategoryCreateInput = {
    value: string
    competitionCategories?: CompetitionCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    value: string
    competitionCategories?: CompetitionCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    competitionCategories?: CompetitionCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    competitionCategories?: CompetitionCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    value: string
  }

  export type CategoryUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionCategoryCreateInput = {
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competition?: CompetitionCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutCompetitionCategoriesInput
    competitors?: CompetitorCreateNestedManyWithoutCompetitionCategoryInput
  }

  export type CompetitionCategoryUncheckedCreateInput = {
    id?: number
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competitionId: string
    competitionName: string
    competitionSlug: string
    categoryId: number
    categoryName: string
    competitors?: CompetitorUncheckedCreateNestedManyWithoutCompetitionCategoryInput
  }

  export type CompetitionCategoryUpdateInput = {
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competition?: CompetitionUpdateOneWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCompetitionCategoriesNestedInput
    competitors?: CompetitorUpdateManyWithoutCompetitionCategoryNestedInput
  }

  export type CompetitionCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    competitors?: CompetitorUncheckedUpdateManyWithoutCompetitionCategoryNestedInput
  }

  export type CompetitionCategoryCreateManyInput = {
    id?: number
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competitionId: string
    competitionName: string
    competitionSlug: string
    categoryId: number
    categoryName: string
  }

  export type CompetitionCategoryUpdateManyMutationInput = {
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
  }

  export type CompetitionCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitorCreateInput = {
    clubName: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    profile: UserProfileCreateNestedOneWithoutParticipationsInput
    competitionCategory: CompetitionCategoryCreateNestedOneWithoutCompetitorsInput
  }

  export type CompetitorUncheckedCreateInput = {
    id?: number
    clubName: string
    profileId: string
    firstName: string
    lastName: string
    competitionCategoryId: number
    competitionId: string
    competitionName: string
    competitionSlug: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type CompetitorUpdateInput = {
    clubName?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneRequiredWithoutParticipationsNestedInput
    competitionCategory?: CompetitionCategoryUpdateOneRequiredWithoutCompetitorsNestedInput
  }

  export type CompetitorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubName?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    competitionCategoryId?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompetitorCreateManyInput = {
    id?: number
    clubName: string
    profileId: string
    firstName: string
    lastName: string
    competitionCategoryId: number
    competitionId: string
    competitionName: string
    competitionSlug: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type CompetitorUpdateManyMutationInput = {
    clubName?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompetitorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubName?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    competitionCategoryId?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    competitionAdmins?: CompetitionAdminCreateNestedManyWithoutUserInput
    userProfile?: UserProfileCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    competitionAdmins?: CompetitionAdminUncheckedCreateNestedManyWithoutUserInput
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    competitionAdmins?: CompetitionAdminUpdateManyWithoutUserNestedInput
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    competitionAdmins?: CompetitionAdminUncheckedUpdateManyWithoutUserNestedInput
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutUserProfileInput
    club?: ClubCreateNestedOneWithoutUserProfilesInput
    participations?: CompetitorCreateNestedManyWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    userId?: string | null
    clubId?: string | null
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: CompetitorUncheckedCreateNestedManyWithoutProfileInput
  }

  export type UserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutUserProfileNestedInput
    club?: ClubUpdateOneWithoutUserProfilesNestedInput
    participations?: CompetitorUpdateManyWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: CompetitorUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type UserProfileCreateManyInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    userId?: string | null
    clubId?: string | null
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CompetitionNullableScalarRelationFilter = {
    is?: CompetitionWhereInput | null
    isNot?: CompetitionWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CampCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    connectedCompetitionId?: SortOrder
  }

  export type CampMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    connectedCompetitionId?: SortOrder
  }

  export type CampMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    connectedCompetitionId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ClubMetadataNullableScalarRelationFilter = {
    is?: ClubMetadataWhereInput | null
    isNot?: ClubMetadataWhereInput | null
  }

  export type UserProfileListRelationFilter = {
    every?: UserProfileWhereInput
    some?: UserProfileWhereInput
    none?: UserProfileWhereInput
  }

  export type UserProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ClubScalarRelationFilter = {
    is?: ClubWhereInput
    isNot?: ClubWhereInput
  }

  export type ClubMetadataCountOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubMetadataMaxOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubMetadataMinOrderByAggregateInput = {
    id?: SortOrder
    clubId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CompetitionCategoryListRelationFilter = {
    every?: CompetitionCategoryWhereInput
    some?: CompetitionCategoryWhereInput
    none?: CompetitionCategoryWhereInput
  }

  export type CampNullableScalarRelationFilter = {
    is?: CampWhereInput | null
    isNot?: CampWhereInput | null
  }

  export type CompetitionAdminListRelationFilter = {
    every?: CompetitionAdminWhereInput
    some?: CompetitionAdminWhereInput
    none?: CompetitionAdminWhereInput
  }

  export type CompetitionCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompetitionAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompetitionIdNameSlugCompoundUniqueInput = {
    id: string
    name: string
    slug: string
  }

  export type CompetitionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    clubName?: SortOrder
    isPublished?: SortOrder
    isArchived?: SortOrder
    description?: SortOrder
    startingAt?: SortOrder
    location?: SortOrder
    additionalInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetitionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    clubName?: SortOrder
    isPublished?: SortOrder
    isArchived?: SortOrder
    description?: SortOrder
    startingAt?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetitionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    clubName?: SortOrder
    isPublished?: SortOrder
    isArchived?: SortOrder
    description?: SortOrder
    startingAt?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumCompetitionRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionRole | EnumCompetitionRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionRoleFilter<$PrismaModel> | $Enums.CompetitionRole
  }

  export type CompetitionScalarRelationFilter = {
    is?: CompetitionWhereInput
    isNot?: CompetitionWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CompetitionAdminCompetitionIdUserIdCompoundUniqueInput = {
    competitionId: string
    userId: string
  }

  export type CompetitionAdminCountOrderByAggregateInput = {
    id?: SortOrder
    competitionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type CompetitionAdminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompetitionAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    competitionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type CompetitionAdminMinOrderByAggregateInput = {
    id?: SortOrder
    competitionId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type CompetitionAdminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumCompetitionRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionRole | EnumCompetitionRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionRoleWithAggregatesFilter<$PrismaModel> | $Enums.CompetitionRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompetitionRoleFilter<$PrismaModel>
    _max?: NestedEnumCompetitionRoleFilter<$PrismaModel>
  }

  export type CategoryIdValueCompoundUniqueInput = {
    id: number
    value: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumCompetitionCategorySexFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionCategorySex | EnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionCategorySexFilter<$PrismaModel> | $Enums.CompetitionCategorySex
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CompetitorListRelationFilter = {
    every?: CompetitorWhereInput
    some?: CompetitorWhereInput
    none?: CompetitorWhereInput
  }

  export type CompetitorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompetitionCategoryIdCompetitionIdCompetitionNameCompetitionSlugCompoundUniqueInput = {
    id: number
    competitionId: string
    competitionName: string
    competitionSlug: string
  }

  export type CompetitionCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    weights?: SortOrder
    largestYearAllowed?: SortOrder
    smallestYearAllowed?: SortOrder
    sex?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
  }

  export type CompetitionCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    largestYearAllowed?: SortOrder
    smallestYearAllowed?: SortOrder
    categoryId?: SortOrder
  }

  export type CompetitionCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    largestYearAllowed?: SortOrder
    smallestYearAllowed?: SortOrder
    sex?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
  }

  export type CompetitionCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    largestYearAllowed?: SortOrder
    smallestYearAllowed?: SortOrder
    sex?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
  }

  export type CompetitionCategorySumOrderByAggregateInput = {
    id?: SortOrder
    largestYearAllowed?: SortOrder
    smallestYearAllowed?: SortOrder
    categoryId?: SortOrder
  }

  export type EnumCompetitionCategorySexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionCategorySex | EnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionCategorySexWithAggregatesFilter<$PrismaModel> | $Enums.CompetitionCategorySex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompetitionCategorySexFilter<$PrismaModel>
    _max?: NestedEnumCompetitionCategorySexFilter<$PrismaModel>
  }

  export type UserProfileScalarRelationFilter = {
    is?: UserProfileWhereInput
    isNot?: UserProfileWhereInput
  }

  export type CompetitionCategoryScalarRelationFilter = {
    is?: CompetitionCategoryWhereInput
    isNot?: CompetitionCategoryWhereInput
  }

  export type CompetitorCountOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
    profileId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    competitionCategoryId?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetitorAvgOrderByAggregateInput = {
    id?: SortOrder
    competitionCategoryId?: SortOrder
  }

  export type CompetitorMaxOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
    profileId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    competitionCategoryId?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetitorMinOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
    profileId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    competitionCategoryId?: SortOrder
    competitionId?: SortOrder
    competitionName?: SortOrder
    competitionSlug?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetitorSumOrderByAggregateInput = {
    id?: SortOrder
    competitionCategoryId?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserProfileNullableScalarRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type EnumBeltNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Belt | EnumBeltFieldRefInput<$PrismaModel> | null
    in?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBeltNullableFilter<$PrismaModel> | $Enums.Belt | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ClubNullableScalarRelationFilter = {
    is?: ClubWhereInput | null
    isNot?: ClubWhereInput | null
  }

  export type UserProfileIdFirstNameLastNameCompoundUniqueInput = {
    id: string
    firstName: string
    lastName: string
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nationalId?: SortOrder
    nationalIdType?: SortOrder
    dateOfBirth?: SortOrder
    sex?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    belt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nationalId?: SortOrder
    nationalIdType?: SortOrder
    dateOfBirth?: SortOrder
    sex?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    belt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    nationalId?: SortOrder
    nationalIdType?: SortOrder
    dateOfBirth?: SortOrder
    sex?: SortOrder
    userId?: SortOrder
    clubId?: SortOrder
    belt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type EnumBeltNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Belt | EnumBeltFieldRefInput<$PrismaModel> | null
    in?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBeltNullableWithAggregatesFilter<$PrismaModel> | $Enums.Belt | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBeltNullableFilter<$PrismaModel>
    _max?: NestedEnumBeltNullableFilter<$PrismaModel>
  }

  export type CompetitionCreateNestedOneWithoutCampInput = {
    create?: XOR<CompetitionCreateWithoutCampInput, CompetitionUncheckedCreateWithoutCampInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCampInput
    connect?: CompetitionWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CompetitionUpdateOneWithoutCampNestedInput = {
    create?: XOR<CompetitionCreateWithoutCampInput, CompetitionUncheckedCreateWithoutCampInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCampInput
    upsert?: CompetitionUpsertWithoutCampInput
    disconnect?: CompetitionWhereInput | boolean
    delete?: CompetitionWhereInput | boolean
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutCampInput, CompetitionUpdateWithoutCampInput>, CompetitionUncheckedUpdateWithoutCampInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ClubMetadataCreateNestedOneWithoutClubInput = {
    create?: XOR<ClubMetadataCreateWithoutClubInput, ClubMetadataUncheckedCreateWithoutClubInput>
    connectOrCreate?: ClubMetadataCreateOrConnectWithoutClubInput
    connect?: ClubMetadataWhereUniqueInput
  }

  export type UserProfileCreateNestedManyWithoutClubInput = {
    create?: XOR<UserProfileCreateWithoutClubInput, UserProfileUncheckedCreateWithoutClubInput> | UserProfileCreateWithoutClubInput[] | UserProfileUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutClubInput | UserProfileCreateOrConnectWithoutClubInput[]
    createMany?: UserProfileCreateManyClubInputEnvelope
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
  }

  export type ClubMetadataUncheckedCreateNestedOneWithoutClubInput = {
    create?: XOR<ClubMetadataCreateWithoutClubInput, ClubMetadataUncheckedCreateWithoutClubInput>
    connectOrCreate?: ClubMetadataCreateOrConnectWithoutClubInput
    connect?: ClubMetadataWhereUniqueInput
  }

  export type UserProfileUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<UserProfileCreateWithoutClubInput, UserProfileUncheckedCreateWithoutClubInput> | UserProfileCreateWithoutClubInput[] | UserProfileUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutClubInput | UserProfileCreateOrConnectWithoutClubInput[]
    createMany?: UserProfileCreateManyClubInputEnvelope
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ClubMetadataUpdateOneWithoutClubNestedInput = {
    create?: XOR<ClubMetadataCreateWithoutClubInput, ClubMetadataUncheckedCreateWithoutClubInput>
    connectOrCreate?: ClubMetadataCreateOrConnectWithoutClubInput
    upsert?: ClubMetadataUpsertWithoutClubInput
    disconnect?: ClubMetadataWhereInput | boolean
    delete?: ClubMetadataWhereInput | boolean
    connect?: ClubMetadataWhereUniqueInput
    update?: XOR<XOR<ClubMetadataUpdateToOneWithWhereWithoutClubInput, ClubMetadataUpdateWithoutClubInput>, ClubMetadataUncheckedUpdateWithoutClubInput>
  }

  export type UserProfileUpdateManyWithoutClubNestedInput = {
    create?: XOR<UserProfileCreateWithoutClubInput, UserProfileUncheckedCreateWithoutClubInput> | UserProfileCreateWithoutClubInput[] | UserProfileUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutClubInput | UserProfileCreateOrConnectWithoutClubInput[]
    upsert?: UserProfileUpsertWithWhereUniqueWithoutClubInput | UserProfileUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: UserProfileCreateManyClubInputEnvelope
    set?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    disconnect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    delete?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    update?: UserProfileUpdateWithWhereUniqueWithoutClubInput | UserProfileUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: UserProfileUpdateManyWithWhereWithoutClubInput | UserProfileUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
  }

  export type ClubMetadataUncheckedUpdateOneWithoutClubNestedInput = {
    create?: XOR<ClubMetadataCreateWithoutClubInput, ClubMetadataUncheckedCreateWithoutClubInput>
    connectOrCreate?: ClubMetadataCreateOrConnectWithoutClubInput
    upsert?: ClubMetadataUpsertWithoutClubInput
    disconnect?: ClubMetadataWhereInput | boolean
    delete?: ClubMetadataWhereInput | boolean
    connect?: ClubMetadataWhereUniqueInput
    update?: XOR<XOR<ClubMetadataUpdateToOneWithWhereWithoutClubInput, ClubMetadataUpdateWithoutClubInput>, ClubMetadataUncheckedUpdateWithoutClubInput>
  }

  export type UserProfileUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<UserProfileCreateWithoutClubInput, UserProfileUncheckedCreateWithoutClubInput> | UserProfileCreateWithoutClubInput[] | UserProfileUncheckedCreateWithoutClubInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutClubInput | UserProfileCreateOrConnectWithoutClubInput[]
    upsert?: UserProfileUpsertWithWhereUniqueWithoutClubInput | UserProfileUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: UserProfileCreateManyClubInputEnvelope
    set?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    disconnect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    delete?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    update?: UserProfileUpdateWithWhereUniqueWithoutClubInput | UserProfileUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: UserProfileUpdateManyWithWhereWithoutClubInput | UserProfileUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
  }

  export type ClubCreateNestedOneWithoutClubMetadataInput = {
    create?: XOR<ClubCreateWithoutClubMetadataInput, ClubUncheckedCreateWithoutClubMetadataInput>
    connectOrCreate?: ClubCreateOrConnectWithoutClubMetadataInput
    connect?: ClubWhereUniqueInput
  }

  export type ClubUpdateOneRequiredWithoutClubMetadataNestedInput = {
    create?: XOR<ClubCreateWithoutClubMetadataInput, ClubUncheckedCreateWithoutClubMetadataInput>
    connectOrCreate?: ClubCreateOrConnectWithoutClubMetadataInput
    upsert?: ClubUpsertWithoutClubMetadataInput
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutClubMetadataInput, ClubUpdateWithoutClubMetadataInput>, ClubUncheckedUpdateWithoutClubMetadataInput>
  }

  export type CompetitionCategoryCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCompetitionInput, CompetitionCategoryUncheckedCreateWithoutCompetitionInput> | CompetitionCategoryCreateWithoutCompetitionInput[] | CompetitionCategoryUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCompetitionInput | CompetitionCategoryCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionCategoryCreateManyCompetitionInputEnvelope
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
  }

  export type CampCreateNestedOneWithoutConnectedCompetitionInput = {
    create?: XOR<CampCreateWithoutConnectedCompetitionInput, CampUncheckedCreateWithoutConnectedCompetitionInput>
    connectOrCreate?: CampCreateOrConnectWithoutConnectedCompetitionInput
    connect?: CampWhereUniqueInput
  }

  export type CompetitionAdminCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionAdminCreateWithoutCompetitionInput, CompetitionAdminUncheckedCreateWithoutCompetitionInput> | CompetitionAdminCreateWithoutCompetitionInput[] | CompetitionAdminUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutCompetitionInput | CompetitionAdminCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionAdminCreateManyCompetitionInputEnvelope
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
  }

  export type CompetitionCategoryUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCompetitionInput, CompetitionCategoryUncheckedCreateWithoutCompetitionInput> | CompetitionCategoryCreateWithoutCompetitionInput[] | CompetitionCategoryUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCompetitionInput | CompetitionCategoryCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionCategoryCreateManyCompetitionInputEnvelope
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
  }

  export type CampUncheckedCreateNestedOneWithoutConnectedCompetitionInput = {
    create?: XOR<CampCreateWithoutConnectedCompetitionInput, CampUncheckedCreateWithoutConnectedCompetitionInput>
    connectOrCreate?: CampCreateOrConnectWithoutConnectedCompetitionInput
    connect?: CampWhereUniqueInput
  }

  export type CompetitionAdminUncheckedCreateNestedManyWithoutCompetitionInput = {
    create?: XOR<CompetitionAdminCreateWithoutCompetitionInput, CompetitionAdminUncheckedCreateWithoutCompetitionInput> | CompetitionAdminCreateWithoutCompetitionInput[] | CompetitionAdminUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutCompetitionInput | CompetitionAdminCreateOrConnectWithoutCompetitionInput[]
    createMany?: CompetitionAdminCreateManyCompetitionInputEnvelope
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CompetitionCategoryUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCompetitionInput, CompetitionCategoryUncheckedCreateWithoutCompetitionInput> | CompetitionCategoryCreateWithoutCompetitionInput[] | CompetitionCategoryUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCompetitionInput | CompetitionCategoryCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionCategoryUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionCategoryUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionCategoryCreateManyCompetitionInputEnvelope
    set?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    disconnect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    delete?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    update?: CompetitionCategoryUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionCategoryUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionCategoryUpdateManyWithWhereWithoutCompetitionInput | CompetitionCategoryUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionCategoryScalarWhereInput | CompetitionCategoryScalarWhereInput[]
  }

  export type CampUpdateOneWithoutConnectedCompetitionNestedInput = {
    create?: XOR<CampCreateWithoutConnectedCompetitionInput, CampUncheckedCreateWithoutConnectedCompetitionInput>
    connectOrCreate?: CampCreateOrConnectWithoutConnectedCompetitionInput
    upsert?: CampUpsertWithoutConnectedCompetitionInput
    disconnect?: CampWhereInput | boolean
    delete?: CampWhereInput | boolean
    connect?: CampWhereUniqueInput
    update?: XOR<XOR<CampUpdateToOneWithWhereWithoutConnectedCompetitionInput, CampUpdateWithoutConnectedCompetitionInput>, CampUncheckedUpdateWithoutConnectedCompetitionInput>
  }

  export type CompetitionAdminUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionAdminCreateWithoutCompetitionInput, CompetitionAdminUncheckedCreateWithoutCompetitionInput> | CompetitionAdminCreateWithoutCompetitionInput[] | CompetitionAdminUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutCompetitionInput | CompetitionAdminCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionAdminUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionAdminUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionAdminCreateManyCompetitionInputEnvelope
    set?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    disconnect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    delete?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    update?: CompetitionAdminUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionAdminUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionAdminUpdateManyWithWhereWithoutCompetitionInput | CompetitionAdminUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionAdminScalarWhereInput | CompetitionAdminScalarWhereInput[]
  }

  export type CompetitionCategoryUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCompetitionInput, CompetitionCategoryUncheckedCreateWithoutCompetitionInput> | CompetitionCategoryCreateWithoutCompetitionInput[] | CompetitionCategoryUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCompetitionInput | CompetitionCategoryCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionCategoryUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionCategoryUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionCategoryCreateManyCompetitionInputEnvelope
    set?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    disconnect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    delete?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    update?: CompetitionCategoryUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionCategoryUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionCategoryUpdateManyWithWhereWithoutCompetitionInput | CompetitionCategoryUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionCategoryScalarWhereInput | CompetitionCategoryScalarWhereInput[]
  }

  export type CampUncheckedUpdateOneWithoutConnectedCompetitionNestedInput = {
    create?: XOR<CampCreateWithoutConnectedCompetitionInput, CampUncheckedCreateWithoutConnectedCompetitionInput>
    connectOrCreate?: CampCreateOrConnectWithoutConnectedCompetitionInput
    upsert?: CampUpsertWithoutConnectedCompetitionInput
    disconnect?: CampWhereInput | boolean
    delete?: CampWhereInput | boolean
    connect?: CampWhereUniqueInput
    update?: XOR<XOR<CampUpdateToOneWithWhereWithoutConnectedCompetitionInput, CampUpdateWithoutConnectedCompetitionInput>, CampUncheckedUpdateWithoutConnectedCompetitionInput>
  }

  export type CompetitionAdminUncheckedUpdateManyWithoutCompetitionNestedInput = {
    create?: XOR<CompetitionAdminCreateWithoutCompetitionInput, CompetitionAdminUncheckedCreateWithoutCompetitionInput> | CompetitionAdminCreateWithoutCompetitionInput[] | CompetitionAdminUncheckedCreateWithoutCompetitionInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutCompetitionInput | CompetitionAdminCreateOrConnectWithoutCompetitionInput[]
    upsert?: CompetitionAdminUpsertWithWhereUniqueWithoutCompetitionInput | CompetitionAdminUpsertWithWhereUniqueWithoutCompetitionInput[]
    createMany?: CompetitionAdminCreateManyCompetitionInputEnvelope
    set?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    disconnect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    delete?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    update?: CompetitionAdminUpdateWithWhereUniqueWithoutCompetitionInput | CompetitionAdminUpdateWithWhereUniqueWithoutCompetitionInput[]
    updateMany?: CompetitionAdminUpdateManyWithWhereWithoutCompetitionInput | CompetitionAdminUpdateManyWithWhereWithoutCompetitionInput[]
    deleteMany?: CompetitionAdminScalarWhereInput | CompetitionAdminScalarWhereInput[]
  }

  export type CompetitionCreateNestedOneWithoutCompetitionAdminsInput = {
    create?: XOR<CompetitionCreateWithoutCompetitionAdminsInput, CompetitionUncheckedCreateWithoutCompetitionAdminsInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCompetitionAdminsInput
    connect?: CompetitionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCompetitionAdminsInput = {
    create?: XOR<UserCreateWithoutCompetitionAdminsInput, UserUncheckedCreateWithoutCompetitionAdminsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompetitionAdminsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCompetitionRoleFieldUpdateOperationsInput = {
    set?: $Enums.CompetitionRole
  }

  export type CompetitionUpdateOneRequiredWithoutCompetitionAdminsNestedInput = {
    create?: XOR<CompetitionCreateWithoutCompetitionAdminsInput, CompetitionUncheckedCreateWithoutCompetitionAdminsInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCompetitionAdminsInput
    upsert?: CompetitionUpsertWithoutCompetitionAdminsInput
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutCompetitionAdminsInput, CompetitionUpdateWithoutCompetitionAdminsInput>, CompetitionUncheckedUpdateWithoutCompetitionAdminsInput>
  }

  export type UserUpdateOneRequiredWithoutCompetitionAdminsNestedInput = {
    create?: XOR<UserCreateWithoutCompetitionAdminsInput, UserUncheckedCreateWithoutCompetitionAdminsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompetitionAdminsInput
    upsert?: UserUpsertWithoutCompetitionAdminsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompetitionAdminsInput, UserUpdateWithoutCompetitionAdminsInput>, UserUncheckedUpdateWithoutCompetitionAdminsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompetitionCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCategoryInput, CompetitionCategoryUncheckedCreateWithoutCategoryInput> | CompetitionCategoryCreateWithoutCategoryInput[] | CompetitionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCategoryInput | CompetitionCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: CompetitionCategoryCreateManyCategoryInputEnvelope
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
  }

  export type CompetitionCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCategoryInput, CompetitionCategoryUncheckedCreateWithoutCategoryInput> | CompetitionCategoryCreateWithoutCategoryInput[] | CompetitionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCategoryInput | CompetitionCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: CompetitionCategoryCreateManyCategoryInputEnvelope
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
  }

  export type CompetitionCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCategoryInput, CompetitionCategoryUncheckedCreateWithoutCategoryInput> | CompetitionCategoryCreateWithoutCategoryInput[] | CompetitionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCategoryInput | CompetitionCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: CompetitionCategoryUpsertWithWhereUniqueWithoutCategoryInput | CompetitionCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CompetitionCategoryCreateManyCategoryInputEnvelope
    set?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    disconnect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    delete?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    update?: CompetitionCategoryUpdateWithWhereUniqueWithoutCategoryInput | CompetitionCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CompetitionCategoryUpdateManyWithWhereWithoutCategoryInput | CompetitionCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CompetitionCategoryScalarWhereInput | CompetitionCategoryScalarWhereInput[]
  }

  export type CompetitionCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCategoryInput, CompetitionCategoryUncheckedCreateWithoutCategoryInput> | CompetitionCategoryCreateWithoutCategoryInput[] | CompetitionCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCategoryInput | CompetitionCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: CompetitionCategoryUpsertWithWhereUniqueWithoutCategoryInput | CompetitionCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CompetitionCategoryCreateManyCategoryInputEnvelope
    set?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    disconnect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    delete?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    connect?: CompetitionCategoryWhereUniqueInput | CompetitionCategoryWhereUniqueInput[]
    update?: CompetitionCategoryUpdateWithWhereUniqueWithoutCategoryInput | CompetitionCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CompetitionCategoryUpdateManyWithWhereWithoutCategoryInput | CompetitionCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CompetitionCategoryScalarWhereInput | CompetitionCategoryScalarWhereInput[]
  }

  export type CompetitionCategoryCreateweightsInput = {
    set: string[]
  }

  export type CompetitionCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<CompetitionCreateWithoutCategoriesInput, CompetitionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCategoriesInput
    connect?: CompetitionWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutCompetitionCategoriesInput = {
    create?: XOR<CategoryCreateWithoutCompetitionCategoriesInput, CategoryUncheckedCreateWithoutCompetitionCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCompetitionCategoriesInput
    connect?: CategoryWhereUniqueInput
  }

  export type CompetitorCreateNestedManyWithoutCompetitionCategoryInput = {
    create?: XOR<CompetitorCreateWithoutCompetitionCategoryInput, CompetitorUncheckedCreateWithoutCompetitionCategoryInput> | CompetitorCreateWithoutCompetitionCategoryInput[] | CompetitorUncheckedCreateWithoutCompetitionCategoryInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutCompetitionCategoryInput | CompetitorCreateOrConnectWithoutCompetitionCategoryInput[]
    createMany?: CompetitorCreateManyCompetitionCategoryInputEnvelope
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
  }

  export type CompetitorUncheckedCreateNestedManyWithoutCompetitionCategoryInput = {
    create?: XOR<CompetitorCreateWithoutCompetitionCategoryInput, CompetitorUncheckedCreateWithoutCompetitionCategoryInput> | CompetitorCreateWithoutCompetitionCategoryInput[] | CompetitorUncheckedCreateWithoutCompetitionCategoryInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutCompetitionCategoryInput | CompetitorCreateOrConnectWithoutCompetitionCategoryInput[]
    createMany?: CompetitorCreateManyCompetitionCategoryInputEnvelope
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
  }

  export type CompetitionCategoryUpdateweightsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumCompetitionCategorySexFieldUpdateOperationsInput = {
    set?: $Enums.CompetitionCategorySex
  }

  export type CompetitionUpdateOneWithoutCategoriesNestedInput = {
    create?: XOR<CompetitionCreateWithoutCategoriesInput, CompetitionUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CompetitionCreateOrConnectWithoutCategoriesInput
    upsert?: CompetitionUpsertWithoutCategoriesInput
    disconnect?: CompetitionWhereInput | boolean
    delete?: CompetitionWhereInput | boolean
    connect?: CompetitionWhereUniqueInput
    update?: XOR<XOR<CompetitionUpdateToOneWithWhereWithoutCategoriesInput, CompetitionUpdateWithoutCategoriesInput>, CompetitionUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryUpdateOneRequiredWithoutCompetitionCategoriesNestedInput = {
    create?: XOR<CategoryCreateWithoutCompetitionCategoriesInput, CategoryUncheckedCreateWithoutCompetitionCategoriesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCompetitionCategoriesInput
    upsert?: CategoryUpsertWithoutCompetitionCategoriesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutCompetitionCategoriesInput, CategoryUpdateWithoutCompetitionCategoriesInput>, CategoryUncheckedUpdateWithoutCompetitionCategoriesInput>
  }

  export type CompetitorUpdateManyWithoutCompetitionCategoryNestedInput = {
    create?: XOR<CompetitorCreateWithoutCompetitionCategoryInput, CompetitorUncheckedCreateWithoutCompetitionCategoryInput> | CompetitorCreateWithoutCompetitionCategoryInput[] | CompetitorUncheckedCreateWithoutCompetitionCategoryInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutCompetitionCategoryInput | CompetitorCreateOrConnectWithoutCompetitionCategoryInput[]
    upsert?: CompetitorUpsertWithWhereUniqueWithoutCompetitionCategoryInput | CompetitorUpsertWithWhereUniqueWithoutCompetitionCategoryInput[]
    createMany?: CompetitorCreateManyCompetitionCategoryInputEnvelope
    set?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    disconnect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    delete?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    update?: CompetitorUpdateWithWhereUniqueWithoutCompetitionCategoryInput | CompetitorUpdateWithWhereUniqueWithoutCompetitionCategoryInput[]
    updateMany?: CompetitorUpdateManyWithWhereWithoutCompetitionCategoryInput | CompetitorUpdateManyWithWhereWithoutCompetitionCategoryInput[]
    deleteMany?: CompetitorScalarWhereInput | CompetitorScalarWhereInput[]
  }

  export type CompetitorUncheckedUpdateManyWithoutCompetitionCategoryNestedInput = {
    create?: XOR<CompetitorCreateWithoutCompetitionCategoryInput, CompetitorUncheckedCreateWithoutCompetitionCategoryInput> | CompetitorCreateWithoutCompetitionCategoryInput[] | CompetitorUncheckedCreateWithoutCompetitionCategoryInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutCompetitionCategoryInput | CompetitorCreateOrConnectWithoutCompetitionCategoryInput[]
    upsert?: CompetitorUpsertWithWhereUniqueWithoutCompetitionCategoryInput | CompetitorUpsertWithWhereUniqueWithoutCompetitionCategoryInput[]
    createMany?: CompetitorCreateManyCompetitionCategoryInputEnvelope
    set?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    disconnect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    delete?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    update?: CompetitorUpdateWithWhereUniqueWithoutCompetitionCategoryInput | CompetitorUpdateWithWhereUniqueWithoutCompetitionCategoryInput[]
    updateMany?: CompetitorUpdateManyWithWhereWithoutCompetitionCategoryInput | CompetitorUpdateManyWithWhereWithoutCompetitionCategoryInput[]
    deleteMany?: CompetitorScalarWhereInput | CompetitorScalarWhereInput[]
  }

  export type UserProfileCreateNestedOneWithoutParticipationsInput = {
    create?: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutParticipationsInput
    connect?: UserProfileWhereUniqueInput
  }

  export type CompetitionCategoryCreateNestedOneWithoutCompetitorsInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCompetitorsInput, CompetitionCategoryUncheckedCreateWithoutCompetitorsInput>
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCompetitorsInput
    connect?: CompetitionCategoryWhereUniqueInput
  }

  export type UserProfileUpdateOneRequiredWithoutParticipationsNestedInput = {
    create?: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutParticipationsInput
    upsert?: UserProfileUpsertWithoutParticipationsInput
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutParticipationsInput, UserProfileUpdateWithoutParticipationsInput>, UserProfileUncheckedUpdateWithoutParticipationsInput>
  }

  export type CompetitionCategoryUpdateOneRequiredWithoutCompetitorsNestedInput = {
    create?: XOR<CompetitionCategoryCreateWithoutCompetitorsInput, CompetitionCategoryUncheckedCreateWithoutCompetitorsInput>
    connectOrCreate?: CompetitionCategoryCreateOrConnectWithoutCompetitorsInput
    upsert?: CompetitionCategoryUpsertWithoutCompetitorsInput
    connect?: CompetitionCategoryWhereUniqueInput
    update?: XOR<XOR<CompetitionCategoryUpdateToOneWithWhereWithoutCompetitorsInput, CompetitionCategoryUpdateWithoutCompetitorsInput>, CompetitionCategoryUncheckedUpdateWithoutCompetitorsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type CompetitionAdminCreateNestedManyWithoutUserInput = {
    create?: XOR<CompetitionAdminCreateWithoutUserInput, CompetitionAdminUncheckedCreateWithoutUserInput> | CompetitionAdminCreateWithoutUserInput[] | CompetitionAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutUserInput | CompetitionAdminCreateOrConnectWithoutUserInput[]
    createMany?: CompetitionAdminCreateManyUserInputEnvelope
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CompetitionAdminUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CompetitionAdminCreateWithoutUserInput, CompetitionAdminUncheckedCreateWithoutUserInput> | CompetitionAdminCreateWithoutUserInput[] | CompetitionAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutUserInput | CompetitionAdminCreateOrConnectWithoutUserInput[]
    createMany?: CompetitionAdminCreateManyUserInputEnvelope
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CompetitionAdminUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompetitionAdminCreateWithoutUserInput, CompetitionAdminUncheckedCreateWithoutUserInput> | CompetitionAdminCreateWithoutUserInput[] | CompetitionAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutUserInput | CompetitionAdminCreateOrConnectWithoutUserInput[]
    upsert?: CompetitionAdminUpsertWithWhereUniqueWithoutUserInput | CompetitionAdminUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompetitionAdminCreateManyUserInputEnvelope
    set?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    disconnect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    delete?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    update?: CompetitionAdminUpdateWithWhereUniqueWithoutUserInput | CompetitionAdminUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompetitionAdminUpdateManyWithWhereWithoutUserInput | CompetitionAdminUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompetitionAdminScalarWhereInput | CompetitionAdminScalarWhereInput[]
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CompetitionAdminUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompetitionAdminCreateWithoutUserInput, CompetitionAdminUncheckedCreateWithoutUserInput> | CompetitionAdminCreateWithoutUserInput[] | CompetitionAdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompetitionAdminCreateOrConnectWithoutUserInput | CompetitionAdminCreateOrConnectWithoutUserInput[]
    upsert?: CompetitionAdminUpsertWithWhereUniqueWithoutUserInput | CompetitionAdminUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompetitionAdminCreateManyUserInputEnvelope
    set?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    disconnect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    delete?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    connect?: CompetitionAdminWhereUniqueInput | CompetitionAdminWhereUniqueInput[]
    update?: CompetitionAdminUpdateWithWhereUniqueWithoutUserInput | CompetitionAdminUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompetitionAdminUpdateManyWithWhereWithoutUserInput | CompetitionAdminUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompetitionAdminScalarWhereInput | CompetitionAdminScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserProfileInput = {
    create?: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileInput
    connect?: UserWhereUniqueInput
  }

  export type ClubCreateNestedOneWithoutUserProfilesInput = {
    create?: XOR<ClubCreateWithoutUserProfilesInput, ClubUncheckedCreateWithoutUserProfilesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutUserProfilesInput
    connect?: ClubWhereUniqueInput
  }

  export type CompetitorCreateNestedManyWithoutProfileInput = {
    create?: XOR<CompetitorCreateWithoutProfileInput, CompetitorUncheckedCreateWithoutProfileInput> | CompetitorCreateWithoutProfileInput[] | CompetitorUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutProfileInput | CompetitorCreateOrConnectWithoutProfileInput[]
    createMany?: CompetitorCreateManyProfileInputEnvelope
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
  }

  export type CompetitorUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<CompetitorCreateWithoutProfileInput, CompetitorUncheckedCreateWithoutProfileInput> | CompetitorCreateWithoutProfileInput[] | CompetitorUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutProfileInput | CompetitorCreateOrConnectWithoutProfileInput[]
    createMany?: CompetitorCreateManyProfileInputEnvelope
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
  }

  export type EnumSexFieldUpdateOperationsInput = {
    set?: $Enums.Sex
  }

  export type NullableEnumBeltFieldUpdateOperationsInput = {
    set?: $Enums.Belt | null
  }

  export type UserUpdateOneWithoutUserProfileNestedInput = {
    create?: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProfileInput
    upsert?: UserUpsertWithoutUserProfileInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserProfileInput, UserUpdateWithoutUserProfileInput>, UserUncheckedUpdateWithoutUserProfileInput>
  }

  export type ClubUpdateOneWithoutUserProfilesNestedInput = {
    create?: XOR<ClubCreateWithoutUserProfilesInput, ClubUncheckedCreateWithoutUserProfilesInput>
    connectOrCreate?: ClubCreateOrConnectWithoutUserProfilesInput
    upsert?: ClubUpsertWithoutUserProfilesInput
    disconnect?: ClubWhereInput | boolean
    delete?: ClubWhereInput | boolean
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutUserProfilesInput, ClubUpdateWithoutUserProfilesInput>, ClubUncheckedUpdateWithoutUserProfilesInput>
  }

  export type CompetitorUpdateManyWithoutProfileNestedInput = {
    create?: XOR<CompetitorCreateWithoutProfileInput, CompetitorUncheckedCreateWithoutProfileInput> | CompetitorCreateWithoutProfileInput[] | CompetitorUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutProfileInput | CompetitorCreateOrConnectWithoutProfileInput[]
    upsert?: CompetitorUpsertWithWhereUniqueWithoutProfileInput | CompetitorUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: CompetitorCreateManyProfileInputEnvelope
    set?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    disconnect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    delete?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    update?: CompetitorUpdateWithWhereUniqueWithoutProfileInput | CompetitorUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: CompetitorUpdateManyWithWhereWithoutProfileInput | CompetitorUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: CompetitorScalarWhereInput | CompetitorScalarWhereInput[]
  }

  export type CompetitorUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<CompetitorCreateWithoutProfileInput, CompetitorUncheckedCreateWithoutProfileInput> | CompetitorCreateWithoutProfileInput[] | CompetitorUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: CompetitorCreateOrConnectWithoutProfileInput | CompetitorCreateOrConnectWithoutProfileInput[]
    upsert?: CompetitorUpsertWithWhereUniqueWithoutProfileInput | CompetitorUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: CompetitorCreateManyProfileInputEnvelope
    set?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    disconnect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    delete?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    connect?: CompetitorWhereUniqueInput | CompetitorWhereUniqueInput[]
    update?: CompetitorUpdateWithWhereUniqueWithoutProfileInput | CompetitorUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: CompetitorUpdateManyWithWhereWithoutProfileInput | CompetitorUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: CompetitorScalarWhereInput | CompetitorScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumCompetitionRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionRole | EnumCompetitionRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionRoleFilter<$PrismaModel> | $Enums.CompetitionRole
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCompetitionRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionRole | EnumCompetitionRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionRole[] | ListEnumCompetitionRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionRoleWithAggregatesFilter<$PrismaModel> | $Enums.CompetitionRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompetitionRoleFilter<$PrismaModel>
    _max?: NestedEnumCompetitionRoleFilter<$PrismaModel>
  }

  export type NestedEnumCompetitionCategorySexFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionCategorySex | EnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionCategorySexFilter<$PrismaModel> | $Enums.CompetitionCategorySex
  }

  export type NestedEnumCompetitionCategorySexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompetitionCategorySex | EnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    in?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompetitionCategorySex[] | ListEnumCompetitionCategorySexFieldRefInput<$PrismaModel>
    not?: NestedEnumCompetitionCategorySexWithAggregatesFilter<$PrismaModel> | $Enums.CompetitionCategorySex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompetitionCategorySexFilter<$PrismaModel>
    _max?: NestedEnumCompetitionCategorySexFilter<$PrismaModel>
  }

  export type NestedEnumSexFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexFilter<$PrismaModel> | $Enums.Sex
  }

  export type NestedEnumBeltNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Belt | EnumBeltFieldRefInput<$PrismaModel> | null
    in?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBeltNullableFilter<$PrismaModel> | $Enums.Belt | null
  }

  export type NestedEnumSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Sex | EnumSexFieldRefInput<$PrismaModel>
    in?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.Sex[] | ListEnumSexFieldRefInput<$PrismaModel>
    not?: NestedEnumSexWithAggregatesFilter<$PrismaModel> | $Enums.Sex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSexFilter<$PrismaModel>
    _max?: NestedEnumSexFilter<$PrismaModel>
  }

  export type NestedEnumBeltNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Belt | EnumBeltFieldRefInput<$PrismaModel> | null
    in?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Belt[] | ListEnumBeltFieldRefInput<$PrismaModel> | null
    not?: NestedEnumBeltNullableWithAggregatesFilter<$PrismaModel> | $Enums.Belt | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumBeltNullableFilter<$PrismaModel>
    _max?: NestedEnumBeltNullableFilter<$PrismaModel>
  }

  export type CompetitionCreateWithoutCampInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CompetitionCategoryCreateNestedManyWithoutCompetitionInput
    competitionAdmins?: CompetitionAdminCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutCampInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CompetitionCategoryUncheckedCreateNestedManyWithoutCompetitionInput
    competitionAdmins?: CompetitionAdminUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutCampInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutCampInput, CompetitionUncheckedCreateWithoutCampInput>
  }

  export type CompetitionUpsertWithoutCampInput = {
    update: XOR<CompetitionUpdateWithoutCampInput, CompetitionUncheckedUpdateWithoutCampInput>
    create: XOR<CompetitionCreateWithoutCampInput, CompetitionUncheckedCreateWithoutCampInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutCampInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutCampInput, CompetitionUncheckedUpdateWithoutCampInput>
  }

  export type CompetitionUpdateWithoutCampInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CompetitionCategoryUpdateManyWithoutCompetitionNestedInput
    competitionAdmins?: CompetitionAdminUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutCampInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CompetitionCategoryUncheckedUpdateManyWithoutCompetitionNestedInput
    competitionAdmins?: CompetitionAdminUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type ClubMetadataCreateWithoutClubInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubMetadataUncheckedCreateWithoutClubInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubMetadataCreateOrConnectWithoutClubInput = {
    where: ClubMetadataWhereUniqueInput
    create: XOR<ClubMetadataCreateWithoutClubInput, ClubMetadataUncheckedCreateWithoutClubInput>
  }

  export type UserProfileCreateWithoutClubInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutUserProfileInput
    participations?: CompetitorCreateNestedManyWithoutProfileInput
  }

  export type UserProfileUncheckedCreateWithoutClubInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    userId?: string | null
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: CompetitorUncheckedCreateNestedManyWithoutProfileInput
  }

  export type UserProfileCreateOrConnectWithoutClubInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutClubInput, UserProfileUncheckedCreateWithoutClubInput>
  }

  export type UserProfileCreateManyClubInputEnvelope = {
    data: UserProfileCreateManyClubInput | UserProfileCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type ClubMetadataUpsertWithoutClubInput = {
    update: XOR<ClubMetadataUpdateWithoutClubInput, ClubMetadataUncheckedUpdateWithoutClubInput>
    create: XOR<ClubMetadataCreateWithoutClubInput, ClubMetadataUncheckedCreateWithoutClubInput>
    where?: ClubMetadataWhereInput
  }

  export type ClubMetadataUpdateToOneWithWhereWithoutClubInput = {
    where?: ClubMetadataWhereInput
    data: XOR<ClubMetadataUpdateWithoutClubInput, ClubMetadataUncheckedUpdateWithoutClubInput>
  }

  export type ClubMetadataUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubMetadataUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUpsertWithWhereUniqueWithoutClubInput = {
    where: UserProfileWhereUniqueInput
    update: XOR<UserProfileUpdateWithoutClubInput, UserProfileUncheckedUpdateWithoutClubInput>
    create: XOR<UserProfileCreateWithoutClubInput, UserProfileUncheckedCreateWithoutClubInput>
  }

  export type UserProfileUpdateWithWhereUniqueWithoutClubInput = {
    where: UserProfileWhereUniqueInput
    data: XOR<UserProfileUpdateWithoutClubInput, UserProfileUncheckedUpdateWithoutClubInput>
  }

  export type UserProfileUpdateManyWithWhereWithoutClubInput = {
    where: UserProfileScalarWhereInput
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyWithoutClubInput>
  }

  export type UserProfileScalarWhereInput = {
    AND?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
    OR?: UserProfileScalarWhereInput[]
    NOT?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    firstName?: StringNullableFilter<"UserProfile"> | string | null
    lastName?: StringNullableFilter<"UserProfile"> | string | null
    nationalId?: StringNullableFilter<"UserProfile"> | string | null
    nationalIdType?: StringNullableFilter<"UserProfile"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    sex?: EnumSexFilter<"UserProfile"> | $Enums.Sex
    userId?: StringNullableFilter<"UserProfile"> | string | null
    clubId?: StringNullableFilter<"UserProfile"> | string | null
    belt?: EnumBeltNullableFilter<"UserProfile"> | $Enums.Belt | null
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
  }

  export type ClubCreateWithoutClubMetadataInput = {
    id?: string
    name: string
    slug: string
    description: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userProfiles?: UserProfileCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutClubMetadataInput = {
    id?: string
    name: string
    slug: string
    description: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userProfiles?: UserProfileUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutClubMetadataInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutClubMetadataInput, ClubUncheckedCreateWithoutClubMetadataInput>
  }

  export type ClubUpsertWithoutClubMetadataInput = {
    update: XOR<ClubUpdateWithoutClubMetadataInput, ClubUncheckedUpdateWithoutClubMetadataInput>
    create: XOR<ClubCreateWithoutClubMetadataInput, ClubUncheckedCreateWithoutClubMetadataInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutClubMetadataInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutClubMetadataInput, ClubUncheckedUpdateWithoutClubMetadataInput>
  }

  export type ClubUpdateWithoutClubMetadataInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userProfiles?: UserProfileUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutClubMetadataInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userProfiles?: UserProfileUncheckedUpdateManyWithoutClubNestedInput
  }

  export type CompetitionCategoryCreateWithoutCompetitionInput = {
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    category: CategoryCreateNestedOneWithoutCompetitionCategoriesInput
    competitors?: CompetitorCreateNestedManyWithoutCompetitionCategoryInput
  }

  export type CompetitionCategoryUncheckedCreateWithoutCompetitionInput = {
    id?: number
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    categoryId: number
    categoryName: string
    competitors?: CompetitorUncheckedCreateNestedManyWithoutCompetitionCategoryInput
  }

  export type CompetitionCategoryCreateOrConnectWithoutCompetitionInput = {
    where: CompetitionCategoryWhereUniqueInput
    create: XOR<CompetitionCategoryCreateWithoutCompetitionInput, CompetitionCategoryUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionCategoryCreateManyCompetitionInputEnvelope = {
    data: CompetitionCategoryCreateManyCompetitionInput | CompetitionCategoryCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type CampCreateWithoutConnectedCompetitionInput = {
    id?: string
    name: string
    slug: string
  }

  export type CampUncheckedCreateWithoutConnectedCompetitionInput = {
    id?: string
    name: string
    slug: string
  }

  export type CampCreateOrConnectWithoutConnectedCompetitionInput = {
    where: CampWhereUniqueInput
    create: XOR<CampCreateWithoutConnectedCompetitionInput, CampUncheckedCreateWithoutConnectedCompetitionInput>
  }

  export type CompetitionAdminCreateWithoutCompetitionInput = {
    role: $Enums.CompetitionRole
    user: UserCreateNestedOneWithoutCompetitionAdminsInput
  }

  export type CompetitionAdminUncheckedCreateWithoutCompetitionInput = {
    id?: number
    userId: string
    role: $Enums.CompetitionRole
  }

  export type CompetitionAdminCreateOrConnectWithoutCompetitionInput = {
    where: CompetitionAdminWhereUniqueInput
    create: XOR<CompetitionAdminCreateWithoutCompetitionInput, CompetitionAdminUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionAdminCreateManyCompetitionInputEnvelope = {
    data: CompetitionAdminCreateManyCompetitionInput | CompetitionAdminCreateManyCompetitionInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionCategoryUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionCategoryWhereUniqueInput
    update: XOR<CompetitionCategoryUpdateWithoutCompetitionInput, CompetitionCategoryUncheckedUpdateWithoutCompetitionInput>
    create: XOR<CompetitionCategoryCreateWithoutCompetitionInput, CompetitionCategoryUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionCategoryUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionCategoryWhereUniqueInput
    data: XOR<CompetitionCategoryUpdateWithoutCompetitionInput, CompetitionCategoryUncheckedUpdateWithoutCompetitionInput>
  }

  export type CompetitionCategoryUpdateManyWithWhereWithoutCompetitionInput = {
    where: CompetitionCategoryScalarWhereInput
    data: XOR<CompetitionCategoryUpdateManyMutationInput, CompetitionCategoryUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type CompetitionCategoryScalarWhereInput = {
    AND?: CompetitionCategoryScalarWhereInput | CompetitionCategoryScalarWhereInput[]
    OR?: CompetitionCategoryScalarWhereInput[]
    NOT?: CompetitionCategoryScalarWhereInput | CompetitionCategoryScalarWhereInput[]
    id?: IntFilter<"CompetitionCategory"> | number
    weights?: StringNullableListFilter<"CompetitionCategory">
    largestYearAllowed?: IntFilter<"CompetitionCategory"> | number
    smallestYearAllowed?: IntFilter<"CompetitionCategory"> | number
    sex?: EnumCompetitionCategorySexFilter<"CompetitionCategory"> | $Enums.CompetitionCategorySex
    competitionId?: StringFilter<"CompetitionCategory"> | string
    competitionName?: StringFilter<"CompetitionCategory"> | string
    competitionSlug?: StringFilter<"CompetitionCategory"> | string
    categoryId?: IntFilter<"CompetitionCategory"> | number
    categoryName?: StringFilter<"CompetitionCategory"> | string
  }

  export type CampUpsertWithoutConnectedCompetitionInput = {
    update: XOR<CampUpdateWithoutConnectedCompetitionInput, CampUncheckedUpdateWithoutConnectedCompetitionInput>
    create: XOR<CampCreateWithoutConnectedCompetitionInput, CampUncheckedCreateWithoutConnectedCompetitionInput>
    where?: CampWhereInput
  }

  export type CampUpdateToOneWithWhereWithoutConnectedCompetitionInput = {
    where?: CampWhereInput
    data: XOR<CampUpdateWithoutConnectedCompetitionInput, CampUncheckedUpdateWithoutConnectedCompetitionInput>
  }

  export type CampUpdateWithoutConnectedCompetitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CampUncheckedUpdateWithoutConnectedCompetitionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionAdminUpsertWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionAdminWhereUniqueInput
    update: XOR<CompetitionAdminUpdateWithoutCompetitionInput, CompetitionAdminUncheckedUpdateWithoutCompetitionInput>
    create: XOR<CompetitionAdminCreateWithoutCompetitionInput, CompetitionAdminUncheckedCreateWithoutCompetitionInput>
  }

  export type CompetitionAdminUpdateWithWhereUniqueWithoutCompetitionInput = {
    where: CompetitionAdminWhereUniqueInput
    data: XOR<CompetitionAdminUpdateWithoutCompetitionInput, CompetitionAdminUncheckedUpdateWithoutCompetitionInput>
  }

  export type CompetitionAdminUpdateManyWithWhereWithoutCompetitionInput = {
    where: CompetitionAdminScalarWhereInput
    data: XOR<CompetitionAdminUpdateManyMutationInput, CompetitionAdminUncheckedUpdateManyWithoutCompetitionInput>
  }

  export type CompetitionAdminScalarWhereInput = {
    AND?: CompetitionAdminScalarWhereInput | CompetitionAdminScalarWhereInput[]
    OR?: CompetitionAdminScalarWhereInput[]
    NOT?: CompetitionAdminScalarWhereInput | CompetitionAdminScalarWhereInput[]
    id?: IntFilter<"CompetitionAdmin"> | number
    competitionId?: StringFilter<"CompetitionAdmin"> | string
    userId?: StringFilter<"CompetitionAdmin"> | string
    role?: EnumCompetitionRoleFilter<"CompetitionAdmin"> | $Enums.CompetitionRole
  }

  export type CompetitionCreateWithoutCompetitionAdminsInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CompetitionCategoryCreateNestedManyWithoutCompetitionInput
    camp?: CampCreateNestedOneWithoutConnectedCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutCompetitionAdminsInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CompetitionCategoryUncheckedCreateNestedManyWithoutCompetitionInput
    camp?: CampUncheckedCreateNestedOneWithoutConnectedCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutCompetitionAdminsInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutCompetitionAdminsInput, CompetitionUncheckedCreateWithoutCompetitionAdminsInput>
  }

  export type UserCreateWithoutCompetitionAdminsInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userProfile?: UserProfileCreateNestedOneWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompetitionAdminsInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompetitionAdminsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompetitionAdminsInput, UserUncheckedCreateWithoutCompetitionAdminsInput>
  }

  export type CompetitionUpsertWithoutCompetitionAdminsInput = {
    update: XOR<CompetitionUpdateWithoutCompetitionAdminsInput, CompetitionUncheckedUpdateWithoutCompetitionAdminsInput>
    create: XOR<CompetitionCreateWithoutCompetitionAdminsInput, CompetitionUncheckedCreateWithoutCompetitionAdminsInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutCompetitionAdminsInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutCompetitionAdminsInput, CompetitionUncheckedUpdateWithoutCompetitionAdminsInput>
  }

  export type CompetitionUpdateWithoutCompetitionAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CompetitionCategoryUpdateManyWithoutCompetitionNestedInput
    camp?: CampUpdateOneWithoutConnectedCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutCompetitionAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CompetitionCategoryUncheckedUpdateManyWithoutCompetitionNestedInput
    camp?: CampUncheckedUpdateOneWithoutConnectedCompetitionNestedInput
  }

  export type UserUpsertWithoutCompetitionAdminsInput = {
    update: XOR<UserUpdateWithoutCompetitionAdminsInput, UserUncheckedUpdateWithoutCompetitionAdminsInput>
    create: XOR<UserCreateWithoutCompetitionAdminsInput, UserUncheckedCreateWithoutCompetitionAdminsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompetitionAdminsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompetitionAdminsInput, UserUncheckedUpdateWithoutCompetitionAdminsInput>
  }

  export type UserUpdateWithoutCompetitionAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompetitionAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompetitionCategoryCreateWithoutCategoryInput = {
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competition?: CompetitionCreateNestedOneWithoutCategoriesInput
    competitors?: CompetitorCreateNestedManyWithoutCompetitionCategoryInput
  }

  export type CompetitionCategoryUncheckedCreateWithoutCategoryInput = {
    id?: number
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competitionId: string
    competitionName: string
    competitionSlug: string
    competitors?: CompetitorUncheckedCreateNestedManyWithoutCompetitionCategoryInput
  }

  export type CompetitionCategoryCreateOrConnectWithoutCategoryInput = {
    where: CompetitionCategoryWhereUniqueInput
    create: XOR<CompetitionCategoryCreateWithoutCategoryInput, CompetitionCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type CompetitionCategoryCreateManyCategoryInputEnvelope = {
    data: CompetitionCategoryCreateManyCategoryInput | CompetitionCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CompetitionCategoryWhereUniqueInput
    update: XOR<CompetitionCategoryUpdateWithoutCategoryInput, CompetitionCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<CompetitionCategoryCreateWithoutCategoryInput, CompetitionCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type CompetitionCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CompetitionCategoryWhereUniqueInput
    data: XOR<CompetitionCategoryUpdateWithoutCategoryInput, CompetitionCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type CompetitionCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: CompetitionCategoryScalarWhereInput
    data: XOR<CompetitionCategoryUpdateManyMutationInput, CompetitionCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CompetitionCreateWithoutCategoriesInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    camp?: CampCreateNestedOneWithoutConnectedCompetitionInput
    competitionAdmins?: CompetitionAdminCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionUncheckedCreateWithoutCategoriesInput = {
    id?: string
    name: string
    slug: string
    clubName: string
    isPublished?: boolean
    isArchived?: boolean
    description?: string | null
    startingAt?: Date | string | null
    location?: string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    camp?: CampUncheckedCreateNestedOneWithoutConnectedCompetitionInput
    competitionAdmins?: CompetitionAdminUncheckedCreateNestedManyWithoutCompetitionInput
  }

  export type CompetitionCreateOrConnectWithoutCategoriesInput = {
    where: CompetitionWhereUniqueInput
    create: XOR<CompetitionCreateWithoutCategoriesInput, CompetitionUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryCreateWithoutCompetitionCategoriesInput = {
    value: string
  }

  export type CategoryUncheckedCreateWithoutCompetitionCategoriesInput = {
    id?: number
    value: string
  }

  export type CategoryCreateOrConnectWithoutCompetitionCategoriesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCompetitionCategoriesInput, CategoryUncheckedCreateWithoutCompetitionCategoriesInput>
  }

  export type CompetitorCreateWithoutCompetitionCategoryInput = {
    clubName: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    profile: UserProfileCreateNestedOneWithoutParticipationsInput
  }

  export type CompetitorUncheckedCreateWithoutCompetitionCategoryInput = {
    id?: number
    clubName: string
    profileId: string
    firstName: string
    lastName: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type CompetitorCreateOrConnectWithoutCompetitionCategoryInput = {
    where: CompetitorWhereUniqueInput
    create: XOR<CompetitorCreateWithoutCompetitionCategoryInput, CompetitorUncheckedCreateWithoutCompetitionCategoryInput>
  }

  export type CompetitorCreateManyCompetitionCategoryInputEnvelope = {
    data: CompetitorCreateManyCompetitionCategoryInput | CompetitorCreateManyCompetitionCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionUpsertWithoutCategoriesInput = {
    update: XOR<CompetitionUpdateWithoutCategoriesInput, CompetitionUncheckedUpdateWithoutCategoriesInput>
    create: XOR<CompetitionCreateWithoutCategoriesInput, CompetitionUncheckedCreateWithoutCategoriesInput>
    where?: CompetitionWhereInput
  }

  export type CompetitionUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: CompetitionWhereInput
    data: XOR<CompetitionUpdateWithoutCategoriesInput, CompetitionUncheckedUpdateWithoutCategoriesInput>
  }

  export type CompetitionUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    camp?: CampUpdateOneWithoutConnectedCompetitionNestedInput
    competitionAdmins?: CompetitionAdminUpdateManyWithoutCompetitionNestedInput
  }

  export type CompetitionUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startingAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    additionalInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    camp?: CampUncheckedUpdateOneWithoutConnectedCompetitionNestedInput
    competitionAdmins?: CompetitionAdminUncheckedUpdateManyWithoutCompetitionNestedInput
  }

  export type CategoryUpsertWithoutCompetitionCategoriesInput = {
    update: XOR<CategoryUpdateWithoutCompetitionCategoriesInput, CategoryUncheckedUpdateWithoutCompetitionCategoriesInput>
    create: XOR<CategoryCreateWithoutCompetitionCategoriesInput, CategoryUncheckedCreateWithoutCompetitionCategoriesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutCompetitionCategoriesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutCompetitionCategoriesInput, CategoryUncheckedUpdateWithoutCompetitionCategoriesInput>
  }

  export type CategoryUpdateWithoutCompetitionCategoriesInput = {
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutCompetitionCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitorUpsertWithWhereUniqueWithoutCompetitionCategoryInput = {
    where: CompetitorWhereUniqueInput
    update: XOR<CompetitorUpdateWithoutCompetitionCategoryInput, CompetitorUncheckedUpdateWithoutCompetitionCategoryInput>
    create: XOR<CompetitorCreateWithoutCompetitionCategoryInput, CompetitorUncheckedCreateWithoutCompetitionCategoryInput>
  }

  export type CompetitorUpdateWithWhereUniqueWithoutCompetitionCategoryInput = {
    where: CompetitorWhereUniqueInput
    data: XOR<CompetitorUpdateWithoutCompetitionCategoryInput, CompetitorUncheckedUpdateWithoutCompetitionCategoryInput>
  }

  export type CompetitorUpdateManyWithWhereWithoutCompetitionCategoryInput = {
    where: CompetitorScalarWhereInput
    data: XOR<CompetitorUpdateManyMutationInput, CompetitorUncheckedUpdateManyWithoutCompetitionCategoryInput>
  }

  export type CompetitorScalarWhereInput = {
    AND?: CompetitorScalarWhereInput | CompetitorScalarWhereInput[]
    OR?: CompetitorScalarWhereInput[]
    NOT?: CompetitorScalarWhereInput | CompetitorScalarWhereInput[]
    id?: IntFilter<"Competitor"> | number
    clubName?: StringFilter<"Competitor"> | string
    profileId?: StringFilter<"Competitor"> | string
    firstName?: StringFilter<"Competitor"> | string
    lastName?: StringFilter<"Competitor"> | string
    competitionCategoryId?: IntFilter<"Competitor"> | number
    competitionId?: StringFilter<"Competitor"> | string
    competitionName?: StringFilter<"Competitor"> | string
    competitionSlug?: StringFilter<"Competitor"> | string
    weight?: StringFilter<"Competitor"> | string
    createdAt?: DateTimeFilter<"Competitor"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Competitor"> | Date | string | null
  }

  export type UserProfileCreateWithoutParticipationsInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutUserProfileInput
    club?: ClubCreateNestedOneWithoutUserProfilesInput
  }

  export type UserProfileUncheckedCreateWithoutParticipationsInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    userId?: string | null
    clubId?: string | null
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutParticipationsInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
  }

  export type CompetitionCategoryCreateWithoutCompetitorsInput = {
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competition?: CompetitionCreateNestedOneWithoutCategoriesInput
    category: CategoryCreateNestedOneWithoutCompetitionCategoriesInput
  }

  export type CompetitionCategoryUncheckedCreateWithoutCompetitorsInput = {
    id?: number
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competitionId: string
    competitionName: string
    competitionSlug: string
    categoryId: number
    categoryName: string
  }

  export type CompetitionCategoryCreateOrConnectWithoutCompetitorsInput = {
    where: CompetitionCategoryWhereUniqueInput
    create: XOR<CompetitionCategoryCreateWithoutCompetitorsInput, CompetitionCategoryUncheckedCreateWithoutCompetitorsInput>
  }

  export type UserProfileUpsertWithoutParticipationsInput = {
    update: XOR<UserProfileUpdateWithoutParticipationsInput, UserProfileUncheckedUpdateWithoutParticipationsInput>
    create: XOR<UserProfileCreateWithoutParticipationsInput, UserProfileUncheckedCreateWithoutParticipationsInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutParticipationsInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutParticipationsInput, UserProfileUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserProfileUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutUserProfileNestedInput
    club?: ClubUpdateOneWithoutUserProfilesNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetitionCategoryUpsertWithoutCompetitorsInput = {
    update: XOR<CompetitionCategoryUpdateWithoutCompetitorsInput, CompetitionCategoryUncheckedUpdateWithoutCompetitorsInput>
    create: XOR<CompetitionCategoryCreateWithoutCompetitorsInput, CompetitionCategoryUncheckedCreateWithoutCompetitorsInput>
    where?: CompetitionCategoryWhereInput
  }

  export type CompetitionCategoryUpdateToOneWithWhereWithoutCompetitorsInput = {
    where?: CompetitionCategoryWhereInput
    data: XOR<CompetitionCategoryUpdateWithoutCompetitorsInput, CompetitionCategoryUncheckedUpdateWithoutCompetitorsInput>
  }

  export type CompetitionCategoryUpdateWithoutCompetitorsInput = {
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competition?: CompetitionUpdateOneWithoutCategoriesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCompetitionCategoriesNestedInput
  }

  export type CompetitionCategoryUncheckedUpdateWithoutCompetitorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    competitionAdmins?: CompetitionAdminCreateNestedManyWithoutUserInput
    userProfile?: UserProfileCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    competitionAdmins?: CompetitionAdminUncheckedCreateNestedManyWithoutUserInput
    userProfile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    competitionAdmins?: CompetitionAdminUpdateManyWithoutUserNestedInput
    userProfile?: UserProfileUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    competitionAdmins?: CompetitionAdminUncheckedUpdateManyWithoutUserNestedInput
    userProfile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CompetitionAdminCreateWithoutUserInput = {
    role: $Enums.CompetitionRole
    competition: CompetitionCreateNestedOneWithoutCompetitionAdminsInput
  }

  export type CompetitionAdminUncheckedCreateWithoutUserInput = {
    id?: number
    competitionId: string
    role: $Enums.CompetitionRole
  }

  export type CompetitionAdminCreateOrConnectWithoutUserInput = {
    where: CompetitionAdminWhereUniqueInput
    create: XOR<CompetitionAdminCreateWithoutUserInput, CompetitionAdminUncheckedCreateWithoutUserInput>
  }

  export type CompetitionAdminCreateManyUserInputEnvelope = {
    data: CompetitionAdminCreateManyUserInput | CompetitionAdminCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileCreateWithoutUserInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
    club?: ClubCreateNestedOneWithoutUserProfilesInput
    participations?: CompetitorCreateNestedManyWithoutProfileInput
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    clubId?: string | null
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: CompetitorUncheckedCreateNestedManyWithoutProfileInput
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateWithoutUserInput = {
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CompetitionAdminUpsertWithWhereUniqueWithoutUserInput = {
    where: CompetitionAdminWhereUniqueInput
    update: XOR<CompetitionAdminUpdateWithoutUserInput, CompetitionAdminUncheckedUpdateWithoutUserInput>
    create: XOR<CompetitionAdminCreateWithoutUserInput, CompetitionAdminUncheckedCreateWithoutUserInput>
  }

  export type CompetitionAdminUpdateWithWhereUniqueWithoutUserInput = {
    where: CompetitionAdminWhereUniqueInput
    data: XOR<CompetitionAdminUpdateWithoutUserInput, CompetitionAdminUncheckedUpdateWithoutUserInput>
  }

  export type CompetitionAdminUpdateManyWithWhereWithoutUserInput = {
    where: CompetitionAdminScalarWhereInput
    data: XOR<CompetitionAdminUpdateManyMutationInput, CompetitionAdminUncheckedUpdateManyWithoutUserInput>
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    club?: ClubUpdateOneWithoutUserProfilesNestedInput
    participations?: CompetitorUpdateManyWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: CompetitorUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    token?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type UserCreateWithoutUserProfileInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    competitionAdmins?: CompetitionAdminCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserProfileInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    competitionAdmins?: CompetitionAdminUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
  }

  export type ClubCreateWithoutUserProfilesInput = {
    id?: string
    name: string
    slug: string
    description: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubMetadata?: ClubMetadataCreateNestedOneWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutUserProfilesInput = {
    id?: string
    name: string
    slug: string
    description: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clubMetadata?: ClubMetadataUncheckedCreateNestedOneWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutUserProfilesInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutUserProfilesInput, ClubUncheckedCreateWithoutUserProfilesInput>
  }

  export type CompetitorCreateWithoutProfileInput = {
    clubName: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    competitionCategory: CompetitionCategoryCreateNestedOneWithoutCompetitorsInput
  }

  export type CompetitorUncheckedCreateWithoutProfileInput = {
    id?: number
    clubName: string
    competitionCategoryId: number
    competitionId: string
    competitionName: string
    competitionSlug: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type CompetitorCreateOrConnectWithoutProfileInput = {
    where: CompetitorWhereUniqueInput
    create: XOR<CompetitorCreateWithoutProfileInput, CompetitorUncheckedCreateWithoutProfileInput>
  }

  export type CompetitorCreateManyProfileInputEnvelope = {
    data: CompetitorCreateManyProfileInput | CompetitorCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUserProfileInput = {
    update: XOR<UserUpdateWithoutUserProfileInput, UserUncheckedUpdateWithoutUserProfileInput>
    create: XOR<UserCreateWithoutUserProfileInput, UserUncheckedCreateWithoutUserProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserProfileInput, UserUncheckedUpdateWithoutUserProfileInput>
  }

  export type UserUpdateWithoutUserProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    competitionAdmins?: CompetitionAdminUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    competitionAdmins?: CompetitionAdminUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClubUpsertWithoutUserProfilesInput = {
    update: XOR<ClubUpdateWithoutUserProfilesInput, ClubUncheckedUpdateWithoutUserProfilesInput>
    create: XOR<ClubCreateWithoutUserProfilesInput, ClubUncheckedCreateWithoutUserProfilesInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutUserProfilesInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutUserProfilesInput, ClubUncheckedUpdateWithoutUserProfilesInput>
  }

  export type ClubUpdateWithoutUserProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubMetadata?: ClubMetadataUpdateOneWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutUserProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clubMetadata?: ClubMetadataUncheckedUpdateOneWithoutClubNestedInput
  }

  export type CompetitorUpsertWithWhereUniqueWithoutProfileInput = {
    where: CompetitorWhereUniqueInput
    update: XOR<CompetitorUpdateWithoutProfileInput, CompetitorUncheckedUpdateWithoutProfileInput>
    create: XOR<CompetitorCreateWithoutProfileInput, CompetitorUncheckedCreateWithoutProfileInput>
  }

  export type CompetitorUpdateWithWhereUniqueWithoutProfileInput = {
    where: CompetitorWhereUniqueInput
    data: XOR<CompetitorUpdateWithoutProfileInput, CompetitorUncheckedUpdateWithoutProfileInput>
  }

  export type CompetitorUpdateManyWithWhereWithoutProfileInput = {
    where: CompetitorScalarWhereInput
    data: XOR<CompetitorUpdateManyMutationInput, CompetitorUncheckedUpdateManyWithoutProfileInput>
  }

  export type UserProfileCreateManyClubInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    nationalId?: string | null
    nationalIdType?: string | null
    dateOfBirth?: Date | string | null
    sex?: $Enums.Sex
    userId?: string | null
    belt?: $Enums.Belt | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutUserProfileNestedInput
    participations?: CompetitorUpdateManyWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: CompetitorUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    nationalId?: NullableStringFieldUpdateOperationsInput | string | null
    nationalIdType?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sex?: EnumSexFieldUpdateOperationsInput | $Enums.Sex
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    belt?: NullableEnumBeltFieldUpdateOperationsInput | $Enums.Belt | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetitionCategoryCreateManyCompetitionInput = {
    id?: number
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    categoryId: number
    categoryName: string
  }

  export type CompetitionAdminCreateManyCompetitionInput = {
    id?: number
    userId: string
    role: $Enums.CompetitionRole
  }

  export type CompetitionCategoryUpdateWithoutCompetitionInput = {
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    category?: CategoryUpdateOneRequiredWithoutCompetitionCategoriesNestedInput
    competitors?: CompetitorUpdateManyWithoutCompetitionCategoryNestedInput
  }

  export type CompetitionCategoryUncheckedUpdateWithoutCompetitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    competitors?: CompetitorUncheckedUpdateManyWithoutCompetitionCategoryNestedInput
  }

  export type CompetitionCategoryUncheckedUpdateManyWithoutCompetitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    categoryId?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitionAdminUpdateWithoutCompetitionInput = {
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
    user?: UserUpdateOneRequiredWithoutCompetitionAdminsNestedInput
  }

  export type CompetitionAdminUncheckedUpdateWithoutCompetitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
  }

  export type CompetitionAdminUncheckedUpdateManyWithoutCompetitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
  }

  export type CompetitionCategoryCreateManyCategoryInput = {
    id?: number
    weights?: CompetitionCategoryCreateweightsInput | string[]
    largestYearAllowed: number
    smallestYearAllowed: number
    sex: $Enums.CompetitionCategorySex
    competitionId: string
    competitionName: string
    competitionSlug: string
  }

  export type CompetitionCategoryUpdateWithoutCategoryInput = {
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competition?: CompetitionUpdateOneWithoutCategoriesNestedInput
    competitors?: CompetitorUpdateManyWithoutCompetitionCategoryNestedInput
  }

  export type CompetitionCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    competitors?: CompetitorUncheckedUpdateManyWithoutCompetitionCategoryNestedInput
  }

  export type CompetitionCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    weights?: CompetitionCategoryUpdateweightsInput | string[]
    largestYearAllowed?: IntFieldUpdateOperationsInput | number
    smallestYearAllowed?: IntFieldUpdateOperationsInput | number
    sex?: EnumCompetitionCategorySexFieldUpdateOperationsInput | $Enums.CompetitionCategorySex
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
  }

  export type CompetitorCreateManyCompetitionCategoryInput = {
    id?: number
    clubName: string
    profileId: string
    firstName: string
    lastName: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type CompetitorUpdateWithoutCompetitionCategoryInput = {
    clubName?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    profile?: UserProfileUpdateOneRequiredWithoutParticipationsNestedInput
  }

  export type CompetitorUncheckedUpdateWithoutCompetitionCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubName?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompetitorUncheckedUpdateManyWithoutCompetitionCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubName?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompetitionAdminCreateManyUserInput = {
    id?: number
    competitionId: string
    role: $Enums.CompetitionRole
  }

  export type SessionCreateManyUserInput = {
    id?: number
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type CompetitionAdminUpdateWithoutUserInput = {
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
    competition?: CompetitionUpdateOneRequiredWithoutCompetitionAdminsNestedInput
  }

  export type CompetitionAdminUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
  }

  export type CompetitionAdminUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompetitionRoleFieldUpdateOperationsInput | $Enums.CompetitionRole
  }

  export type SessionUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetitorCreateManyProfileInput = {
    id?: number
    clubName: string
    competitionCategoryId: number
    competitionId: string
    competitionName: string
    competitionSlug: string
    weight: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type CompetitorUpdateWithoutProfileInput = {
    clubName?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    competitionCategory?: CompetitionCategoryUpdateOneRequiredWithoutCompetitorsNestedInput
  }

  export type CompetitorUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubName?: StringFieldUpdateOperationsInput | string
    competitionCategoryId?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompetitorUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    clubName?: StringFieldUpdateOperationsInput | string
    competitionCategoryId?: IntFieldUpdateOperationsInput | number
    competitionId?: StringFieldUpdateOperationsInput | string
    competitionName?: StringFieldUpdateOperationsInput | string
    competitionSlug?: StringFieldUpdateOperationsInput | string
    weight?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}